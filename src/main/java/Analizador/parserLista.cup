package Analizador;
import Interprete.Errores;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import com.mycompany.practica1.Lista;
import java.util.ArrayList;

parser code
{:

    public Lista la_lista = new Lista();
    public ArrayList<Errores> lista_errores = new ArrayList<>();

    public void syntax_error(Symbol cur_token) {
        String esperados = "";
        for (int i = 0; i < expected_token_ids().size(); i++) {
            System.out.println(expected_token_ids().get(i) + "no se");
            esperados += symbl_name_from_id(expected_token_ids().get(i)) + "-";
        }
        System.out.print(esperados + ", pero se encontro " + cur_token.value + " en la linea" + cur_token.right + " y en la columna" + cur_token.left);
        if (expected_token_ids().isEmpty()) {
            lista_errores.add(new Errores("Sintactico", "No se esperaba " + cur_token.value, cur_token.left + 1, cur_token.right + 1));
        } else {
            lista_errores.add(new Errores("Sintactico", "Se esperaba " + esperados + ", pero se encontro " + cur_token.value, cur_token.left + 1, cur_token.right + 1));
        }
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal "+message+info);
    }
    
    public void report_fatal_error(Symbol cur) {
        System.out.println("unrecovered_syntax_error");
    }

    public void imp(String texto){
        System.out.println(texto);
    }

:};

terminal LISTA, NOMBRE, RANDOM, CIRCULAR, PISTAS, DOSP, TRUE, FALSE, COR_A,
    COR_C, COMA, DOS_P, LLAVE_A, LLAVE_C, ID, STRING;

non terminal inicio, listas, atributos, atributo;
non terminal Boolean booleano;
non terminal ArrayList<String> pistas;
start with inicio;

inicio::=
    listas 
        {:
            if (la_lista.getId()==null){
                lista_errores.add(new Errores("Sintactico","La lista no tiene nombre", 0, 0));
            }
        :}
;

listas::=
    LLAVE_A LISTA DOS_P LLAVE_A atributos LLAVE_C LLAVE_C
|   error
;

atributos::=
    atributos COMA atributo
|   atributo
;

atributo::=
    NOMBRE DOS_P STRING:e1
        {:
            if (!la_lista.agregar_id(e1.toString())){
                lista_errores.add(new Errores("Sintactico","El atributo nombre solo puede venir una vez", e1left+1, e1right+1));
            }
        :}
|   RANDOM DOS_P booleano:e1
        {:
            la_lista.setRandom(e1);
        :}
|   CIRCULAR DOS_P booleano:e1
        {:
            la_lista.setCircular(e1);
        :}
|   PISTAS DOS_P COR_A pistas:e1 COR_C
        {:
            String respuesta = la_lista.agregar_canciones(e1);
            switch(respuesta){
                case "tiene":
                    lista_errores.add(new Errores("Sintactico","El atributo pistas puede venir cero o una vez, no varias", e1left+1,e1right+1));
                    break;
                case "repetida":
                    lista_errores.add(new Errores("Semantico","El atributo pistas trae pistas repetidas",e1left+1,e1right+1));
                    break;
                case "exito":
                    break;
                default:
                    break;
            }
        :}
|   error
;

pistas::=
    pistas:e1 COMA ID:e2
        {:
            RESULT = e1;
            RESULT.add(e2.toString());
        :}
|   ID:e1
        {:
            RESULT = new ArrayList<>();
            RESULT.add(e1.toString());
        :}
;

booleano::=
    TRUE
        {:
            RESULT = true;
        :}
|   FALSE
        {:
            RESULT = false;
        :}
;
