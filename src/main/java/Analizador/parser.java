
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import Interprete.*;
import Interprete.Metodos_Nativos.*;
import java.util.LinkedList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\201\000\002\002\004\000\002\002\003\000\002\015" +
    "\004\000\002\015\003\000\002\016\010\000\002\040\002" +
    "\000\002\040\004\000\002\037\005\000\002\037\003\000" +
    "\002\005\004\000\002\005\003\000\002\003\003\000\002" +
    "\003\003\000\002\021\013\000\002\021\012\000\002\021" +
    "\011\000\002\021\012\000\002\021\011\000\002\021\010" +
    "\000\002\057\002\000\002\057\003\000\002\056\005\000" +
    "\002\056\003\000\002\055\004\000\002\034\004\000\002" +
    "\034\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\004\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\035\004\000\002\035\003\000\002\066\006\000\002" +
    "\051\002\000\002\051\003\000\002\050\005\000\002\050" +
    "\003\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\005\000\002\032\005\000" +
    "\002\032\003\000\002\043\003\000\002\043\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\017\006\000\002\020" +
    "\007\000\002\020\006\000\002\020\011\000\002\020\010" +
    "\000\002\073\002\000\002\073\006\000\002\072\005\000" +
    "\002\071\005\000\002\071\003\000\002\074\003\000\002" +
    "\074\003\000\002\023\002\000\002\023\004\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\004\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\003" +
    "\000\002\022\005\000\002\022\003\000\002\022\004\000" +
    "\002\022\004\000\002\022\004\000\002\047\011\000\002" +
    "\047\015\000\002\047\013\000\002\070\005\000\002\070" +
    "\006\000\002\064\012\000\002\063\011\000\002\067\011" +
    "\000\002\067\012\000\002\067\011\000\002\045\004\000" +
    "\002\045\003\000\002\046\007\000\002\033\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0109\000\004\004\005\001\002\000\006\002\ufffe\004" +
    "\ufffe\001\002\000\004\105\012\001\002\000\006\002\000" +
    "\004\005\001\002\000\004\002\010\001\002\000\004\002" +
    "\001\001\002\000\006\002\uffff\004\uffff\001\002\000\006" +
    "\005\013\116\ufffc\001\002\000\004\105\205\001\002\000" +
    "\004\116\015\001\002\000\024\006\021\007\017\010\020" +
    "\011\032\012\016\015\030\016\023\046\033\105\025\001" +
    "\002\000\006\104\uffaf\105\uffaf\001\002\000\006\104\uffb0" +
    "\105\uffb0\001\002\000\006\104\uffae\105\uffae\001\002\000" +
    "\006\104\uffb1\105\uffb1\001\002\000\026\006\ufff7\007\ufff7" +
    "\010\ufff7\011\ufff7\012\ufff7\015\ufff7\016\ufff7\046\ufff7\105" +
    "\ufff7\117\ufff7\001\002\000\014\006\021\007\017\010\020" +
    "\011\032\012\016\001\002\000\026\006\021\007\017\010" +
    "\020\011\032\012\016\015\030\016\023\046\033\105\025" +
    "\117\u0102\001\002\000\004\110\374\001\002\000\004\105" +
    "\365\001\002\000\026\006\ufff5\007\ufff5\010\ufff5\011\ufff5" +
    "\012\ufff5\015\ufff5\016\ufff5\046\ufff5\105\ufff5\117\ufff5\001" +
    "\002\000\022\006\021\007\017\010\020\011\032\012\016" +
    "\016\306\046\311\105\307\001\002\000\026\006\ufff6\007" +
    "\ufff6\010\ufff6\011\ufff6\012\ufff6\015\ufff6\016\ufff6\046\ufff6" +
    "\105\ufff6\117\ufff6\001\002\000\006\104\uffad\105\uffad\001" +
    "\002\000\004\110\034\001\002\000\004\111\035\001\002" +
    "\000\004\116\036\001\002\000\036\003\055\016\064\017" +
    "\054\021\044\027\061\030\063\031\053\032\056\034\066" +
    "\035\052\043\057\044\040\045\043\105\047\001\002\000" +
    "\040\003\055\016\064\017\054\021\044\027\061\030\063" +
    "\031\053\032\056\034\066\035\052\043\057\044\040\045" +
    "\043\105\047\117\305\001\002\000\004\110\uffc5\001\002" +
    "\000\044\003\uffe2\016\uffe2\017\uffe2\021\uffe2\023\uffe2\024" +
    "\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\034\uffe2\035\uffe2" +
    "\043\uffe2\044\uffe2\045\uffe2\105\uffe2\117\uffe2\001\002\000" +
    "\040\003\uffe8\016\uffe8\017\uffe8\021\uffe8\027\uffe8\030\uffe8" +
    "\031\uffe8\032\uffe8\034\uffe8\035\uffe8\043\uffe8\044\uffe8\045" +
    "\uffe8\105\uffe8\117\uffe8\001\002\000\004\110\uffc8\001\002" +
    "\000\004\110\257\001\002\000\044\003\uffe3\016\uffe3\017" +
    "\uffe3\021\uffe3\023\uffe3\024\uffe3\027\uffe3\030\uffe3\031\uffe3" +
    "\032\uffe3\034\uffe3\035\uffe3\043\uffe3\044\uffe3\045\uffe3\105" +
    "\uffe3\117\uffe3\001\002\000\044\003\uffe6\016\uffe6\017\uffe6" +
    "\021\uffe6\023\uffe6\024\uffe6\027\uffe6\030\uffe6\031\uffe6\032" +
    "\uffe6\034\uffe6\035\uffe6\043\uffe6\044\uffe6\045\uffe6\105\uffe6" +
    "\117\uffe6\001\002\000\006\110\uffc9\114\253\001\002\000" +
    "\044\003\uffe1\016\uffe1\017\uffe1\021\uffe1\023\uffe1\024\uffe1" +
    "\027\uffe1\030\uffe1\031\uffe1\032\uffe1\034\uffe1\035\uffe1\043" +
    "\uffe1\044\uffe1\045\uffe1\105\uffe1\117\uffe1\001\002\000\044" +
    "\003\uffe7\016\uffe7\017\uffe7\021\uffe7\023\uffe7\024\uffe7\027" +
    "\uffe7\030\uffe7\031\uffe7\032\uffe7\034\uffe7\035\uffe7\043\uffe7" +
    "\044\uffe7\045\uffe7\105\uffe7\117\uffe7\001\002\000\004\110" +
    "\uffc7\001\002\000\030\013\101\014\111\055\120\063\076" +
    "\065\122\105\124\106\106\107\105\110\102\112\114\113" +
    "\073\001\002\000\004\110\236\001\002\000\044\003\uffdf" +
    "\016\uffdf\017\uffdf\021\uffdf\023\uffdf\024\uffdf\027\uffdf\030" +
    "\uffdf\031\uffdf\032\uffdf\034\uffdf\035\uffdf\043\uffdf\044\uffdf" +
    "\045\uffdf\105\uffdf\117\uffdf\001\002\000\004\110\uffc4\001" +
    "\002\000\004\110\uffc6\001\002\000\044\003\uffe0\016\uffe0" +
    "\017\uffe0\021\uffe0\023\uffe0\024\uffe0\027\uffe0\030\uffe0\031" +
    "\uffe0\032\uffe0\034\uffe0\035\uffe0\043\uffe0\044\uffe0\045\uffe0" +
    "\105\uffe0\117\uffe0\001\002\000\004\110\230\001\002\000" +
    "\044\003\uffe4\016\uffe4\017\uffe4\021\uffe4\023\uffe4\024\uffe4" +
    "\027\uffe4\030\uffe4\031\uffe4\032\uffe4\034\uffe4\035\uffe4\043" +
    "\uffe4\044\uffe4\045\uffe4\105\uffe4\117\uffe4\001\002\000\004" +
    "\116\214\001\002\000\014\006\021\007\017\010\020\011" +
    "\032\012\016\001\002\000\004\110\067\001\002\000\004" +
    "\110\uffc3\001\002\000\066\013\101\014\111\017\112\032" +
    "\056\033\113\034\066\035\052\036\115\037\071\040\110" +
    "\041\072\042\121\043\057\044\040\045\043\055\120\063" +
    "\076\065\122\101\116\105\103\106\106\107\105\110\102" +
    "\111\uffdb\112\114\113\073\001\002\000\006\100\uffd8\111" +
    "\uffd8\001\002\000\006\100\uffcd\111\uffcd\001\002\000\006" +
    "\100\uffcb\111\uffcb\001\002\000\134\003\uffa7\006\uffa7\007" +
    "\uffa7\010\uffa7\011\uffa7\012\uffa7\015\uffa7\016\uffa7\017\uffa7" +
    "\021\uffa7\023\uffa7\024\uffa7\027\uffa7\030\uffa7\031\uffa7\032" +
    "\uffa7\034\uffa7\035\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7" +
    "\047\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\056" +
    "\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\064\uffa7\065\uffa7" +
    "\066\uffa7\067\uffa7\070\uffa7\071\uffa7\100\uffa7\102\uffa7\105" +
    "\uffa7\111\uffa7\116\uffa7\117\uffa7\001\002\000\006\100\uffd5" +
    "\111\uffd5\001\002\000\050\047\140\050\142\051\137\052" +
    "\131\053\143\054\127\056\126\057\141\060\146\061\130" +
    "\062\145\064\132\065\144\066\135\067\136\070\134\071" +
    "\133\100\uffd7\111\uffd7\001\002\000\030\013\101\014\111" +
    "\055\120\063\076\065\122\105\124\106\106\107\105\110" +
    "\102\112\114\113\073\001\002\000\132\003\uff94\006\uff94" +
    "\007\uff94\010\uff94\011\uff94\012\uff94\015\uff94\016\uff94\017" +
    "\uff94\021\uff94\023\uff94\024\uff94\027\uff94\030\uff94\031\uff94" +
    "\032\uff94\034\uff94\035\uff94\043\uff94\044\uff94\045\uff94\046" +
    "\uff94\047\uff94\050\uff94\051\uff94\052\uff94\053\uff94\054\uff94" +
    "\056\uff94\057\uff94\060\uff94\061\uff94\062\uff94\064\uff94\065" +
    "\uff94\066\uff94\067\uff94\070\uff94\071\uff94\100\uff94\102\uff94" +
    "\105\uff94\111\uff94\117\uff94\001\002\000\006\100\201\111" +
    "\uffda\001\002\000\134\003\uffa9\006\uffa9\007\uffa9\010\uffa9" +
    "\011\uffa9\012\uffa9\015\uffa9\016\uffa9\017\uffa9\021\uffa9\023" +
    "\uffa9\024\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\034\uffa9" +
    "\035\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050" +
    "\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\056\uffa9\057\uffa9" +
    "\060\uffa9\061\uffa9\062\uffa9\064\uffa9\065\uffa9\066\uffa9\067" +
    "\uffa9\070\uffa9\071\uffa9\100\uffa9\102\uffa9\105\uffa9\111\uffa9" +
    "\116\uffa9\117\uffa9\001\002\000\030\013\101\014\111\055" +
    "\120\063\076\065\122\105\124\106\106\107\105\110\102" +
    "\112\114\113\073\001\002\000\052\047\uff92\050\uff92\051" +
    "\uff92\052\uff92\053\uff92\054\uff92\056\uff92\057\uff92\060\uff92" +
    "\061\uff92\062\uff92\064\uff92\065\uff92\066\uff92\067\uff92\070" +
    "\uff92\071\uff92\100\uff92\110\uffc9\111\uff92\001\002\000\006" +
    "\100\uffd6\111\uffd6\001\002\000\134\003\uffaa\006\uffaa\007" +
    "\uffaa\010\uffaa\011\uffaa\012\uffaa\015\uffaa\016\uffaa\017\uffaa" +
    "\021\uffaa\023\uffaa\024\uffaa\027\uffaa\030\uffaa\031\uffaa\032" +
    "\uffaa\034\uffaa\035\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa" +
    "\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\056" +
    "\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\064\uffaa\065\uffaa" +
    "\066\uffaa\067\uffaa\070\uffaa\071\uffaa\100\uffaa\102\uffaa\105" +
    "\uffaa\111\uffaa\116\uffaa\117\uffaa\001\002\000\134\003\uffab" +
    "\006\uffab\007\uffab\010\uffab\011\uffab\012\uffab\015\uffab\016" +
    "\uffab\017\uffab\021\uffab\023\uffab\024\uffab\027\uffab\030\uffab" +
    "\031\uffab\032\uffab\034\uffab\035\uffab\043\uffab\044\uffab\045" +
    "\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053\uffab" +
    "\054\uffab\056\uffab\057\uffab\060\uffab\061\uffab\062\uffab\064" +
    "\uffab\065\uffab\066\uffab\067\uffab\070\uffab\071\uffab\100\uffab" +
    "\102\uffab\105\uffab\111\uffab\116\uffab\117\uffab\001\002\000" +
    "\004\111\176\001\002\000\006\100\uffcc\111\uffcc\001\002" +
    "\000\134\003\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012" +
    "\uffa8\015\uffa8\016\uffa8\017\uffa8\021\uffa8\023\uffa8\024\uffa8" +
    "\027\uffa8\030\uffa8\031\uffa8\032\uffa8\034\uffa8\035\uffa8\043" +
    "\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8" +
    "\052\uffa8\053\uffa8\054\uffa8\056\uffa8\057\uffa8\060\uffa8\061" +
    "\uffa8\062\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8" +
    "\071\uffa8\100\uffa8\102\uffa8\105\uffa8\111\uffa8\116\uffa8\117" +
    "\uffa8\001\002\000\006\100\uffcf\111\uffcf\001\002\000\006" +
    "\100\uffd0\111\uffd0\001\002\000\134\003\uffac\006\uffac\007" +
    "\uffac\010\uffac\011\uffac\012\uffac\015\uffac\016\uffac\017\uffac" +
    "\021\uffac\023\uffac\024\uffac\027\uffac\030\uffac\031\uffac\032" +
    "\uffac\034\uffac\035\uffac\043\uffac\044\uffac\045\uffac\046\uffac" +
    "\047\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\056" +
    "\uffac\057\uffac\060\uffac\061\uffac\062\uffac\064\uffac\065\uffac" +
    "\066\uffac\067\uffac\070\uffac\071\uffac\100\uffac\102\uffac\105" +
    "\uffac\111\uffac\116\uffac\117\uffac\001\002\000\006\100\uffce" +
    "\111\uffce\001\002\000\030\013\101\014\111\055\120\063" +
    "\076\065\122\105\124\106\106\107\105\110\102\112\114" +
    "\113\073\001\002\000\006\100\uffd4\111\uffd4\001\002\000" +
    "\004\105\170\001\002\000\006\100\uffca\111\uffca\001\002" +
    "\000\030\013\101\014\111\055\120\063\076\065\122\105" +
    "\124\106\106\107\105\110\102\112\114\113\073\001\002" +
    "\000\132\003\uffa0\006\uffa0\007\uffa0\010\uffa0\011\uffa0\012" +
    "\uffa0\015\uffa0\016\uffa0\017\uffa0\021\uffa0\023\uffa0\024\uffa0" +
    "\027\uffa0\030\uffa0\031\uffa0\032\uffa0\034\uffa0\035\uffa0\043" +
    "\uffa0\044\uffa0\045\uffa0\046\uffa0\047\140\050\142\051\137" +
    "\052\131\053\143\054\127\056\126\057\141\060\146\061" +
    "\130\062\145\064\uffa0\065\uffa0\066\uffa0\067\uffa0\070\uffa0" +
    "\071\uffa0\100\uffa0\102\uffa0\105\uffa0\111\uffa0\117\uffa0\001" +
    "\002\000\132\003\uff92\006\uff92\007\uff92\010\uff92\011\uff92" +
    "\012\uff92\015\uff92\016\uff92\017\uff92\021\uff92\023\uff92\024" +
    "\uff92\027\uff92\030\uff92\031\uff92\032\uff92\034\uff92\035\uff92" +
    "\043\uff92\044\uff92\045\uff92\046\uff92\047\uff92\050\uff92\051" +
    "\uff92\052\uff92\053\uff92\054\uff92\056\uff92\057\uff92\060\uff92" +
    "\061\uff92\062\uff92\064\uff92\065\uff92\066\uff92\067\uff92\070" +
    "\uff92\071\uff92\100\uff92\102\uff92\105\uff92\111\uff92\117\uff92" +
    "\001\002\000\132\003\uff91\006\uff91\007\uff91\010\uff91\011" +
    "\uff91\012\uff91\015\uff91\016\uff91\017\uff91\021\uff91\023\uff91" +
    "\024\uff91\027\uff91\030\uff91\031\uff91\032\uff91\034\uff91\035" +
    "\uff91\043\uff91\044\uff91\045\uff91\046\uff91\047\uff91\050\uff91" +
    "\051\uff91\052\uff91\053\uff91\054\uff91\056\uff91\057\uff91\060" +
    "\uff91\061\uff91\062\uff91\064\uff91\065\uff91\066\uff91\067\uff91" +
    "\070\uff91\071\uff91\100\uff91\102\uff91\105\uff91\111\uff91\117" +
    "\uff91\001\002\000\030\013\101\014\111\055\120\063\076" +
    "\065\122\105\124\106\106\107\105\110\102\112\114\113" +
    "\073\001\002\000\030\013\101\014\111\055\120\063\076" +
    "\065\122\105\124\106\106\107\105\110\102\112\114\113" +
    "\073\001\002\000\030\013\101\014\111\055\120\063\076" +
    "\065\122\105\124\106\106\107\105\110\102\112\114\113" +
    "\073\001\002\000\030\013\101\014\111\055\120\063\076" +
    "\065\122\105\124\106\106\107\105\110\102\112\114\113" +
    "\073\001\002\000\030\013\101\014\111\055\120\063\076" +
    "\065\122\105\124\106\106\107\105\110\102\112\114\113" +
    "\073\001\002\000\030\013\101\014\111\055\120\063\076" +
    "\065\122\105\124\106\106\107\105\110\102\112\114\113" +
    "\073\001\002\000\030\013\101\014\111\055\120\063\076" +
    "\065\122\105\124\106\106\107\105\110\102\112\114\113" +
    "\073\001\002\000\030\013\101\014\111\055\120\063\076" +
    "\065\122\105\124\106\106\107\105\110\102\112\114\113" +
    "\073\001\002\000\030\013\101\014\111\055\120\063\076" +
    "\065\122\105\124\106\106\107\105\110\102\112\114\113" +
    "\073\001\002\000\030\013\101\014\111\055\120\063\076" +
    "\065\122\105\124\106\106\107\105\110\102\112\114\113" +
    "\073\001\002\000\030\013\101\014\111\055\120\063\076" +
    "\065\122\105\124\106\106\107\105\110\102\112\114\113" +
    "\073\001\002\000\030\013\101\014\111\055\120\063\076" +
    "\065\122\105\124\106\106\107\105\110\102\112\114\113" +
    "\073\001\002\000\030\013\101\014\111\055\120\063\076" +
    "\065\122\105\124\106\106\107\105\110\102\112\114\113" +
    "\073\001\002\000\030\013\101\014\111\055\120\063\076" +
    "\065\122\105\124\106\106\107\105\110\102\112\114\113" +
    "\073\001\002\000\030\013\101\014\111\055\120\063\076" +
    "\065\122\105\124\106\106\107\105\110\102\112\114\113" +
    "\073\001\002\000\030\013\101\014\111\055\120\063\076" +
    "\065\122\105\124\106\106\107\105\110\102\112\114\113" +
    "\073\001\002\000\030\013\101\014\111\055\120\063\076" +
    "\065\122\105\124\106\106\107\105\110\102\112\114\113" +
    "\073\001\002\000\132\003\uff98\006\uff98\007\uff98\010\uff98" +
    "\011\uff98\012\uff98\015\uff98\016\uff98\017\uff98\021\uff98\023" +
    "\uff98\024\uff98\027\uff98\030\uff98\031\uff98\032\uff98\034\uff98" +
    "\035\uff98\043\uff98\044\uff98\045\uff98\046\uff98\047\140\050" +
    "\142\051\137\052\131\053\143\054\127\056\126\057\141" +
    "\060\uff98\061\uff98\062\uff98\064\uff98\065\uff98\066\uff98\067" +
    "\uff98\070\uff98\071\uff98\100\uff98\102\uff98\105\uff98\111\uff98" +
    "\117\uff98\001\002\000\132\003\uff95\006\uff95\007\uff95\010" +
    "\uff95\011\uff95\012\uff95\015\uff95\016\uff95\017\uff95\021\uff95" +
    "\023\uff95\024\uff95\027\uff95\030\uff95\031\uff95\032\uff95\034" +
    "\uff95\035\uff95\043\uff95\044\uff95\045\uff95\046\uff95\047\140" +
    "\050\142\051\137\052\131\053\143\054\127\056\126\057" +
    "\141\060\uff95\061\uff95\062\uff95\064\uff95\065\uff95\066\uff95" +
    "\067\uff95\070\uff95\071\uff95\100\uff95\102\uff95\105\uff95\111" +
    "\uff95\117\uff95\001\002\000\132\003\uffa5\006\uffa5\007\uffa5" +
    "\010\uffa5\011\uffa5\012\uffa5\015\uffa5\016\uffa5\017\uffa5\021" +
    "\uffa5\023\uffa5\024\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5" +
    "\034\uffa5\035\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047" +
    "\140\050\142\051\137\052\131\053\143\054\127\056\126" +
    "\057\141\060\146\061\130\062\145\064\uffa5\065\uffa5\066" +
    "\135\067\136\070\134\071\133\100\uffa5\102\uffa5\105\uffa5" +
    "\111\uffa5\117\uffa5\001\002\000\132\003\uff9c\006\uff9c\007" +
    "\uff9c\010\uff9c\011\uff9c\012\uff9c\015\uff9c\016\uff9c\017\uff9c" +
    "\021\uff9c\023\uff9c\024\uff9c\027\uff9c\030\uff9c\031\uff9c\032" +
    "\uff9c\034\uff9c\035\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c" +
    "\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\056" +
    "\uff9c\057\uff9c\060\uff9c\061\uff9c\062\uff9c\064\uff9c\065\uff9c" +
    "\066\uff9c\067\uff9c\070\uff9c\071\uff9c\100\uff9c\102\uff9c\105" +
    "\uff9c\111\uff9c\117\uff9c\001\002\000\132\003\uff9a\006\uff9a" +
    "\007\uff9a\010\uff9a\011\uff9a\012\uff9a\015\uff9a\016\uff9a\017" +
    "\uff9a\021\uff9a\023\uff9a\024\uff9a\027\uff9a\030\uff9a\031\uff9a" +
    "\032\uff9a\034\uff9a\035\uff9a\043\uff9a\044\uff9a\045\uff9a\046" +
    "\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a" +
    "\056\uff9a\057\uff9a\060\uff9a\061\uff9a\062\uff9a\064\uff9a\065" +
    "\uff9a\066\uff9a\067\uff9a\070\uff9a\071\uff9a\100\uff9a\102\uff9a" +
    "\105\uff9a\111\uff9a\117\uff9a\001\002\000\132\003\uff96\006" +
    "\uff96\007\uff96\010\uff96\011\uff96\012\uff96\015\uff96\016\uff96" +
    "\017\uff96\021\uff96\023\uff96\024\uff96\027\uff96\030\uff96\031" +
    "\uff96\032\uff96\034\uff96\035\uff96\043\uff96\044\uff96\045\uff96" +
    "\046\uff96\047\140\050\142\051\137\052\131\053\143\054" +
    "\127\056\uff96\057\uff96\060\uff96\061\uff96\062\uff96\064\uff96" +
    "\065\uff96\066\uff96\067\uff96\070\uff96\071\uff96\100\uff96\102" +
    "\uff96\105\uff96\111\uff96\117\uff96\001\002\000\132\003\uff9b" +
    "\006\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b\015\uff9b\016" +
    "\uff9b\017\uff9b\021\uff9b\023\uff9b\024\uff9b\027\uff9b\030\uff9b" +
    "\031\uff9b\032\uff9b\034\uff9b\035\uff9b\043\uff9b\044\uff9b\045" +
    "\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b" +
    "\054\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b\062\uff9b\064" +
    "\uff9b\065\uff9b\066\uff9b\067\uff9b\070\uff9b\071\uff9b\100\uff9b" +
    "\102\uff9b\105\uff9b\111\uff9b\117\uff9b\001\002\000\132\003" +
    "\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\015\uff9f" +
    "\016\uff9f\017\uff9f\021\uff9f\023\uff9f\024\uff9f\027\uff9f\030" +
    "\uff9f\031\uff9f\032\uff9f\034\uff9f\035\uff9f\043\uff9f\044\uff9f" +
    "\045\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053" +
    "\uff9f\054\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f" +
    "\064\uff9f\065\uff9f\066\uff9f\067\uff9f\070\uff9f\071\uff9f\100" +
    "\uff9f\102\uff9f\105\uff9f\111\uff9f\117\uff9f\001\002\000\132" +
    "\003\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\015" +
    "\uffa3\016\uffa3\017\uffa3\021\uffa3\023\uffa3\024\uffa3\027\uffa3" +
    "\030\uffa3\031\uffa3\032\uffa3\034\uffa3\035\uffa3\043\uffa3\044" +
    "\uffa3\045\uffa3\046\uffa3\047\140\050\142\051\137\052\131" +
    "\053\143\054\127\056\126\057\141\060\146\061\130\062" +
    "\145\064\uffa3\065\uffa3\066\uffa3\067\uffa3\070\uffa3\071\133" +
    "\100\uffa3\102\uffa3\105\uffa3\111\uffa3\117\uffa3\001\002\000" +
    "\132\003\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4" +
    "\015\uffa4\016\uffa4\017\uffa4\021\uffa4\023\uffa4\024\uffa4\027" +
    "\uffa4\030\uffa4\031\uffa4\032\uffa4\034\uffa4\035\uffa4\043\uffa4" +
    "\044\uffa4\045\uffa4\046\uffa4\047\140\050\142\051\137\052" +
    "\131\053\143\054\127\056\126\057\141\060\146\061\130" +
    "\062\145\064\uffa4\065\uffa4\066\uffa4\067\uffa4\070\uffa4\071" +
    "\133\100\uffa4\102\uffa4\105\uffa4\111\uffa4\117\uffa4\001\002" +
    "\000\132\003\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1\012" +
    "\uffa1\015\uffa1\016\uffa1\017\uffa1\021\uffa1\023\uffa1\024\uffa1" +
    "\027\uffa1\030\uffa1\031\uffa1\032\uffa1\034\uffa1\035\uffa1\043" +
    "\uffa1\044\uffa1\045\uffa1\046\uffa1\047\140\050\142\051\137" +
    "\052\131\053\143\054\127\056\126\057\141\060\146\061" +
    "\130\062\145\064\uffa1\065\uffa1\066\uffa1\067\uffa1\070\uffa1" +
    "\071\133\100\uffa1\102\uffa1\105\uffa1\111\uffa1\117\uffa1\001" +
    "\002\000\132\003\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2" +
    "\012\uffa2\015\uffa2\016\uffa2\017\uffa2\021\uffa2\023\uffa2\024" +
    "\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\034\uffa2\035\uffa2" +
    "\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047\140\050\142\051" +
    "\137\052\131\053\143\054\127\056\126\057\141\060\146" +
    "\061\130\062\145\064\uffa2\065\uffa2\066\uffa2\067\uffa2\070" +
    "\uffa2\071\uffa2\100\uffa2\102\uffa2\105\uffa2\111\uffa2\117\uffa2" +
    "\001\002\000\132\003\uffa6\006\uffa6\007\uffa6\010\uffa6\011" +
    "\uffa6\012\uffa6\015\uffa6\016\uffa6\017\uffa6\021\uffa6\023\uffa6" +
    "\024\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\034\uffa6\035" +
    "\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\140\050\142" +
    "\051\137\052\131\053\143\054\127\056\126\057\141\060" +
    "\146\061\130\062\145\064\uffa6\065\uffa6\066\135\067\136" +
    "\070\134\071\133\100\uffa6\102\uffa6\105\uffa6\111\uffa6\117" +
    "\uffa6\001\002\000\132\003\uff9e\006\uff9e\007\uff9e\010\uff9e" +
    "\011\uff9e\012\uff9e\015\uff9e\016\uff9e\017\uff9e\021\uff9e\023" +
    "\uff9e\024\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\034\uff9e" +
    "\035\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\050" +
    "\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\056\uff9e\057\uff9e" +
    "\060\uff9e\061\uff9e\062\uff9e\064\uff9e\065\uff9e\066\uff9e\067" +
    "\uff9e\070\uff9e\071\uff9e\100\uff9e\102\uff9e\105\uff9e\111\uff9e" +
    "\117\uff9e\001\002\000\132\003\uff97\006\uff97\007\uff97\010" +
    "\uff97\011\uff97\012\uff97\015\uff97\016\uff97\017\uff97\021\uff97" +
    "\023\uff97\024\uff97\027\uff97\030\uff97\031\uff97\032\uff97\034" +
    "\uff97\035\uff97\043\uff97\044\uff97\045\uff97\046\uff97\047\140" +
    "\050\142\051\137\052\131\053\143\054\127\056\126\057" +
    "\141\060\uff97\061\uff97\062\uff97\064\uff97\065\uff97\066\uff97" +
    "\067\uff97\070\uff97\071\uff97\100\uff97\102\uff97\105\uff97\111" +
    "\uff97\117\uff97\001\002\000\132\003\uff9d\006\uff9d\007\uff9d" +
    "\010\uff9d\011\uff9d\012\uff9d\015\uff9d\016\uff9d\017\uff9d\021" +
    "\uff9d\023\uff9d\024\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d" +
    "\034\uff9d\035\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047" +
    "\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d\056\uff9d" +
    "\057\uff9d\060\uff9d\061\uff9d\062\uff9d\064\uff9d\065\uff9d\066" +
    "\uff9d\067\uff9d\070\uff9d\071\uff9d\100\uff9d\102\uff9d\105\uff9d" +
    "\111\uff9d\117\uff9d\001\002\000\132\003\uff99\006\uff99\007" +
    "\uff99\010\uff99\011\uff99\012\uff99\015\uff99\016\uff99\017\uff99" +
    "\021\uff99\023\uff99\024\uff99\027\uff99\030\uff99\031\uff99\032" +
    "\uff99\034\uff99\035\uff99\043\uff99\044\uff99\045\uff99\046\uff99" +
    "\047\140\050\142\051\137\052\131\053\143\054\127\056" +
    "\uff99\057\uff99\060\uff99\061\uff99\062\uff99\064\uff99\065\uff99" +
    "\066\uff99\067\uff99\070\uff99\071\uff99\100\uff99\102\uff99\105" +
    "\uff99\111\uff99\117\uff99\001\002\000\132\003\uff8f\006\uff8f" +
    "\007\uff8f\010\uff8f\011\uff8f\012\uff8f\015\uff8f\016\uff8f\017" +
    "\uff8f\021\uff8f\023\uff8f\024\uff8f\027\uff8f\030\uff8f\031\uff8f" +
    "\032\uff8f\034\uff8f\035\uff8f\043\uff8f\044\uff8f\045\uff8f\046" +
    "\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f\053\uff8f\054\uff8f" +
    "\056\uff8f\057\uff8f\060\uff8f\061\uff8f\062\uff8f\064\uff8f\065" +
    "\uff8f\066\uff8f\067\uff8f\070\uff8f\071\uff8f\100\uff8f\102\uff8f" +
    "\105\uff8f\111\uff8f\117\uff8f\001\002\000\050\047\140\050" +
    "\142\051\137\052\131\053\143\054\127\056\126\057\141" +
    "\060\146\061\130\062\145\064\132\065\144\066\135\067" +
    "\136\070\134\071\133\100\uffd1\102\uffd1\001\002\000\006" +
    "\100\173\102\174\001\002\000\030\013\101\014\111\055" +
    "\120\063\076\065\122\105\124\106\106\107\105\110\102" +
    "\112\114\113\073\001\002\000\006\100\uffd3\111\uffd3\001" +
    "\002\000\050\047\140\050\142\051\137\052\131\053\143" +
    "\054\127\056\126\057\141\060\146\061\130\062\145\064" +
    "\132\065\144\066\135\067\136\070\134\071\133\100\uffd2" +
    "\102\uffd2\001\002\000\050\003\uffdc\016\uffdc\017\uffdc\021" +
    "\uffdc\023\uffdc\024\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc" +
    "\034\uffdc\035\uffdc\043\uffdc\044\uffdc\045\uffdc\100\uffdc\105" +
    "\uffdc\111\uffdc\117\uffdc\001\002\000\046\047\140\050\142" +
    "\051\137\052\131\053\143\054\127\056\126\057\141\060" +
    "\146\061\130\062\145\064\132\065\144\066\135\067\136" +
    "\070\134\071\133\111\200\001\002\000\132\003\uff93\006" +
    "\uff93\007\uff93\010\uff93\011\uff93\012\uff93\015\uff93\016\uff93" +
    "\017\uff93\021\uff93\023\uff93\024\uff93\027\uff93\030\uff93\031" +
    "\uff93\032\uff93\034\uff93\035\uff93\043\uff93\044\uff93\045\uff93" +
    "\046\uff93\047\uff93\050\uff93\051\uff93\052\uff93\053\uff93\054" +
    "\uff93\056\uff93\057\uff93\060\uff93\061\uff93\062\uff93\064\uff93" +
    "\065\uff93\066\uff93\067\uff93\070\uff93\071\uff93\100\uff93\102" +
    "\uff93\105\uff93\111\uff93\117\uff93\001\002\000\064\013\101" +
    "\014\111\017\112\032\056\033\113\034\066\035\052\036" +
    "\115\037\071\040\110\041\072\042\121\043\057\044\040" +
    "\045\043\055\120\063\076\065\122\101\116\105\103\106" +
    "\106\107\105\110\102\112\114\113\073\001\002\000\006" +
    "\100\uffd9\111\uffd9\001\002\000\132\003\uff90\006\uff90\007" +
    "\uff90\010\uff90\011\uff90\012\uff90\015\uff90\016\uff90\017\uff90" +
    "\021\uff90\023\uff90\024\uff90\027\uff90\030\uff90\031\uff90\032" +
    "\uff90\034\uff90\035\uff90\043\uff90\044\uff90\045\uff90\046\uff90" +
    "\047\140\050\142\051\137\052\131\053\143\054\127\056" +
    "\uff90\057\uff90\060\uff90\061\uff90\062\uff90\064\uff90\065\uff90" +
    "\066\uff90\067\uff90\070\uff90\071\uff90\100\uff90\102\uff90\105" +
    "\uff90\111\uff90\117\uff90\001\002\000\004\105\205\001\002" +
    "\000\070\003\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012" +
    "\ufff9\015\ufff9\016\ufff9\017\ufff9\021\ufff9\023\ufff9\024\ufff9" +
    "\027\ufff9\030\ufff9\031\ufff9\032\ufff9\034\ufff9\035\ufff9\043" +
    "\ufff9\044\ufff9\045\ufff9\046\ufff9\100\ufff9\105\ufff9\114\ufff9" +
    "\116\ufff9\117\ufff9\001\002\000\050\003\uffb3\016\uffb3\017" +
    "\uffb3\021\uffb3\023\uffb3\024\uffb3\027\uffb3\030\uffb3\031\uffb3" +
    "\032\uffb3\034\uffb3\035\uffb3\043\uffb3\044\uffb3\045\uffb3\100" +
    "\210\105\uffb3\114\211\117\uffb3\001\002\000\044\003\uffbf" +
    "\016\uffbf\017\uffbf\021\uffbf\023\uffbf\024\uffbf\027\uffbf\030" +
    "\uffbf\031\uffbf\032\uffbf\034\uffbf\035\uffbf\043\uffbf\044\uffbf" +
    "\045\uffbf\105\uffbf\117\uffbf\001\002\000\004\105\213\001" +
    "\002\000\030\013\101\014\111\055\120\063\076\065\122" +
    "\105\124\106\106\107\105\110\102\112\114\113\073\001" +
    "\002\000\124\003\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2" +
    "\012\uffb2\015\uffb2\016\uffb2\017\uffb2\021\uffb2\023\uffb2\024" +
    "\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\034\uffb2\035\uffb2" +
    "\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\140\050\142\051" +
    "\137\052\131\053\143\054\127\056\126\057\141\060\146" +
    "\061\130\062\145\064\132\065\144\066\135\067\136\070" +
    "\134\071\133\105\uffb2\117\uffb2\001\002\000\070\003\ufffa" +
    "\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\015\ufffa\016" +
    "\ufffa\017\ufffa\021\ufffa\023\ufffa\024\ufffa\027\ufffa\030\ufffa" +
    "\031\ufffa\032\ufffa\034\ufffa\035\ufffa\043\ufffa\044\ufffa\045" +
    "\ufffa\046\ufffa\100\ufffa\105\ufffa\114\ufffa\116\ufffa\117\ufffa" +
    "\001\002\000\042\003\055\016\064\017\054\021\044\023" +
    "\215\024\221\027\061\030\063\031\053\032\056\034\066" +
    "\035\052\043\057\044\040\045\043\105\047\001\002\000" +
    "\044\003\uffc1\016\uffc1\017\uffc1\021\uffc1\023\uffc1\024\uffc1" +
    "\027\uffc1\030\uffc1\031\uffc1\032\uffc1\034\uffc1\035\uffc1\043" +
    "\uffc1\044\uffc1\045\uffc1\105\uffc1\117\uffc1\001\002\000\044" +
    "\003\055\016\064\017\054\021\044\023\215\024\221\027" +
    "\061\030\063\031\053\032\056\034\066\035\052\043\057" +
    "\044\040\045\043\105\047\117\223\001\002\000\044\003" +
    "\uffdd\016\uffdd\017\uffdd\021\uffdd\023\uffdd\024\uffdd\027\uffdd" +
    "\030\uffdd\031\uffdd\032\uffdd\034\uffdd\035\uffdd\043\uffdd\044" +
    "\uffdd\045\uffdd\105\uffdd\117\uffdd\001\002\000\044\003\uffc2" +
    "\016\uffc2\017\uffc2\021\uffc2\023\uffc2\024\uffc2\027\uffc2\030" +
    "\uffc2\031\uffc2\032\uffc2\034\uffc2\035\uffc2\043\uffc2\044\uffc2" +
    "\045\uffc2\105\uffc2\117\uffc2\001\002\000\044\003\uffc0\016" +
    "\uffc0\017\uffc0\021\uffc0\023\uffc0\024\uffc0\027\uffc0\030\uffc0" +
    "\031\uffc0\032\uffc0\034\uffc0\035\uffc0\043\uffc0\044\uffc0\045" +
    "\uffc0\105\uffc0\117\uffc0\001\002\000\044\003\uffde\016\uffde" +
    "\017\uffde\021\uffde\023\uffde\024\uffde\027\uffde\030\uffde\031" +
    "\uffde\032\uffde\034\uffde\035\uffde\043\uffde\044\uffde\045\uffde" +
    "\105\uffde\117\uffde\001\002\000\004\027\224\001\002\000" +
    "\004\110\225\001\002\000\030\013\101\014\111\055\120" +
    "\063\076\065\122\105\124\106\106\107\105\110\102\112" +
    "\114\113\073\001\002\000\046\047\140\050\142\051\137" +
    "\052\131\053\143\054\127\056\126\057\141\060\146\061" +
    "\130\062\145\064\132\065\144\066\135\067\136\070\134" +
    "\071\133\111\227\001\002\000\044\003\uff89\016\uff89\017" +
    "\uff89\021\uff89\023\uff89\024\uff89\027\uff89\030\uff89\031\uff89" +
    "\032\uff89\034\uff89\035\uff89\043\uff89\044\uff89\045\uff89\105" +
    "\uff89\117\uff89\001\002\000\030\013\101\014\111\055\120" +
    "\063\076\065\122\105\124\106\106\107\105\110\102\112" +
    "\114\113\073\001\002\000\046\047\140\050\142\051\137" +
    "\052\131\053\143\054\127\056\126\057\141\060\146\061" +
    "\130\062\145\064\132\065\144\066\135\067\136\070\134" +
    "\071\133\111\232\001\002\000\004\116\233\001\002\000" +
    "\042\003\055\016\064\017\054\021\044\023\215\024\221" +
    "\027\061\030\063\031\053\032\056\034\066\035\052\043" +
    "\057\044\040\045\043\105\047\001\002\000\044\003\055" +
    "\016\064\017\054\021\044\023\215\024\221\027\061\030" +
    "\063\031\053\032\056\034\066\035\052\043\057\044\040" +
    "\045\043\105\047\117\235\001\002\000\044\003\uff88\016" +
    "\uff88\017\uff88\021\uff88\023\uff88\024\uff88\027\uff88\030\uff88" +
    "\031\uff88\032\uff88\034\uff88\035\uff88\043\uff88\044\uff88\045" +
    "\uff88\105\uff88\117\uff88\001\002\000\030\013\101\014\111" +
    "\055\120\063\076\065\122\105\124\106\106\107\105\110" +
    "\102\112\114\113\073\001\002\000\046\047\140\050\142" +
    "\051\137\052\131\053\143\054\127\056\126\057\141\060" +
    "\146\061\130\062\145\064\132\065\144\066\135\067\136" +
    "\070\134\071\133\111\240\001\002\000\004\116\241\001" +
    "\002\000\042\003\055\016\064\017\054\021\044\023\215" +
    "\024\221\027\061\030\063\031\053\032\056\034\066\035" +
    "\052\043\057\044\040\045\043\105\047\001\002\000\044" +
    "\003\055\016\064\017\054\021\044\023\215\024\221\027" +
    "\061\030\063\031\053\032\056\034\066\035\052\043\057" +
    "\044\040\045\043\105\047\117\243\001\002\000\046\003" +
    "\uff8e\016\uff8e\017\uff8e\020\244\021\uff8e\023\uff8e\024\uff8e" +
    "\027\uff8e\030\uff8e\031\uff8e\032\uff8e\034\uff8e\035\uff8e\043" +
    "\uff8e\044\uff8e\045\uff8e\105\uff8e\117\uff8e\001\002\000\006" +
    "\017\054\116\246\001\002\000\044\003\uff8c\016\uff8c\017" +
    "\uff8c\021\uff8c\023\uff8c\024\uff8c\027\uff8c\030\uff8c\031\uff8c" +
    "\032\uff8c\034\uff8c\035\uff8c\043\uff8c\044\uff8c\045\uff8c\105" +
    "\uff8c\117\uff8c\001\002\000\042\003\055\016\064\017\054" +
    "\021\044\023\215\024\221\027\061\030\063\031\053\032" +
    "\056\034\066\035\052\043\057\044\040\045\043\105\047" +
    "\001\002\000\044\003\055\016\064\017\054\021\044\023" +
    "\215\024\221\027\061\030\063\031\053\032\056\034\066" +
    "\035\052\043\057\044\040\045\043\105\047\117\250\001" +
    "\002\000\044\003\uff8d\016\uff8d\017\uff8d\021\uff8d\023\uff8d" +
    "\024\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d\034\uff8d\035" +
    "\uff8d\043\uff8d\044\uff8d\045\uff8d\105\uff8d\117\uff8d\001\002" +
    "\000\106\003\uffe5\016\uffe5\017\uffe5\021\uffe5\023\uffe5\024" +
    "\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\034\uffe5\035\uffe5" +
    "\043\uffe5\044\uffe5\045\uffe5\047\140\050\142\051\137\052" +
    "\131\053\143\054\127\056\126\057\141\060\146\061\130" +
    "\062\145\064\132\065\144\066\135\067\136\070\134\071" +
    "\133\105\uffe5\117\uffe5\001\002\000\004\114\255\001\002" +
    "\000\030\013\101\014\111\055\120\063\076\065\122\105" +
    "\124\106\106\107\105\110\102\112\114\113\073\001\002" +
    "\000\106\003\uff8b\016\uff8b\017\uff8b\021\uff8b\023\uff8b\024" +
    "\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b\034\uff8b\035\uff8b" +
    "\043\uff8b\044\uff8b\045\uff8b\047\140\050\142\051\137\052" +
    "\131\053\143\054\127\056\126\057\141\060\146\061\130" +
    "\062\145\064\132\065\144\066\135\067\136\070\134\071" +
    "\133\105\uff8b\117\uff8b\001\002\000\030\013\101\014\111" +
    "\055\120\063\076\065\122\105\124\106\106\107\105\110" +
    "\102\112\114\113\073\001\002\000\106\003\uff8a\016\uff8a" +
    "\017\uff8a\021\uff8a\023\uff8a\024\uff8a\027\uff8a\030\uff8a\031" +
    "\uff8a\032\uff8a\034\uff8a\035\uff8a\043\uff8a\044\uff8a\045\uff8a" +
    "\047\140\050\142\051\137\052\131\053\143\054\127\056" +
    "\126\057\141\060\146\061\130\062\145\064\132\065\144" +
    "\066\135\067\136\070\134\071\133\105\uff8a\117\uff8a\001" +
    "\002\000\004\105\260\001\002\000\004\111\261\001\002" +
    "\000\004\116\262\001\002\000\006\022\267\025\263\001" +
    "\002\000\004\116\301\001\002\000\004\117\300\001\002" +
    "\000\010\022\267\025\263\117\275\001\002\000\010\022" +
    "\uff83\025\uff83\117\uff83\001\002\000\016\013\101\014\111" +
    "\106\106\107\105\112\114\113\073\001\002\000\004\116" +
    "\271\001\002\000\042\003\055\016\064\017\054\021\044" +
    "\023\215\024\221\027\061\030\063\031\053\032\056\034" +
    "\066\035\052\043\057\044\040\045\043\105\047\001\002" +
    "\000\044\003\055\016\064\017\054\021\044\023\215\024" +
    "\221\027\061\030\063\031\053\032\056\034\066\035\052" +
    "\043\057\044\040\045\043\105\047\117\273\001\002\000" +
    "\010\022\uff82\025\uff82\117\uff82\001\002\000\004\117\277" +
    "\001\002\000\044\003\uff87\016\uff87\017\uff87\021\uff87\023" +
    "\uff87\024\uff87\027\uff87\030\uff87\031\uff87\032\uff87\034\uff87" +
    "\035\uff87\043\uff87\044\uff87\045\uff87\105\uff87\117\uff87\001" +
    "\002\000\010\022\uff84\025\uff84\117\uff84\001\002\000\044" +
    "\003\uff86\016\uff86\017\uff86\021\uff86\023\uff86\024\uff86\027" +
    "\uff86\030\uff86\031\uff86\032\uff86\034\uff86\035\uff86\043\uff86" +
    "\044\uff86\045\uff86\105\uff86\117\uff86\001\002\000\044\003" +
    "\uff85\016\uff85\017\uff85\021\uff85\023\uff85\024\uff85\027\uff85" +
    "\030\uff85\031\uff85\032\uff85\034\uff85\035\uff85\043\uff85\044" +
    "\uff85\045\uff85\105\uff85\117\uff85\001\002\000\042\003\055" +
    "\016\064\017\054\021\044\023\215\024\221\027\061\030" +
    "\063\031\053\032\056\034\066\035\052\043\057\044\040" +
    "\045\043\105\047\001\002\000\044\003\055\016\064\017" +
    "\054\021\044\023\215\024\221\027\061\030\063\031\053" +
    "\032\056\034\066\035\052\043\057\044\040\045\043\105" +
    "\047\117\303\001\002\000\004\117\uff81\001\002\000\040" +
    "\003\uffe9\016\uffe9\017\uffe9\021\uffe9\027\uffe9\030\uffe9\031" +
    "\uffe9\032\uffe9\034\uffe9\035\uffe9\043\uffe9\044\uffe9\045\uffe9" +
    "\105\uffe9\117\uffe9\001\002\000\026\006\uffef\007\uffef\010" +
    "\uffef\011\uffef\012\uffef\015\uffef\016\uffef\046\uffef\105\uffef" +
    "\117\uffef\001\002\000\014\006\021\007\017\010\020\011" +
    "\032\012\016\001\002\000\004\110\334\001\002\000\004" +
    "\105\317\001\002\000\004\110\312\001\002\000\004\111" +
    "\313\001\002\000\004\116\314\001\002\000\036\003\055" +
    "\016\064\017\054\021\044\027\061\030\063\031\053\032" +
    "\056\034\066\035\052\043\057\044\040\045\043\105\047" +
    "\001\002\000\040\003\055\016\064\017\054\021\044\027" +
    "\061\030\063\031\053\032\056\034\066\035\052\043\057" +
    "\044\040\045\043\105\047\117\316\001\002\000\026\006" +
    "\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\015\ufff0\016\ufff0" +
    "\046\ufff0\105\ufff0\117\ufff0\001\002\000\004\110\320\001" +
    "\002\000\016\006\021\007\017\010\020\011\032\012\016" +
    "\111\uffee\001\002\000\004\111\330\001\002\000\006\100" +
    "\uffeb\111\uffeb\001\002\000\004\105\327\001\002\000\006" +
    "\100\325\111\uffed\001\002\000\014\006\021\007\017\010" +
    "\020\011\032\012\016\001\002\000\006\100\uffec\111\uffec" +
    "\001\002\000\006\100\uffea\111\uffea\001\002\000\004\116" +
    "\331\001\002\000\036\003\055\016\064\017\054\021\044" +
    "\027\061\030\063\031\053\032\056\034\066\035\052\043" +
    "\057\044\040\045\043\105\047\001\002\000\040\003\055" +
    "\016\064\017\054\021\044\027\061\030\063\031\053\032" +
    "\056\034\066\035\052\043\057\044\040\045\043\105\047" +
    "\117\333\001\002\000\026\006\ufff4\007\ufff4\010\ufff4\011" +
    "\ufff4\012\ufff4\015\ufff4\016\ufff4\046\ufff4\105\ufff4\117\ufff4" +
    "\001\002\000\016\006\021\007\017\010\020\011\032\012" +
    "\016\111\uffee\001\002\000\004\111\336\001\002\000\004" +
    "\116\337\001\002\000\036\003\055\016\064\017\054\021" +
    "\044\027\061\030\063\031\053\032\056\034\066\035\052" +
    "\043\057\044\040\045\043\105\047\001\002\000\040\003" +
    "\055\016\064\017\054\021\044\027\061\030\063\031\053" +
    "\032\056\034\066\035\052\043\057\044\040\045\043\105" +
    "\047\117\341\001\002\000\026\006\ufff1\007\ufff1\010\ufff1" +
    "\011\ufff1\012\ufff1\015\ufff1\016\ufff1\046\ufff1\105\ufff1\117" +
    "\ufff1\001\002\000\006\104\344\105\205\001\002\000\032" +
    "\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\015\uffb3\016" +
    "\uffb3\046\uffb3\100\210\105\uffb3\114\211\117\uffb3\001\002" +
    "\000\004\105\205\001\002\000\004\100\210\001\002\000" +
    "\030\006\uffba\007\uffba\010\uffba\011\uffba\012\uffba\015\uffba" +
    "\016\uffba\046\uffba\105\uffba\114\350\117\uffba\001\002\000" +
    "\026\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\015\uffbc" +
    "\016\uffbc\046\uffbc\105\uffbc\117\uffbc\001\002\000\004\101" +
    "\351\001\002\000\032\013\101\014\111\055\120\063\076" +
    "\065\122\101\353\105\124\106\106\107\105\110\102\112" +
    "\114\113\073\001\002\000\006\100\uffb5\102\uffb5\001\002" +
    "\000\032\013\101\014\111\055\120\063\076\065\122\101" +
    "\353\105\124\106\106\107\105\110\102\112\114\113\073" +
    "\001\002\000\050\047\140\050\142\051\137\052\131\053" +
    "\143\054\127\056\126\057\141\060\146\061\130\062\145" +
    "\064\132\065\144\066\135\067\136\070\134\071\133\100" +
    "\uffb4\102\uffb4\001\002\000\006\100\357\102\360\001\002" +
    "\000\006\100\uffb6\102\uffb6\001\002\000\032\013\101\014" +
    "\111\055\120\063\076\065\122\101\353\105\124\106\106" +
    "\107\105\110\102\112\114\113\073\001\002\000\026\006" +
    "\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\015\uffb9\016\uffb9" +
    "\046\uffb9\105\uffb9\117\uffb9\001\002\000\006\100\uffb7\102" +
    "\uffb7\001\002\000\006\100\357\102\363\001\002\000\006" +
    "\100\uffb8\102\uffb8\001\002\000\026\006\uffbe\007\uffbe\010" +
    "\uffbe\011\uffbe\012\uffbe\015\uffbe\016\uffbe\046\uffbe\105\uffbe" +
    "\117\uffbe\001\002\000\004\110\366\001\002\000\016\006" +
    "\021\007\017\010\020\011\032\012\016\111\uffee\001\002" +
    "\000\004\111\370\001\002\000\004\116\371\001\002\000" +
    "\036\003\055\016\064\017\054\021\044\027\061\030\063" +
    "\031\053\032\056\034\066\035\052\043\057\044\040\045" +
    "\043\105\047\001\002\000\040\003\055\016\064\017\054" +
    "\021\044\027\061\030\063\031\053\032\056\034\066\035" +
    "\052\043\057\044\040\045\043\105\047\117\373\001\002" +
    "\000\026\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\015" +
    "\ufff3\016\ufff3\046\ufff3\105\ufff3\117\ufff3\001\002\000\016" +
    "\006\021\007\017\010\020\011\032\012\016\111\uffee\001" +
    "\002\000\004\111\376\001\002\000\004\116\377\001\002" +
    "\000\036\003\055\016\064\017\054\021\044\027\061\030" +
    "\063\031\053\032\056\034\066\035\052\043\057\044\040" +
    "\045\043\105\047\001\002\000\040\003\055\016\064\017" +
    "\054\021\044\027\061\030\063\031\053\032\056\034\066" +
    "\035\052\043\057\044\040\045\043\105\047\117\u0101\001" +
    "\002\000\026\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2" +
    "\015\ufff2\016\ufff2\046\ufff2\105\ufff2\117\ufff2\001\002\000" +
    "\006\002\ufffd\004\ufffd\001\002\000\026\006\ufff8\007\ufff8" +
    "\010\ufff8\011\ufff8\012\ufff8\015\ufff8\016\ufff8\046\ufff8\105" +
    "\ufff8\117\ufff8\001\002\000\006\104\u0106\105\205\001\002" +
    "\000\032\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\015" +
    "\uffb3\016\uffb3\046\uffb3\100\210\105\uffb3\114\211\117\uffb3" +
    "\001\002\000\004\105\205\001\002\000\004\100\210\001" +
    "\002\000\030\006\uffba\007\uffba\010\uffba\011\uffba\012\uffba" +
    "\015\uffba\016\uffba\046\uffba\105\uffba\114\350\117\uffba\001" +
    "\002\000\026\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb" +
    "\015\uffbb\016\uffbb\046\uffbb\105\uffbb\117\uffbb\001\002\000" +
    "\026\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\015\uffbd" +
    "\016\uffbd\046\uffbd\105\uffbd\117\uffbd\001\002\000\006\100" +
    "\210\116\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0109\000\010\002\006\015\005\016\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\013\001\001\000\004\037\u010a\001\001\000\002" +
    "\001\001\000\014\003\021\005\023\020\030\021\026\041" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\u0103\001\001\000\012\003\u0102\020\030\021\026\041\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\041\307\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\017\050\025\041\034\036\042\064\047\061" +
    "\063\040\064\044\066\047\067\057\070\045\001\001\000" +
    "\024\017\050\025\303\042\064\047\061\063\040\064\044" +
    "\066\047\067\057\070\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\251\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\022\250\036\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\041\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\022\074\036\076\042\064\043" +
    "\073\044\116\050\077\051\106\052\067\066\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\202\036\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\022\176\036\076\001\001" +
    "\000\004\027\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\022\170\032\171" +
    "\036\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\022\122\036\076\001\001\000\002" +
    "\001\001\000\004\027\124\001\001\000\002\001\001\000" +
    "\006\022\166\036\076\001\001\000\006\022\165\036\076" +
    "\001\001\000\006\022\164\036\076\001\001\000\006\022" +
    "\163\036\076\001\001\000\006\022\162\036\076\001\001" +
    "\000\006\022\161\036\076\001\001\000\006\022\160\036" +
    "\076\001\001\000\006\022\157\036\076\001\001\000\006" +
    "\022\156\036\076\001\001\000\006\022\155\036\076\001" +
    "\001\000\006\022\154\036\076\001\001\000\006\022\153" +
    "\036\076\001\001\000\006\022\152\036\076\001\001\000" +
    "\006\022\151\036\076\001\001\000\006\022\150\036\076" +
    "\001\001\000\006\022\147\036\076\001\001\000\006\022" +
    "\146\036\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\022\174\036\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\022\074" +
    "\036\076\042\064\043\073\044\116\052\201\066\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\205" +
    "\001\001\000\002\001\001\000\004\023\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\022\211\036\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\017" +
    "\050\025\217\026\216\035\215\042\064\047\061\063\040" +
    "\064\044\066\047\067\057\070\045\001\001\000\002\001" +
    "\001\000\026\017\050\025\217\026\221\042\064\047\061" +
    "\063\040\064\044\066\047\067\057\070\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\022" +
    "\225\036\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\022\230\036\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\017\050\025\217\026\216\035\233" +
    "\042\064\047\061\063\040\064\044\066\047\067\057\070" +
    "\045\001\001\000\026\017\050\025\217\026\221\042\064" +
    "\047\061\063\040\064\044\066\047\067\057\070\045\001" +
    "\001\000\002\001\001\000\006\022\236\036\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\017\050\025" +
    "\217\026\216\035\241\042\064\047\061\063\040\064\044" +
    "\066\047\067\057\070\045\001\001\000\026\017\050\025" +
    "\217\026\221\042\064\047\061\063\040\064\044\066\047" +
    "\067\057\070\045\001\001\000\002\001\001\000\004\047" +
    "\244\001\001\000\002\001\001\000\030\017\050\025\217" +
    "\026\216\035\246\042\064\047\061\063\040\064\044\066" +
    "\047\067\057\070\045\001\001\000\026\017\050\025\217" +
    "\026\221\042\064\047\061\063\040\064\044\066\047\067" +
    "\057\070\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\022\253\036\076\001\001\000" +
    "\002\001\001\000\006\022\255\036\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\033\263\045\264\046\265\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\033\273\046\275\001" +
    "\001\000\002\001\001\000\004\036\267\001\001\000\002" +
    "\001\001\000\030\017\050\025\217\026\216\035\271\042" +
    "\064\047\061\063\040\064\044\066\047\067\057\070\045" +
    "\001\001\000\026\017\050\025\217\026\221\042\064\047" +
    "\061\063\040\064\044\066\047\067\057\070\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\017\050\025\217\026\216\035\301\042\064\047\061\063" +
    "\040\064\044\066\047\067\057\070\045\001\001\000\026" +
    "\017\050\025\217\026\221\042\064\047\061\063\040\064" +
    "\044\066\047\067\057\070\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\341\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\017\050\025" +
    "\041\034\314\042\064\047\061\063\040\064\044\066\047" +
    "\067\057\070\045\001\001\000\024\017\050\025\303\042" +
    "\064\047\061\063\040\064\044\066\047\067\057\070\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\041" +
    "\322\055\321\056\323\057\320\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\041\322\055\325\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\017\050\025\041\034" +
    "\331\042\064\047\061\063\040\064\044\066\047\067\057" +
    "\070\045\001\001\000\024\017\050\025\303\042\064\047" +
    "\061\063\040\064\044\066\047\067\057\070\045\001\001" +
    "\000\002\001\001\000\012\041\322\055\321\056\323\057" +
    "\334\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\017\050\025\041\034\337\042\064\047\061\063\040\064" +
    "\044\066\047\067\057\070\045\001\001\000\024\017\050" +
    "\025\303\042\064\047\061\063\040\064\044\066\047\067" +
    "\057\070\045\001\001\000\002\001\001\000\004\037\342" +
    "\001\001\000\004\023\363\001\001\000\004\037\344\001" +
    "\001\000\004\027\345\001\001\000\004\073\346\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\022\353\036" +
    "\076\071\354\072\351\074\355\001\001\000\002\001\001" +
    "\000\014\022\353\036\076\071\361\072\351\074\355\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\022\353\036\076\072\351\074\360\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\041" +
    "\322\055\321\056\323\057\366\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\017\050\025\041\034\371\042" +
    "\064\047\061\063\040\064\044\066\047\067\057\070\045" +
    "\001\001\000\024\017\050\025\303\042\064\047\061\063" +
    "\040\064\044\066\047\067\057\070\045\001\001\000\002" +
    "\001\001\000\012\041\322\055\321\056\323\057\374\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\017\050" +
    "\025\041\034\377\042\064\047\061\063\040\064\044\066" +
    "\047\067\057\070\045\001\001\000\024\017\050\025\303" +
    "\042\064\047\061\063\040\064\044\066\047\067\057\070" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\u0104\001\001\000\004\023\u0109\001" +
    "\001\000\004\037\u0106\001\001\000\004\027\u0107\001\001" +
    "\000\004\073\u0108\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public Expresion sumando;

    public List<Expresion> lista_expresiones;
    public List<Errores> errores = new LinkedList<Errores>();
    public Programa programa = new Programa();
    public List<Metodo> lista_metodos = new LinkedList<>();
    public List<Declaracion> lista_declaraciones = new LinkedList<>();

    public void syntax_error(Symbol cur_token) {
        System.out.println(" Se esperaban: ");
        String esperados = "";
        for (int i = 0; i < expected_token_ids().size(); i++){
            esperados += symbl_name_from_id(expected_token_ids().get(i))+"-";
        }
        System.out.print(esperados+", pero se encontro "+cur_token.value+" en la linea"+cur_token.right+" y en la columna"+cur_token.left);
        errores.add(new Errores(cur_token.right,cur_token.left,"SINTACTICO","Se esperaba "+esperados+" y se encontro "+symbl_name_from_id(cur_token.sym)));
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal "+message+info);
    }
    
    public void report_fatal_error(Symbol cur) {
        System.out.println("unrecovered_syntax_error");
    }

    public void imp(String texto){
        System.out.println(texto);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= pistas 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Pista> e1 = (List<Pista>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            programa = new Programa(e1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // pistas ::= pistas pista 
            {
              List<Pista> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Pista> e1 = (List<Pista>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pista e2 = (Pista)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
            RESULT.add(e2);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pistas",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // pistas ::= pista 
            {
              List<Pista> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pista e1 = (Pista)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new LinkedList<>();
            RESULT.add(e1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pistas",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // pista ::= PISTA ID extiende INDENT lista_declaracion DEDENT 
            {
              Pista RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<String> e3 = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            RESULT = new Pista(lista_metodos,lista_declaraciones,e3,e2.toString());
            lista_metodos = new LinkedList<>();
            lista_declaraciones = new LinkedList<>();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pista",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // extiende ::= 
            {
              List<String> RESULT =null;
		
            RESULT = null;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extiende",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // extiende ::= EXT ids 
            {
              List<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<String> e1 = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extiende",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ids ::= ids COMA ID 
            {
              List<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<String> e1 = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            e1.add(e2.toString()); 
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ids ::= ID 
            {
              List<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new LinkedList<>();
            RESULT.add(e1.toString()); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lista_declaracion ::= lista_declaracion declaraciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lista_declaracion ::= declaraciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaraciones ::= declaracion_global 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaracion e1 = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            lista_declaraciones.add(e1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaraciones ::= metodo 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Metodo e1 = (Metodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            lista_metodos.add(e1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // metodo ::= KEEP tipo ID PAR_A param PAR_C INDENT instrucciones DEDENT 
            {
              Metodo RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Parametro> e3 = (List<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e4 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Metodo(e1.toString(),e2,e3,e4,true,true,false);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // metodo ::= tipo ID PAR_A param PAR_C INDENT instrucciones DEDENT 
            {
              Metodo RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Parametro> e3 = (List<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e4 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Metodo(e1.toString(),e2,e3,e4,true,false,false);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // metodo ::= ID PAR_A param PAR_C INDENT instrucciones DEDENT 
            {
              Metodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Parametro> e2 = (List<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e3 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Metodo(e1.toString(),"void",e2,e3,false,false,false);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // metodo ::= KEEP ID PAR_A param PAR_C INDENT instrucciones DEDENT 
            {
              Metodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Parametro> e2 = (List<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e3 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Metodo(e1.toString(),"void",e2,e3,false,true,false);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // metodo ::= KEEP PRINCIPAL PAR_A PAR_C INDENT instrucciones DEDENT 
            {
              Metodo RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e4 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Metodo("Principal","void",null,e4,false,true,true);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // metodo ::= PRINCIPAL PAR_A PAR_C INDENT instrucciones DEDENT 
            {
              Metodo RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e4 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Metodo("Principal","void",null,e4,false,false,true);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // param ::= 
            {
              List<Parametro> RESULT =null;
		
            RESULT = new LinkedList<>();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // param ::= parametros 
            {
              List<Parametro> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Parametro> e1 = (List<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parametros ::= parametros COMA parametro 
            {
              List<Parametro> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Parametro> e1 = (List<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parametro e2 = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
            RESULT.add(e2);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parametros ::= parametro 
            {
              List<Parametro> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parametro e1 = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new LinkedList<>();
            RESULT.add(e1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parametro ::= tipo ID 
            {
              Parametro RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Parametro(e1.toString(),e2.toString());
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instrucciones ::= instrucciones instruccion 
            {
              List<Instruccion> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e1 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
            RESULT.add(e2);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instrucciones ::= instruccion 
            {
              List<Instruccion> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new LinkedList<>();
            RESULT.add(e1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= declaracion 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaracion e1 = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion ::= asignacion 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Asignacion e1 = (Asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion ::= RETORNA expresion 
            {
              Instruccion RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Retorno(e1,e2right,e2left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccion ::= si 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Si e1 = (Si)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruccion ::= hacer 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Hacer e1 = (Hacer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruccion ::= mientras 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Mientras e1 = (Mientras)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instruccion ::= llamada 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Llamada e1 = (Llamada)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instruccion ::= switch 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Switch e1 = (Switch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instruccion ::= error 
            {
              Instruccion RESULT =null;
		
            RESULT = null;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // inst ::= inst instruc 
            {
              List<Instruccion> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e1 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = e1;
        RESULT.add(e2);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // inst ::= instruc 
            {
              List<Instruccion> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new LinkedList<>();
        RESULT.add(e1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // llamada ::= id_llamada PAR_A param_enviar PAR_C 
            {
              Llamada RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // param_enviar ::= 
            {
              List<ParametroEnviar> RESULT =null;
		
        RESULT = null;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_enviar",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // param_enviar ::= parametros_enviar 
            {
              List<ParametroEnviar> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<ParametroEnviar> e1 = (List<ParametroEnviar>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = e1;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_enviar",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametros_enviar ::= parametros_enviar COMA parametro_enviar 
            {
              List<ParametroEnviar> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<ParametroEnviar> e1 = (List<ParametroEnviar>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParametroEnviar e2 = (ParametroEnviar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
            RESULT.add(e2);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_enviar",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametros_enviar ::= parametro_enviar 
            {
              List<ParametroEnviar> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParametroEnviar e1 = (ParametroEnviar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new LinkedList<>();
            RESULT.add(e1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_enviar",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parametro_enviar ::= expresion 
            {
              ParametroEnviar RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new ParametroEnviar(ParametroEnviar.Tipo.EXPRESION,null,null,null);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_enviar",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parametro_enviar ::= llamada 
            {
              ParametroEnviar RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Llamada e1 = (Llamada)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new ParametroEnviar(ParametroEnviar.Tipo.LLAMADA,null,e1,null);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_enviar",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametro_enviar ::= notas 
            {
              ParametroEnviar RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new ParametroEnviar(ParametroEnviar.Tipo.NOTA,null,null,e1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_enviar",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametro_enviar ::= orden 
            {
              ParametroEnviar RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new ParametroEnviar(ParametroEnviar.Tipo.ORDEN,null,null,e1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_enviar",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametro_enviar ::= LLAVE_A expresiones LLAVE_C 
            {
              ParametroEnviar RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Expresion> e1 = (List<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new ParametroEnviar(ParametroEnviar.Tipo.ARREGLO,e1,null,null);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_enviar",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresiones ::= expresiones COMA expresion 
            {
              List<Expresion> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Expresion> e1 = (List<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
            RESULT.add(e2);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresiones ::= expresion 
            {
              List<Expresion> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new LinkedList<>();
            RESULT.add(e1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // notas ::= NOTAS 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1.toString();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("notas",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // notas ::= SI 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1.toString();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("notas",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // orden ::= ASC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1.toString();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("orden",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // orden ::= DESC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1.toString();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("orden",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // orden ::= PAR 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1.toString();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("orden",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // orden ::= IMPAR 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1.toString();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("orden",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // orden ::= PRIMOS 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1.toString();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("orden",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // id_llamada ::= ID 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1.toString();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_llamada",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // id_llamada ::= MSG 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1.toString();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_llamada",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // id_llamada ::= ORDENAR 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1.toString();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_llamada",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // id_llamada ::= SUMARIZAR 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1.toString();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_llamada",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // id_llamada ::= LONG 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1.toString();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_llamada",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // id_llamada ::= REPRODUCIR 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1.toString();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_llamada",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // id_llamada ::= ESPERAR 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1.toString();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_llamada",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // instruc ::= instruccion 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = e1;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruc",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // instruc ::= SALIR 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new ContinuarSalir(false,"salir",e1right,e1left);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruc",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // instruc ::= CONT 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new ContinuarSalir(true,"continuar",e1right,e1left);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruc",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // declaracion ::= VAR tipo ids asignar 
            {
              Declaracion RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<String> e2 = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e3 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Declaracion(e2, e1, null, e3, null, false, false, e4right, e4left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // declaracion_global ::= KEEP VAR tipo ids asignar 
            {
              Declaracion RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<String> e2 = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e3 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Declaracion(e2, e1, null, e3, null, false, true, e4right, e4left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_global",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // declaracion_global ::= VAR tipo ids asignar 
            {
              Declaracion RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<String> e2 = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e3 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Declaracion(e2, e1, null, e3, null, false, false, e4right, e4left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_global",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // declaracion_global ::= KEEP VAR tipo ARREGLO ids dimensiones asignar_arreglo 
            {
              Declaracion RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<String> e2 = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Expresion> e3 = (List<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Item> e5 = (List<Item>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Declaracion(e2, e1, e3, null, e5, true, true, e4right, e4left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_global",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // declaracion_global ::= VAR tipo ARREGLO ids dimensiones asignar_arreglo 
            {
              Declaracion RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<String> e2 = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Expresion> e3 = (List<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Item> e5 = (List<Item>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Declaracion(e2, e1, e3, null, e5, true, false, e4right, e4left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_global",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // asignar_arreglo ::= 
            {
              List<Item> RESULT =null;
		
            RESULT = null;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar_arreglo",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // asignar_arreglo ::= ASIGNAR LLAVE_A items LLAVE_C 
            {
              List<Item> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Item> e1 = (List<Item>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar_arreglo",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // arreglo ::= LLAVE_A items LLAVE_C 
            {
              List<Item> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Item> e1 = (List<Item>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // items ::= items COMA item 
            {
              List<Item> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Item> e1 = (List<Item>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Item e2 = (Item)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
            RESULT.add(e2);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // items ::= item 
            {
              List<Item> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Item e1 = (Item)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new LinkedList<>();
            RESULT.add(e1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // item ::= arreglo 
            {
              Item RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Item> e1 = (List<Item>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Item(e1,false,null);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("item",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // item ::= expresion 
            {
              Item RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Item(null,true,e1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("item",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // asignar ::= 
            {
              Expresion RESULT =null;
		
            RESULT = null;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // asignar ::= ASIGNAR expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = e1; 
            sumando = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // tipo ::= ENTERO 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = "numero";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // tipo ::= DECIMAL 
            {
              String RESULT =null;
		
            RESULT = "decimal";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // tipo ::= CADENA 
            {
              String RESULT =null;
		
            RESULT = "string";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // tipo ::= BOOLEAN 
            {
              String RESULT =null;
		
            RESULT = "boolean";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // tipo ::= CHAR 
            {
              String RESULT =null;
		
            RESULT = "caracter";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // valor_puntual ::= NUMERO 
            {
              Primitivo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Primitivo("numero",(java_cup.runtime.Symbol) CUP$parser$stack.peek(),Integer.parseInt(e1.toString())); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_puntual",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // valor_puntual ::= STRING 
            {
              Primitivo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Primitivo("string",(java_cup.runtime.Symbol) CUP$parser$stack.peek(),e1.toString()); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_puntual",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // valor_puntual ::= CARACTER 
            {
              Primitivo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Primitivo("caracter",(java_cup.runtime.Symbol) CUP$parser$stack.peek(),e1.toString().charAt(0)); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_puntual",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // valor_puntual ::= TRUE 
            {
              Primitivo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Primitivo("boolean",(java_cup.runtime.Symbol) CUP$parser$stack.peek(),true);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_puntual",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // valor_puntual ::= FALSE 
            {
              Primitivo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Primitivo("boolean",(java_cup.runtime.Symbol) CUP$parser$stack.peek(),false);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_puntual",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // valor_puntual ::= NUMERO_D 
            {
              Primitivo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Primitivo("decimal",(java_cup.runtime.Symbol) CUP$parser$stack.peek(),Double.parseDouble(e1.toString())); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_puntual",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion ::= expresion SUMA expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.SUMA);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion ::= expresion RESTA expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            imp("Encuentra menos"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.RESTA);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion ::= expresion POR expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra por");
            RESULT = new Expresion(e1,e2,Expresion.Operacion.POR);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion ::= expresion ENTRE expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra division"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.ENTRE);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion ::= expresion POT expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra potencia"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.POT);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion ::= expresion MOD expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra modulo"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.MOD);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresion ::= RESTA expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra negativo"); 
            RESULT = new Expresion(e1,Expresion.Operacion.NEGATIVO);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresion ::= expresion MAYOR expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra mayor"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.MAYOR);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresion ::= expresion MENOR expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra menor"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.MENOR);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresion ::= expresion MENOR_I expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra menor igual"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.MENOR_I);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresion ::= expresion MAYOR_I expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra mayor igual"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.MAYOR_I);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresion ::= expresion IGUAL expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra igual"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.IGUAL);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresion ::= expresion DIFF expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra diferente"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.DIFF);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expresion ::= expresion AND expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra and"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.AND);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expresion ::= expresion OR expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra or"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.OR);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expresion ::= expresion XOR expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra xor"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.XOR);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expresion ::= expresion NAND expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra nand"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.NAND);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expresion ::= expresion NOR expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra nor"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.NOR);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expresion ::= valor_puntual 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Primitivo e1 = (Primitivo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra valor"); 
            RESULT = new Expresion(e1,Expresion.Operacion.PRIMITIVO);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expresion ::= PAR_A expresion PAR_C 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            imp("Encuentra parentesis"); 
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expresion ::= ID 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra arreglo"); 
            RESULT = new Expresion(new Identificador(e1.toString(),null,false,e1left,e1right),Expresion.Operacion.IDENTIFICADOR);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expresion ::= ID dimensiones 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Expresion> e2 = (List<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra arreglo"); 
            RESULT = new Expresion(new Identificador(e1.toString(),e2,true,e1left,e1right),Expresion.Operacion.IDENTIFICADOR);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expresion ::= NOT expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra not"); 
            RESULT = new Expresion(e1,Expresion.Operacion.NOT);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expresion ::= NULO ID 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra arreglo"); 
            RESULT = new Expresion(new Identificador(e1.toString(),null,false,e1left,e1right),Expresion.Operacion.NULO);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // si ::= SI PAR_A expresion PAR_C INDENT inst DEDENT 
            {
              Si RESULT =null;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e2 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Si(e1, e2, null, null, e5right, e5left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // si ::= SI PAR_A expresion PAR_C INDENT inst DEDENT SINO INDENT inst DEDENT 
            {
              Si RESULT =null;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<Instruccion> e2 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e3 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Si(e1, e2, e3, null, e5right, e5left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // si ::= SI PAR_A expresion PAR_C INDENT inst DEDENT SINO si 
            {
              Si RESULT =null;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Instruccion> e2 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Si e3 = (Si)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Si(e1, e2, null, e3, e5right, e5left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // asignacion ::= ID ASIGNAR expresion 
            {
              Asignacion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            List<Expresion> exp = new LinkedList<>();
            exp.add(e2);
            RESULT = new Asignacion(e1.toString(),exp,null,e1right,e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // asignacion ::= ID dimensiones ASIGNAR expresion 
            {
              Asignacion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Expresion> e3 = (List<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            List<Expresion> exp = new LinkedList<>();
            exp.add(e2);
            RESULT = new Asignacion(e1.toString(),exp,e3,e1right,e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // hacer ::= HACER INDENT inst DEDENT MIENTRAS PAR_A expresion PAR_C 
            {
              Hacer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<Instruccion> e3 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Hacer(e2, e3, e1right, e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("hacer",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // mientras ::= MIENTRAS PAR_A expresion PAR_C INDENT inst DEDENT 
            {
              Mientras RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e3 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Mientras(e2, e3, e1right, e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mientras",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // switch ::= SWITCH PAR_A ID PAR_C INDENT casos DEDENT 
            {
              Switch RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Caso> e3 = (List<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Switch(e2.toString(), e3, null, e1right, e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // switch ::= SWITCH PAR_A ID PAR_C INDENT casos default DEDENT 
            {
              Switch RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Caso> e4 = (List<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e3 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Switch(e2.toString(), e4, e3, e1right, e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // switch ::= SWITCH PAR_A ID PAR_C INDENT default DEDENT 
            {
              Switch RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e3 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Switch(e2.toString(), null, e3, e1right, e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // casos ::= casos caso 
            {
              List<Caso> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Caso> e1 = (List<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caso e2 = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
            RESULT.add(e2);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // casos ::= caso 
            {
              List<Caso> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caso e1 = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new LinkedList<>();
            RESULT.add(e1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // caso ::= CASO valor_puntual INDENT inst DEDENT 
            {
              Caso RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Primitivo e3 = (Primitivo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e2 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Caso(e3, e2, e1right, e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // default ::= DEFAULT INDENT inst DEDENT 
            {
              List<Instruccion> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e1 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("default",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
