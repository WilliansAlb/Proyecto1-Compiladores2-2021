
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\167\000\002\002\004\000\002\002\003\000\002\020" +
    "\004\000\002\020\003\000\002\017\010\000\002\046\004" +
    "\000\002\046\003\000\002\013\003\000\002\013\003\000" +
    "\002\047\013\000\002\047\012\000\002\047\011\000\002" +
    "\047\012\000\002\054\002\000\002\054\003\000\002\050" +
    "\005\000\002\050\003\000\002\051\004\000\002\021\002" +
    "\000\002\021\004\000\002\022\005\000\002\022\003\000" +
    "\002\010\002\000\002\010\004\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\004\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\056\003\000\002\056\003\000\002\003\011\000\002\003" +
    "\015\000\002\003\013\000\002\012\007\000\002\012\006" +
    "\000\002\012\011\000\002\012\010\000\002\063\002\000" +
    "\002\063\006\000\002\061\005\000\002\061\003\000\002" +
    "\062\003\000\002\062\005\000\002\057\004\000\002\057" +
    "\003\000\002\060\005\000\002\037\016\000\002\040\003" +
    "\000\002\040\003\000\002\036\006\000\002\036\003\000" +
    "\002\035\002\000\002\035\004\000\002\034\005\000\002" +
    "\034\006\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\016\011" +
    "\000\002\016\012\000\002\016\011\000\002\031\004\000" +
    "\002\031\003\000\002\032\007\000\002\030\006\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\004\000\002" +
    "\015\004\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\025\003" +
    "\000\002\025\003\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\004\000\002\024\003\000\002\024" +
    "\005\000\002\024\003\000\002\024\003\000\002\052\006" +
    "\000\002\042\011\000\002\041\012\000\002\043\014\000" +
    "\002\044\010\000\002\045\006\000\002\053\005\000\002" +
    "\053\003\000\002\055\003\000\002\055\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0114\000\004\004\005\001\002\000\006\002\ufffe\004" +
    "\ufffe\001\002\000\004\105\012\001\002\000\006\002\000" +
    "\004\005\001\002\000\004\002\010\001\002\000\004\002" +
    "\001\001\002\000\006\002\uffff\004\uffff\001\002\000\006" +
    "\005\013\116\uffef\001\002\000\004\105\344\001\002\000" +
    "\004\116\015\001\002\000\022\006\021\007\017\010\020" +
    "\011\032\012\016\015\031\016\023\105\026\001\002\000" +
    "\006\104\uffbe\105\uffbe\001\002\000\006\104\uffbf\105\uffbf" +
    "\001\002\000\006\104\uffbd\105\uffbd\001\002\000\006\104" +
    "\uffc0\105\uffc0\001\002\000\024\006\ufffb\007\ufffb\010\ufffb" +
    "\011\ufffb\012\ufffb\015\ufffb\016\ufffb\105\ufffb\117\ufffb\001" +
    "\002\000\014\006\021\007\017\010\020\011\032\012\016" +
    "\001\002\000\024\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\015\ufffa\016\ufffa\105\ufffa\117\ufffa\001\002\000\024" +
    "\006\021\007\017\010\020\011\032\012\016\015\031\016" +
    "\023\105\026\117\u010d\001\002\000\004\110\u0107\001\002" +
    "\000\004\105\u0100\001\002\000\024\006\ufff9\007\ufff9\010" +
    "\ufff9\011\ufff9\012\ufff9\015\ufff9\016\ufff9\105\ufff9\117\ufff9" +
    "\001\002\000\020\006\021\007\017\010\020\011\032\012" +
    "\016\016\034\105\033\001\002\000\006\104\uffbc\105\uffbc" +
    "\001\002\000\004\110\372\001\002\000\014\006\021\007" +
    "\017\010\020\011\032\012\016\001\002\000\004\105\036" +
    "\001\002\000\004\110\037\001\002\000\016\006\021\007" +
    "\017\010\020\011\032\012\016\111\ufff4\001\002\000\004" +
    "\111\047\001\002\000\006\100\ufff1\111\ufff1\001\002\000" +
    "\004\105\046\001\002\000\006\100\044\111\ufff3\001\002" +
    "\000\014\006\021\007\017\010\020\011\032\012\016\001" +
    "\002\000\006\100\ufff2\111\ufff2\001\002\000\006\100\ufff0" +
    "\111\ufff0\001\002\000\004\116\050\001\002\000\042\003" +
    "\uffeb\015\uffeb\016\uffeb\017\uffeb\021\uffeb\023\uffeb\024\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\034\uffeb\045" +
    "\uffeb\105\uffeb\117\uffeb\001\002\000\042\003\075\015\054" +
    "\016\023\017\074\021\062\023\052\024\070\026\064\027" +
    "\100\030\101\031\073\032\076\034\103\045\061\105\065" +
    "\117\057\001\002\000\042\003\uffe6\015\uffe6\016\uffe6\017" +
    "\uffe6\021\uffe6\023\uffe6\024\uffe6\026\uffe6\027\uffe6\030\uffe6" +
    "\031\uffe6\032\uffe6\034\uffe6\045\uffe6\105\uffe6\117\uffe6\001" +
    "\002\000\042\003\uffe4\015\uffe4\016\uffe4\017\uffe4\021\uffe4" +
    "\023\uffe4\024\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032" +
    "\uffe4\034\uffe4\045\uffe4\105\uffe4\117\uffe4\001\002\000\004" +
    "\016\034\001\002\000\042\003\uffe2\015\uffe2\016\uffe2\017" +
    "\uffe2\021\uffe2\023\uffe2\024\uffe2\026\uffe2\027\uffe2\030\uffe2" +
    "\031\uffe2\032\uffe2\034\uffe2\045\uffe2\105\uffe2\117\uffe2\001" +
    "\002\000\042\003\uffea\015\uffea\016\uffea\017\uffea\021\uffea" +
    "\023\uffea\024\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032" +
    "\uffea\034\uffea\045\uffea\105\uffea\117\uffea\001\002\000\024" +
    "\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\015\ufff8\016" +
    "\ufff8\105\ufff8\117\ufff8\001\002\000\042\003\uffe1\015\uffe1" +
    "\016\uffe1\017\uffe1\021\uffe1\023\uffe1\024\uffe1\026\uffe1\027" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\034\uffe1\045\uffe1\105\uffe1" +
    "\117\uffe1\001\002\000\004\110\335\001\002\000\004\110" +
    "\310\001\002\000\042\003\uffdc\015\uffdc\016\uffdc\017\uffdc" +
    "\021\uffdc\023\uffdc\024\uffdc\026\uffdc\027\uffdc\030\uffdc\031" +
    "\uffdc\032\uffdc\034\uffdc\045\uffdc\105\uffdc\117\uffdc\001\002" +
    "\000\004\110\266\001\002\000\006\075\254\114\256\001" +
    "\002\000\042\003\uffe8\015\uffe8\016\uffe8\017\uffe8\021\uffe8" +
    "\023\uffe8\024\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032" +
    "\uffe8\034\uffe8\045\uffe8\105\uffe8\117\uffe8\001\002\000\042" +
    "\003\uffde\015\uffde\016\uffde\017\uffde\021\uffde\023\uffde\024" +
    "\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\034\uffde" +
    "\045\uffde\105\uffde\117\uffde\001\002\000\042\003\uffe7\015" +
    "\uffe7\016\uffe7\017\uffe7\021\uffe7\023\uffe7\024\uffe7\026\uffe7" +
    "\027\uffe7\030\uffe7\031\uffe7\032\uffe7\034\uffe7\045\uffe7\105" +
    "\uffe7\117\uffe7\001\002\000\042\003\uffe9\015\uffe9\016\uffe9" +
    "\017\uffe9\021\uffe9\023\uffe9\024\uffe9\026\uffe9\027\uffe9\030" +
    "\uffe9\031\uffe9\032\uffe9\034\uffe9\045\uffe9\105\uffe9\117\uffe9" +
    "\001\002\000\042\003\uffdf\015\uffdf\016\uffdf\017\uffdf\021" +
    "\uffdf\023\uffdf\024\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf" +
    "\032\uffdf\034\uffdf\045\uffdf\105\uffdf\117\uffdf\001\002\000" +
    "\030\013\107\014\114\055\156\063\161\065\120\105\116" +
    "\106\111\107\121\110\154\112\112\113\110\001\002\000" +
    "\004\110\236\001\002\000\042\003\uffdd\015\uffdd\016\uffdd" +
    "\017\uffdd\021\uffdd\023\uffdd\024\uffdd\026\uffdd\027\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\034\uffdd\045\uffdd\105\uffdd\117\uffdd" +
    "\001\002\000\004\110\225\001\002\000\042\003\uffe0\015" +
    "\uffe0\016\uffe0\017\uffe0\021\uffe0\023\uffe0\024\uffe0\026\uffe0" +
    "\027\uffe0\030\uffe0\031\uffe0\032\uffe0\034\uffe0\045\uffe0\105" +
    "\uffe0\117\uffe0\001\002\000\004\110\217\001\002\000\004" +
    "\116\147\001\002\000\042\003\uffe3\015\uffe3\016\uffe3\017" +
    "\uffe3\021\uffe3\023\uffe3\024\uffe3\026\uffe3\027\uffe3\030\uffe3" +
    "\031\uffe3\032\uffe3\034\uffe3\045\uffe3\105\uffe3\117\uffe3\001" +
    "\002\000\004\110\104\001\002\000\024\013\107\014\114" +
    "\065\120\105\116\106\111\107\121\110\105\112\112\113" +
    "\110\001\002\000\024\013\107\014\114\065\120\105\116" +
    "\106\111\107\121\110\105\112\112\113\110\001\002\000" +
    "\130\003\uff95\006\uff95\007\uff95\010\uff95\011\uff95\012\uff95" +
    "\015\uff95\016\uff95\017\uff95\021\uff95\023\uff95\024\uff95\026" +
    "\uff95\027\uff95\030\uff95\031\uff95\032\uff95\034\uff95\045\uff95" +
    "\047\uff95\050\uff95\051\uff95\052\uff95\053\uff95\054\uff95\056" +
    "\uff95\057\uff95\060\uff95\061\uff95\062\uff95\064\uff95\065\uff95" +
    "\066\uff95\067\uff95\070\uff95\071\uff95\076\uff95\100\uff95\102" +
    "\uff95\105\uff95\111\uff95\117\uff95\121\uff95\001\002\000\132" +
    "\003\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\015" +
    "\uffa1\016\uffa1\017\uffa1\021\uffa1\023\uffa1\024\uffa1\026\uffa1" +
    "\027\uffa1\030\uffa1\031\uffa1\032\uffa1\034\uffa1\045\uffa1\047" +
    "\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\056\uffa1" +
    "\057\uffa1\060\uffa1\061\uffa1\062\uffa1\064\uffa1\065\uffa1\066" +
    "\uffa1\067\uffa1\070\uffa1\071\uffa1\076\uffa1\100\uffa1\102\uffa1" +
    "\105\uffa1\111\uffa1\116\uffa1\117\uffa1\121\uffa1\001\002\000" +
    "\132\003\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0" +
    "\015\uffb0\016\uffb0\017\uffb0\021\uffb0\023\uffb0\024\uffb0\026" +
    "\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\034\uffb0\045\uffb0" +
    "\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\056" +
    "\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\064\uffb0\065\uffb0" +
    "\066\uffb0\067\uffb0\070\uffb0\071\uffb0\076\uffb0\100\uffb0\102" +
    "\uffb0\105\uffb0\111\uffb0\116\uffb0\117\uffb0\121\uffb0\001\002" +
    "\000\132\003\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012" +
    "\uffb3\015\uffb3\016\uffb3\017\uffb3\021\uffb3\023\uffb3\024\uffb3" +
    "\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\034\uffb3\045" +
    "\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3" +
    "\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\064\uffb3\065" +
    "\uffb3\066\uffb3\067\uffb3\070\uffb3\071\uffb3\076\uffb3\100\uffb3" +
    "\102\uffb3\105\uffb3\111\uffb3\116\uffb3\117\uffb3\121\uffb3\001" +
    "\002\000\132\003\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4" +
    "\012\uffb4\015\uffb4\016\uffb4\017\uffb4\021\uffb4\023\uffb4\024" +
    "\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\034\uffb4" +
    "\045\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054" +
    "\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\064\uffb4" +
    "\065\uffb4\066\uffb4\067\uffb4\070\uffb4\071\uffb4\076\uffb4\100" +
    "\uffb4\102\uffb4\105\uffb4\111\uffb4\116\uffb4\117\uffb4\121\uffb4" +
    "\001\002\000\020\064\126\065\123\066\130\067\125\070" +
    "\124\071\127\100\142\001\002\000\132\003\uffa0\006\uffa0" +
    "\007\uffa0\010\uffa0\011\uffa0\012\uffa0\015\uffa0\016\uffa0\017" +
    "\uffa0\021\uffa0\023\uffa0\024\uffa0\026\uffa0\027\uffa0\030\uffa0" +
    "\031\uffa0\032\uffa0\034\uffa0\045\uffa0\047\uffa0\050\uffa0\051" +
    "\uffa0\052\uffa0\053\uffa0\054\uffa0\056\uffa0\057\uffa0\060\uffa0" +
    "\061\uffa0\062\uffa0\064\uffa0\065\uffa0\066\uffa0\067\uffa0\070" +
    "\uffa0\071\uffa0\076\uffa0\100\uffa0\102\uffa0\105\uffa0\111\uffa0" +
    "\116\uffa0\117\uffa0\121\uffa0\001\002\000\130\003\uff98\006" +
    "\uff98\007\uff98\010\uff98\011\uff98\012\uff98\015\uff98\016\uff98" +
    "\017\uff98\021\uff98\023\uff98\024\uff98\026\uff98\027\uff98\030" +
    "\uff98\031\uff98\032\uff98\034\uff98\045\uff98\047\uff98\050\uff98" +
    "\051\uff98\052\uff98\053\uff98\054\uff98\056\uff98\057\uff98\060" +
    "\uff98\061\uff98\062\uff98\064\uff98\065\uff98\066\uff98\067\uff98" +
    "\070\uff98\071\uff98\076\uff98\100\uff98\102\uff98\105\uff98\111" +
    "\uff98\117\uff98\121\uff98\001\002\000\132\003\uff96\006\uff96" +
    "\007\uff96\010\uff96\011\uff96\012\uff96\015\uff96\016\uff96\017" +
    "\uff96\021\uff96\023\uff96\024\uff96\026\uff96\027\uff96\030\uff96" +
    "\031\uff96\032\uff96\034\uff96\045\uff96\047\uff96\050\uff96\051" +
    "\uff96\052\uff96\053\uff96\054\uff96\056\uff96\057\uff96\060\uff96" +
    "\061\uff96\062\uff96\064\uff96\065\uff96\066\uff96\067\uff96\070" +
    "\uff96\071\uff96\076\uff96\100\uff96\102\uff96\105\uff96\110\137" +
    "\111\uff96\117\uff96\121\uff96\001\002\000\132\003\uffb1\006" +
    "\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\015\uffb1\016\uffb1" +
    "\017\uffb1\021\uffb1\023\uffb1\024\uffb1\026\uffb1\027\uffb1\030" +
    "\uffb1\031\uffb1\032\uffb1\034\uffb1\045\uffb1\047\uffb1\050\uffb1" +
    "\051\uffb1\052\uffb1\053\uffb1\054\uffb1\056\uffb1\057\uffb1\060" +
    "\uffb1\061\uffb1\062\uffb1\064\uffb1\065\uffb1\066\uffb1\067\uffb1" +
    "\070\uffb1\071\uffb1\076\uffb1\100\uffb1\102\uffb1\105\uffb1\111" +
    "\uffb1\116\uffb1\117\uffb1\121\uffb1\001\002\000\024\013\107" +
    "\014\114\065\120\105\116\106\111\107\121\110\105\112" +
    "\112\113\110\001\002\000\132\003\uffb2\006\uffb2\007\uffb2" +
    "\010\uffb2\011\uffb2\012\uffb2\015\uffb2\016\uffb2\017\uffb2\021" +
    "\uffb2\023\uffb2\024\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2" +
    "\032\uffb2\034\uffb2\045\uffb2\047\uffb2\050\uffb2\051\uffb2\052" +
    "\uffb2\053\uffb2\054\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2" +
    "\062\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2\070\uffb2\071" +
    "\uffb2\076\uffb2\100\uffb2\102\uffb2\105\uffb2\111\uffb2\116\uffb2" +
    "\117\uffb2\121\uffb2\001\002\000\130\003\uff99\006\uff99\007" +
    "\uff99\010\uff99\011\uff99\012\uff99\015\uff99\016\uff99\017\uff99" +
    "\021\uff99\023\uff99\024\uff99\026\uff99\027\uff99\030\uff99\031" +
    "\uff99\032\uff99\034\uff99\045\uff99\047\uff99\050\uff99\051\uff99" +
    "\052\uff99\053\uff99\054\uff99\056\uff99\057\uff99\060\uff99\061" +
    "\uff99\062\uff99\064\uff99\065\uff99\066\uff99\067\uff99\070\uff99" +
    "\071\uff99\076\uff99\100\uff99\102\uff99\105\uff99\111\uff99\117" +
    "\uff99\121\uff99\001\002\000\024\013\107\014\114\065\120" +
    "\105\116\106\111\107\121\110\105\112\112\113\110\001" +
    "\002\000\024\013\107\014\114\065\120\105\116\106\111" +
    "\107\121\110\105\112\112\113\110\001\002\000\024\013" +
    "\107\014\114\065\120\105\116\106\111\107\121\110\105" +
    "\112\112\113\110\001\002\000\024\013\107\014\114\065" +
    "\120\105\116\106\111\107\121\110\105\112\112\113\110" +
    "\001\002\000\024\013\107\014\114\065\120\105\116\106" +
    "\111\107\121\110\105\112\112\113\110\001\002\000\024" +
    "\013\107\014\114\065\120\105\116\106\111\107\121\110" +
    "\105\112\112\113\110\001\002\000\130\003\uff9d\006\uff9d" +
    "\007\uff9d\010\uff9d\011\uff9d\012\uff9d\015\uff9d\016\uff9d\017" +
    "\uff9d\021\uff9d\023\uff9d\024\uff9d\026\uff9d\027\uff9d\030\uff9d" +
    "\031\uff9d\032\uff9d\034\uff9d\045\uff9d\047\uff9d\050\uff9d\051" +
    "\uff9d\052\uff9d\053\uff9d\054\uff9d\056\uff9d\057\uff9d\060\uff9d" +
    "\061\uff9d\062\uff9d\064\uff9d\065\uff9d\066\uff9d\067\uff9d\070" +
    "\uff9d\071\127\076\uff9d\100\uff9d\102\uff9d\105\uff9d\111\uff9d" +
    "\117\uff9d\121\uff9d\001\002\000\130\003\uff9b\006\uff9b\007" +
    "\uff9b\010\uff9b\011\uff9b\012\uff9b\015\uff9b\016\uff9b\017\uff9b" +
    "\021\uff9b\023\uff9b\024\uff9b\026\uff9b\027\uff9b\030\uff9b\031" +
    "\uff9b\032\uff9b\034\uff9b\045\uff9b\047\uff9b\050\uff9b\051\uff9b" +
    "\052\uff9b\053\uff9b\054\uff9b\056\uff9b\057\uff9b\060\uff9b\061" +
    "\uff9b\062\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b\070\uff9b" +
    "\071\uff9b\076\uff9b\100\uff9b\102\uff9b\105\uff9b\111\uff9b\117" +
    "\uff9b\121\uff9b\001\002\000\130\003\uff9f\006\uff9f\007\uff9f" +
    "\010\uff9f\011\uff9f\012\uff9f\015\uff9f\016\uff9f\017\uff9f\021" +
    "\uff9f\023\uff9f\024\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f" +
    "\032\uff9f\034\uff9f\045\uff9f\047\uff9f\050\uff9f\051\uff9f\052" +
    "\uff9f\053\uff9f\054\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f" +
    "\062\uff9f\064\uff9f\065\uff9f\066\130\067\125\070\124\071" +
    "\127\076\uff9f\100\uff9f\102\uff9f\105\uff9f\111\uff9f\117\uff9f" +
    "\121\uff9f\001\002\000\130\003\uff9c\006\uff9c\007\uff9c\010" +
    "\uff9c\011\uff9c\012\uff9c\015\uff9c\016\uff9c\017\uff9c\021\uff9c" +
    "\023\uff9c\024\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032" +
    "\uff9c\034\uff9c\045\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c" +
    "\053\uff9c\054\uff9c\056\uff9c\057\uff9c\060\uff9c\061\uff9c\062" +
    "\uff9c\064\uff9c\065\uff9c\066\uff9c\067\uff9c\070\uff9c\071\127" +
    "\076\uff9c\100\uff9c\102\uff9c\105\uff9c\111\uff9c\117\uff9c\121" +
    "\uff9c\001\002\000\130\003\uff9a\006\uff9a\007\uff9a\010\uff9a" +
    "\011\uff9a\012\uff9a\015\uff9a\016\uff9a\017\uff9a\021\uff9a\023" +
    "\uff9a\024\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a" +
    "\034\uff9a\045\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\053" +
    "\uff9a\054\uff9a\056\uff9a\057\uff9a\060\uff9a\061\uff9a\062\uff9a" +
    "\064\uff9a\065\uff9a\066\uff9a\067\uff9a\070\uff9a\071\127\076" +
    "\uff9a\100\uff9a\102\uff9a\105\uff9a\111\uff9a\117\uff9a\121\uff9a" +
    "\001\002\000\130\003\uff9e\006\uff9e\007\uff9e\010\uff9e\011" +
    "\uff9e\012\uff9e\015\uff9e\016\uff9e\017\uff9e\021\uff9e\023\uff9e" +
    "\024\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\034" +
    "\uff9e\045\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e" +
    "\054\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\064" +
    "\uff9e\065\uff9e\066\130\067\125\070\124\071\127\076\uff9e" +
    "\100\uff9e\102\uff9e\105\uff9e\111\uff9e\117\uff9e\121\uff9e\001" +
    "\002\000\014\006\021\007\017\010\020\011\032\012\016" +
    "\001\002\000\006\100\044\111\141\001\002\000\130\003" +
    "\uff94\006\uff94\007\uff94\010\uff94\011\uff94\012\uff94\015\uff94" +
    "\016\uff94\017\uff94\021\uff94\023\uff94\024\uff94\026\uff94\027" +
    "\uff94\030\uff94\031\uff94\032\uff94\034\uff94\045\uff94\047\uff94" +
    "\050\uff94\051\uff94\052\uff94\053\uff94\054\uff94\056\uff94\057" +
    "\uff94\060\uff94\061\uff94\062\uff94\064\uff94\065\uff94\066\uff94" +
    "\067\uff94\070\uff94\071\uff94\076\uff94\100\uff94\102\uff94\105" +
    "\uff94\111\uff94\117\uff94\121\uff94\001\002\000\024\013\107" +
    "\014\114\065\120\105\116\106\111\107\121\110\105\112" +
    "\112\113\110\001\002\000\020\064\126\065\123\066\130" +
    "\067\125\070\124\071\127\111\144\001\002\000\042\003" +
    "\uff90\015\uff90\016\uff90\017\uff90\021\uff90\023\uff90\024\uff90" +
    "\026\uff90\027\uff90\030\uff90\031\uff90\032\uff90\034\uff90\045" +
    "\uff90\105\uff90\117\uff90\001\002\000\020\064\126\065\123" +
    "\066\130\067\125\070\124\071\127\111\146\001\002\000" +
    "\130\003\uff97\006\uff97\007\uff97\010\uff97\011\uff97\012\uff97" +
    "\015\uff97\016\uff97\017\uff97\021\uff97\023\uff97\024\uff97\026" +
    "\uff97\027\uff97\030\uff97\031\uff97\032\uff97\034\uff97\045\uff97" +
    "\047\uff97\050\uff97\051\uff97\052\uff97\053\uff97\054\uff97\056" +
    "\uff97\057\uff97\060\uff97\061\uff97\062\uff97\064\uff97\065\uff97" +
    "\066\uff97\067\uff97\070\uff97\071\uff97\076\uff97\100\uff97\102" +
    "\uff97\105\uff97\111\uff97\117\uff97\121\uff97\001\002\000\042" +
    "\003\uffeb\015\uffeb\016\uffeb\017\uffeb\021\uffeb\023\uffeb\024" +
    "\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\034\uffeb" +
    "\045\uffeb\105\uffeb\117\uffeb\001\002\000\042\003\075\015" +
    "\054\016\023\017\074\021\062\023\052\024\070\026\064" +
    "\027\100\030\101\031\073\032\076\034\103\045\061\105" +
    "\065\117\151\001\002\000\004\027\152\001\002\000\004" +
    "\110\153\001\002\000\030\013\107\014\114\055\156\063" +
    "\161\065\120\105\116\106\111\107\121\110\154\112\112" +
    "\113\110\001\002\000\030\013\107\014\114\055\156\063" +
    "\161\065\120\105\116\106\111\107\121\110\154\112\112" +
    "\113\110\001\002\000\004\111\213\001\002\000\004\105" +
    "\212\001\002\000\032\047\201\050\202\051\200\052\177" +
    "\053\203\054\176\064\126\065\123\066\130\067\125\070" +
    "\124\071\127\001\002\000\020\056\165\057\164\060\167" +
    "\061\170\062\166\111\uff8c\121\uff8c\001\002\000\030\013" +
    "\107\014\114\055\156\063\161\065\120\105\116\106\111" +
    "\107\121\110\154\112\112\113\110\001\002\000\036\047" +
    "\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\064\uffb1" +
    "\065\uffb1\066\uffb1\067\uffb1\070\uffb1\071\uffb1\111\uff8b\121" +
    "\uff8b\001\002\000\060\003\uffa8\015\uffa8\016\uffa8\017\uffa8" +
    "\021\uffa8\023\uffa8\024\uffa8\026\uffa8\027\uffa8\030\uffa8\031" +
    "\uffa8\032\uffa8\034\uffa8\045\uffa8\056\uffa8\057\uffa8\060\uffa8" +
    "\061\uffa8\062\uffa8\105\uffa8\111\uffa8\117\uffa8\121\uffa8\001" +
    "\002\000\030\013\107\014\114\055\156\063\161\065\120" +
    "\105\116\106\111\107\121\110\154\112\112\113\110\001" +
    "\002\000\030\013\107\014\114\055\156\063\161\065\120" +
    "\105\116\106\111\107\121\110\154\112\112\113\110\001" +
    "\002\000\030\013\107\014\114\055\156\063\161\065\120" +
    "\105\116\106\111\107\121\110\154\112\112\113\110\001" +
    "\002\000\030\013\107\014\114\055\156\063\161\065\120" +
    "\105\116\106\111\107\121\110\154\112\112\113\110\001" +
    "\002\000\030\013\107\014\114\055\156\063\161\065\120" +
    "\105\116\106\111\107\121\110\154\112\112\113\110\001" +
    "\002\000\060\003\uffa4\015\uffa4\016\uffa4\017\uffa4\021\uffa4" +
    "\023\uffa4\024\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032" +
    "\uffa4\034\uffa4\045\uffa4\056\165\057\164\060\uffa4\061\uffa4" +
    "\062\uffa4\105\uffa4\111\uffa4\117\uffa4\121\uffa4\001\002\000" +
    "\060\003\uffa5\015\uffa5\016\uffa5\017\uffa5\021\uffa5\023\uffa5" +
    "\024\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\034" +
    "\uffa5\045\uffa5\056\165\057\164\060\uffa5\061\uffa5\062\uffa5" +
    "\105\uffa5\111\uffa5\117\uffa5\121\uffa5\001\002\000\060\003" +
    "\uffa2\015\uffa2\016\uffa2\017\uffa2\021\uffa2\023\uffa2\024\uffa2" +
    "\026\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\034\uffa2\045" +
    "\uffa2\056\165\057\164\060\uffa2\061\uffa2\062\uffa2\105\uffa2" +
    "\111\uffa2\117\uffa2\121\uffa2\001\002\000\060\003\uffa6\015" +
    "\uffa6\016\uffa6\017\uffa6\021\uffa6\023\uffa6\024\uffa6\026\uffa6" +
    "\027\uffa6\030\uffa6\031\uffa6\032\uffa6\034\uffa6\045\uffa6\056" +
    "\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6\105\uffa6\111\uffa6" +
    "\117\uffa6\121\uffa6\001\002\000\060\003\uffa3\015\uffa3\016" +
    "\uffa3\017\uffa3\021\uffa3\023\uffa3\024\uffa3\026\uffa3\027\uffa3" +
    "\030\uffa3\031\uffa3\032\uffa3\034\uffa3\045\uffa3\056\uffa3\057" +
    "\uffa3\060\uffa3\061\uffa3\062\uffa3\105\uffa3\111\uffa3\117\uffa3" +
    "\121\uffa3\001\002\000\024\013\107\014\114\065\120\105" +
    "\116\106\111\107\121\110\105\112\112\113\110\001\002" +
    "\000\024\013\107\014\114\065\120\105\116\106\111\107" +
    "\121\110\105\112\112\113\110\001\002\000\024\013\107" +
    "\014\114\065\120\105\116\106\111\107\121\110\105\112" +
    "\112\113\110\001\002\000\024\013\107\014\114\065\120" +
    "\105\116\106\111\107\121\110\105\112\112\113\110\001" +
    "\002\000\024\013\107\014\114\065\120\105\116\106\111" +
    "\107\121\110\105\112\112\113\110\001\002\000\024\013" +
    "\107\014\114\065\120\105\116\106\111\107\121\110\105" +
    "\112\112\113\110\001\002\000\074\003\uffab\015\uffab\016" +
    "\uffab\017\uffab\021\uffab\023\uffab\024\uffab\026\uffab\027\uffab" +
    "\030\uffab\031\uffab\032\uffab\034\uffab\045\uffab\056\uffab\057" +
    "\uffab\060\uffab\061\uffab\062\uffab\064\126\065\123\066\130" +
    "\067\125\070\124\071\127\105\uffab\111\uffab\117\uffab\121" +
    "\uffab\001\002\000\074\003\uffa9\015\uffa9\016\uffa9\017\uffa9" +
    "\021\uffa9\023\uffa9\024\uffa9\026\uffa9\027\uffa9\030\uffa9\031" +
    "\uffa9\032\uffa9\034\uffa9\045\uffa9\056\uffa9\057\uffa9\060\uffa9" +
    "\061\uffa9\062\uffa9\064\126\065\123\066\130\067\125\070" +
    "\124\071\127\105\uffa9\111\uffa9\117\uffa9\121\uffa9\001\002" +
    "\000\074\003\uffaa\015\uffaa\016\uffaa\017\uffaa\021\uffaa\023" +
    "\uffaa\024\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa" +
    "\034\uffaa\045\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\062" +
    "\uffaa\064\126\065\123\066\130\067\125\070\124\071\127" +
    "\105\uffaa\111\uffaa\117\uffaa\121\uffaa\001\002\000\074\003" +
    "\uffae\015\uffae\016\uffae\017\uffae\021\uffae\023\uffae\024\uffae" +
    "\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae\034\uffae\045" +
    "\uffae\056\uffae\057\uffae\060\uffae\061\uffae\062\uffae\064\126" +
    "\065\123\066\130\067\125\070\124\071\127\105\uffae\111" +
    "\uffae\117\uffae\121\uffae\001\002\000\074\003\uffad\015\uffad" +
    "\016\uffad\017\uffad\021\uffad\023\uffad\024\uffad\026\uffad\027" +
    "\uffad\030\uffad\031\uffad\032\uffad\034\uffad\045\uffad\056\uffad" +
    "\057\uffad\060\uffad\061\uffad\062\uffad\064\126\065\123\066" +
    "\130\067\125\070\124\071\127\105\uffad\111\uffad\117\uffad" +
    "\121\uffad\001\002\000\074\003\uffac\015\uffac\016\uffac\017" +
    "\uffac\021\uffac\023\uffac\024\uffac\026\uffac\027\uffac\030\uffac" +
    "\031\uffac\032\uffac\034\uffac\045\uffac\056\uffac\057\uffac\060" +
    "\uffac\061\uffac\062\uffac\064\126\065\123\066\130\067\125" +
    "\070\124\071\127\105\uffac\111\uffac\117\uffac\121\uffac\001" +
    "\002\000\060\003\uffa7\015\uffa7\016\uffa7\017\uffa7\021\uffa7" +
    "\023\uffa7\024\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032" +
    "\uffa7\034\uffa7\045\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7" +
    "\062\uffa7\105\uffa7\111\uffa7\117\uffa7\121\uffa7\001\002\000" +
    "\042\003\uff92\015\uff92\016\uff92\017\uff92\021\uff92\023\uff92" +
    "\024\uff92\026\uff92\027\uff92\030\uff92\031\uff92\032\uff92\034" +
    "\uff92\045\uff92\105\uff92\117\uff92\001\002\000\034\047\201" +
    "\050\202\051\200\052\177\053\203\054\176\064\126\065" +
    "\123\066\130\067\125\070\124\071\127\111\146\001\002" +
    "\000\016\056\165\057\164\060\167\061\170\062\166\111" +
    "\216\001\002\000\060\003\uffaf\015\uffaf\016\uffaf\017\uffaf" +
    "\021\uffaf\023\uffaf\024\uffaf\026\uffaf\027\uffaf\030\uffaf\031" +
    "\uffaf\032\uffaf\034\uffaf\045\uffaf\056\uffaf\057\uffaf\060\uffaf" +
    "\061\uffaf\062\uffaf\105\uffaf\111\uffaf\117\uffaf\121\uffaf\001" +
    "\002\000\030\013\107\014\114\055\156\063\161\065\120" +
    "\105\116\106\111\107\121\110\154\112\112\113\110\001" +
    "\002\000\004\111\221\001\002\000\004\116\222\001\002" +
    "\000\042\003\uffeb\015\uffeb\016\uffeb\017\uffeb\021\uffeb\023" +
    "\uffeb\024\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb" +
    "\034\uffeb\045\uffeb\105\uffeb\117\uffeb\001\002\000\042\003" +
    "\075\015\054\016\023\017\074\021\062\023\052\024\070" +
    "\026\064\027\100\030\101\031\073\032\076\034\103\045" +
    "\061\105\065\117\224\001\002\000\042\003\uff93\015\uff93" +
    "\016\uff93\017\uff93\021\uff93\023\uff93\024\uff93\026\uff93\027" +
    "\uff93\030\uff93\031\uff93\032\uff93\034\uff93\045\uff93\105\uff93" +
    "\117\uff93\001\002\000\004\033\226\001\002\000\004\100" +
    "\227\001\002\000\024\013\107\014\114\065\120\105\116" +
    "\106\111\107\121\110\105\112\112\113\110\001\002\000" +
    "\020\064\126\065\123\066\130\067\125\070\124\071\127" +
    "\100\231\001\002\000\024\013\107\014\114\065\120\105" +
    "\116\106\111\107\121\110\105\112\112\113\110\001\002" +
    "\000\020\064\126\065\123\066\130\067\125\070\124\071" +
    "\127\100\233\001\002\000\024\013\107\014\114\065\120" +
    "\105\116\106\111\107\121\110\105\112\112\113\110\001" +
    "\002\000\020\064\126\065\123\066\130\067\125\070\124" +
    "\071\127\111\235\001\002\000\042\003\uff91\015\uff91\016" +
    "\uff91\017\uff91\021\uff91\023\uff91\024\uff91\026\uff91\027\uff91" +
    "\030\uff91\031\uff91\032\uff91\034\uff91\045\uff91\105\uff91\117" +
    "\uff91\001\002\000\030\013\107\014\114\055\156\063\161" +
    "\065\120\105\116\106\111\107\121\110\154\112\112\113" +
    "\110\001\002\000\004\111\240\001\002\000\004\116\241" +
    "\001\002\000\042\003\uffeb\015\uffeb\016\uffeb\017\uffeb\021" +
    "\uffeb\023\uffeb\024\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb" +
    "\032\uffeb\034\uffeb\045\uffeb\105\uffeb\117\uffeb\001\002\000" +
    "\042\003\075\015\054\016\023\017\074\021\062\023\052" +
    "\024\070\026\064\027\100\030\101\031\073\032\076\034" +
    "\103\045\061\105\065\117\243\001\002\000\044\003\uffd9" +
    "\015\uffd9\016\uffd9\017\uffd9\020\244\021\uffd9\023\uffd9\024" +
    "\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\034\uffd9" +
    "\045\uffd9\105\uffd9\117\uffd9\001\002\000\006\017\074\116" +
    "\246\001\002\000\042\003\uffd7\015\uffd7\016\uffd7\017\uffd7" +
    "\021\uffd7\023\uffd7\024\uffd7\026\uffd7\027\uffd7\030\uffd7\031" +
    "\uffd7\032\uffd7\034\uffd7\045\uffd7\105\uffd7\117\uffd7\001\002" +
    "\000\042\003\uffeb\015\uffeb\016\uffeb\017\uffeb\021\uffeb\023" +
    "\uffeb\024\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb" +
    "\034\uffeb\045\uffeb\105\uffeb\117\uffeb\001\002\000\042\003" +
    "\075\015\054\016\023\017\074\021\062\023\052\024\070" +
    "\026\064\027\100\030\101\031\073\032\076\034\103\045" +
    "\061\105\065\117\250\001\002\000\042\003\uffd8\015\uffd8" +
    "\016\uffd8\017\uffd8\021\uffd8\023\uffd8\024\uffd8\026\uffd8\027" +
    "\uffd8\030\uffd8\031\uffd8\032\uffd8\034\uffd8\045\uffd8\105\uffd8" +
    "\117\uffd8\001\002\000\072\003\uffda\015\uffda\016\uffda\017" +
    "\uffda\021\uffda\023\uffda\024\uffda\026\uffda\027\uffda\030\uffda" +
    "\031\uffda\032\uffda\034\uffda\045\uffda\047\201\050\202\051" +
    "\200\052\177\053\203\054\176\064\126\065\123\066\130" +
    "\067\125\070\124\071\127\105\uffda\117\uffda\001\002\000" +
    "\054\003\uffdb\015\uffdb\016\uffdb\017\uffdb\021\uffdb\023\uffdb" +
    "\024\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\034" +
    "\uffdb\045\uffdb\056\165\057\164\060\167\061\170\062\166" +
    "\105\uffdb\117\uffdb\001\002\000\042\003\uffe5\015\uffe5\016" +
    "\uffe5\017\uffe5\021\uffe5\023\uffe5\024\uffe5\026\uffe5\027\uffe5" +
    "\030\uffe5\031\uffe5\032\uffe5\034\uffe5\045\uffe5\105\uffe5\117" +
    "\uffe5\001\002\000\024\013\107\014\114\065\120\105\116" +
    "\106\111\107\121\110\105\112\112\113\110\001\002\000" +
    "\006\075\254\114\262\001\002\000\024\013\107\014\114" +
    "\065\120\105\116\106\111\107\121\110\105\112\112\113" +
    "\110\001\002\000\060\003\uffcb\006\uffcb\007\uffcb\010\uffcb" +
    "\011\uffcb\012\uffcb\015\uffcb\016\uffcb\017\uffcb\021\uffcb\023" +
    "\uffcb\024\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb" +
    "\034\uffcb\045\uffcb\075\uffcb\105\uffcb\114\uffcb\117\uffcb\001" +
    "\002\000\056\003\uffc2\015\uffc2\016\uffc2\017\uffc2\021\uffc2" +
    "\023\uffc2\024\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032" +
    "\uffc2\034\uffc2\045\uffc2\064\126\065\123\066\130\067\125" +
    "\070\124\071\127\105\uffc2\117\uffc2\001\002\000\060\003" +
    "\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\015\uffcc" +
    "\016\uffcc\017\uffcc\021\uffcc\023\uffcc\024\uffcc\026\uffcc\027" +
    "\uffcc\030\uffcc\031\uffcc\032\uffcc\034\uffcc\045\uffcc\075\uffcc" +
    "\105\uffcc\114\uffcc\117\uffcc\001\002\000\030\013\107\014" +
    "\114\055\156\063\161\065\120\105\116\106\111\107\121" +
    "\110\154\112\112\113\110\001\002\000\042\003\uffc1\015" +
    "\uffc1\016\uffc1\017\uffc1\021\uffc1\023\uffc1\024\uffc1\026\uffc1" +
    "\027\uffc1\030\uffc1\031\uffc1\032\uffc1\034\uffc1\045\uffc1\105" +
    "\uffc1\117\uffc1\001\002\000\020\064\126\065\123\066\130" +
    "\067\125\070\124\071\127\076\265\001\002\000\060\003" +
    "\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca\015\uffca" +
    "\016\uffca\017\uffca\021\uffca\023\uffca\024\uffca\026\uffca\027" +
    "\uffca\030\uffca\031\uffca\032\uffca\034\uffca\045\uffca\075\uffca" +
    "\105\uffca\114\uffca\117\uffca\001\002\000\006\006\271\105" +
    "\267\001\002\000\004\121\uffc5\001\002\000\004\121\275" +
    "\001\002\000\004\105\272\001\002\000\004\114\273\001" +
    "\002\000\004\112\274\001\002\000\004\121\uffc6\001\002" +
    "\000\030\013\107\014\114\055\156\063\161\065\120\105" +
    "\116\106\111\107\121\110\154\112\112\113\110\001\002" +
    "\000\004\121\277\001\002\000\004\112\300\001\002\000" +
    "\006\072\302\073\301\001\002\000\004\111\uffc8\001\002" +
    "\000\004\111\uffc7\001\002\000\004\111\304\001\002\000" +
    "\004\116\305\001\002\000\042\003\uffeb\015\uffeb\016\uffeb" +
    "\017\uffeb\021\uffeb\023\uffeb\024\uffeb\026\uffeb\027\uffeb\030" +
    "\uffeb\031\uffeb\032\uffeb\034\uffeb\045\uffeb\105\uffeb\117\uffeb" +
    "\001\002\000\042\003\075\015\054\016\023\017\074\021" +
    "\062\023\052\024\070\026\064\027\100\030\101\031\073" +
    "\032\076\034\103\045\061\105\065\117\307\001\002\000" +
    "\042\003\uffc9\015\uffc9\016\uffc9\017\uffc9\021\uffc9\023\uffc9" +
    "\024\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\034" +
    "\uffc9\045\uffc9\105\uffc9\117\uffc9\001\002\000\004\105\311" +
    "\001\002\000\004\111\312\001\002\000\004\116\313\001" +
    "\002\000\006\022\320\025\314\001\002\000\004\116\332" +
    "\001\002\000\004\117\331\001\002\000\010\022\320\025" +
    "\314\117\325\001\002\000\010\022\uffb7\025\uffb7\117\uffb7" +
    "\001\002\000\016\013\107\014\114\106\111\107\121\112" +
    "\112\113\110\001\002\000\004\116\322\001\002\000\042" +
    "\003\uffeb\015\uffeb\016\uffeb\017\uffeb\021\uffeb\023\uffeb\024" +
    "\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\034\uffeb" +
    "\045\uffeb\105\uffeb\117\uffeb\001\002\000\042\003\075\015" +
    "\054\016\023\017\074\021\062\023\052\024\070\026\064" +
    "\027\100\030\101\031\073\032\076\034\103\045\061\105" +
    "\065\117\324\001\002\000\010\022\uffb6\025\uffb6\117\uffb6" +
    "\001\002\000\042\003\uffbb\015\uffbb\016\uffbb\017\uffbb\021" +
    "\uffbb\023\uffbb\024\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb" +
    "\032\uffbb\034\uffbb\045\uffbb\105\uffbb\117\uffbb\001\002\000" +
    "\004\117\330\001\002\000\010\022\uffb8\025\uffb8\117\uffb8" +
    "\001\002\000\042\003\uffba\015\uffba\016\uffba\017\uffba\021" +
    "\uffba\023\uffba\024\uffba\026\uffba\027\uffba\030\uffba\031\uffba" +
    "\032\uffba\034\uffba\045\uffba\105\uffba\117\uffba\001\002\000" +
    "\042\003\uffb9\015\uffb9\016\uffb9\017\uffb9\021\uffb9\023\uffb9" +
    "\024\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\034" +
    "\uffb9\045\uffb9\105\uffb9\117\uffb9\001\002\000\042\003\uffeb" +
    "\015\uffeb\016\uffeb\017\uffeb\021\uffeb\023\uffeb\024\uffeb\026" +
    "\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\034\uffeb\045\uffeb" +
    "\105\uffeb\117\uffeb\001\002\000\042\003\075\015\054\016" +
    "\023\017\074\021\062\023\052\024\070\026\064\027\100" +
    "\030\101\031\073\032\076\034\103\045\061\105\065\117" +
    "\334\001\002\000\004\117\uffb5\001\002\000\016\013\107" +
    "\014\114\106\111\107\121\112\112\113\110\001\002\000" +
    "\006\064\341\111\340\001\002\000\006\064\uff8d\111\uff8d" +
    "\001\002\000\042\003\uff8f\015\uff8f\016\uff8f\017\uff8f\021" +
    "\uff8f\023\uff8f\024\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f" +
    "\032\uff8f\034\uff8f\045\uff8f\105\uff8f\117\uff8f\001\002\000" +
    "\016\013\107\014\114\106\111\107\121\112\112\113\110" +
    "\001\002\000\006\064\uff8e\111\uff8e\001\002\000\006\104" +
    "\346\105\344\001\002\000\064\003\uffec\006\uffec\007\uffec" +
    "\010\uffec\011\uffec\012\uffec\015\uffec\016\uffec\017\uffec\021" +
    "\uffec\023\uffec\024\uffec\026\uffec\027\uffec\030\uffec\031\uffec" +
    "\032\uffec\034\uffec\045\uffec\075\uffec\100\uffec\105\uffec\114" +
    "\uffec\116\uffec\117\uffec\001\002\000\060\003\uffc4\006\uffc4" +
    "\007\uffc4\010\uffc4\011\uffc4\012\uffc4\015\uffc4\016\uffc4\017" +
    "\uffc4\021\uffc4\023\uffc4\024\uffc4\026\uffc4\027\uffc4\030\uffc4" +
    "\031\uffc4\032\uffc4\034\uffc4\045\uffc4\100\350\105\uffc4\114" +
    "\370\117\uffc4\001\002\000\004\105\344\001\002\000\006" +
    "\075\254\100\350\001\002\000\004\105\366\001\002\000" +
    "\060\003\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2" +
    "\015\uffd2\016\uffd2\017\uffd2\021\uffd2\023\uffd2\024\uffd2\026" +
    "\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\034\uffd2\045\uffd2" +
    "\075\254\105\uffd2\114\353\117\uffd2\001\002\000\054\003" +
    "\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\015\uffd4" +
    "\016\uffd4\017\uffd4\021\uffd4\023\uffd4\024\uffd4\026\uffd4\027" +
    "\uffd4\030\uffd4\031\uffd4\032\uffd4\034\uffd4\045\uffd4\105\uffd4" +
    "\117\uffd4\001\002\000\004\101\354\001\002\000\026\013" +
    "\107\014\114\065\120\101\355\105\116\106\111\107\121" +
    "\110\105\112\112\113\110\001\002\000\026\013\107\014" +
    "\114\065\120\101\355\105\116\106\111\107\121\110\105" +
    "\112\112\113\110\001\002\000\022\064\126\065\123\066" +
    "\130\067\125\070\124\071\127\100\uffce\102\uffce\001\002" +
    "\000\006\100\361\102\362\001\002\000\006\100\uffcf\102" +
    "\uffcf\001\002\000\026\013\107\014\114\065\120\101\355" +
    "\105\116\106\111\107\121\110\105\112\112\113\110\001" +
    "\002\000\054\003\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1" +
    "\012\uffd1\015\uffd1\016\uffd1\017\uffd1\021\uffd1\023\uffd1\024" +
    "\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\034\uffd1" +
    "\045\uffd1\105\uffd1\117\uffd1\001\002\000\006\100\uffd0\102" +
    "\uffd0\001\002\000\006\100\361\102\365\001\002\000\006" +
    "\100\uffcd\102\uffcd\001\002\000\064\003\uffed\006\uffed\007" +
    "\uffed\010\uffed\011\uffed\012\uffed\015\uffed\016\uffed\017\uffed" +
    "\021\uffed\023\uffed\024\uffed\026\uffed\027\uffed\030\uffed\031" +
    "\uffed\032\uffed\034\uffed\045\uffed\075\uffed\100\uffed\105\uffed" +
    "\114\uffed\116\uffed\117\uffed\001\002\000\054\003\uffd6\006" +
    "\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\015\uffd6\016\uffd6" +
    "\017\uffd6\021\uffd6\023\uffd6\024\uffd6\026\uffd6\027\uffd6\030" +
    "\uffd6\031\uffd6\032\uffd6\034\uffd6\045\uffd6\105\uffd6\117\uffd6" +
    "\001\002\000\024\013\107\014\114\065\120\105\116\106" +
    "\111\107\121\110\105\112\112\113\110\001\002\000\070" +
    "\003\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\015" +
    "\uffc3\016\uffc3\017\uffc3\021\uffc3\023\uffc3\024\uffc3\026\uffc3" +
    "\027\uffc3\030\uffc3\031\uffc3\032\uffc3\034\uffc3\045\uffc3\064" +
    "\126\065\123\066\130\067\125\070\124\071\127\105\uffc3" +
    "\117\uffc3\001\002\000\016\006\021\007\017\010\020\011" +
    "\032\012\016\111\ufff4\001\002\000\004\111\374\001\002" +
    "\000\004\116\375\001\002\000\042\003\uffeb\015\uffeb\016" +
    "\uffeb\017\uffeb\021\uffeb\023\uffeb\024\uffeb\026\uffeb\027\uffeb" +
    "\030\uffeb\031\uffeb\032\uffeb\034\uffeb\045\uffeb\105\uffeb\117" +
    "\uffeb\001\002\000\042\003\075\015\054\016\023\017\074" +
    "\021\062\023\052\024\070\026\064\027\100\030\101\031" +
    "\073\032\076\034\103\045\061\105\065\117\377\001\002" +
    "\000\024\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\015" +
    "\ufff5\016\ufff5\105\ufff5\117\ufff5\001\002\000\004\110\u0101" +
    "\001\002\000\016\006\021\007\017\010\020\011\032\012" +
    "\016\111\ufff4\001\002\000\004\111\u0103\001\002\000\004" +
    "\116\u0104\001\002\000\042\003\uffeb\015\uffeb\016\uffeb\017" +
    "\uffeb\021\uffeb\023\uffeb\024\uffeb\026\uffeb\027\uffeb\030\uffeb" +
    "\031\uffeb\032\uffeb\034\uffeb\045\uffeb\105\uffeb\117\uffeb\001" +
    "\002\000\042\003\075\015\054\016\023\017\074\021\062" +
    "\023\052\024\070\026\064\027\100\030\101\031\073\032" +
    "\076\034\103\045\061\105\065\117\u0106\001\002\000\024" +
    "\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\015\ufff7\016" +
    "\ufff7\105\ufff7\117\ufff7\001\002\000\016\006\021\007\017" +
    "\010\020\011\032\012\016\111\ufff4\001\002\000\004\111" +
    "\u0109\001\002\000\004\116\u010a\001\002\000\042\003\uffeb" +
    "\015\uffeb\016\uffeb\017\uffeb\021\uffeb\023\uffeb\024\uffeb\026" +
    "\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\034\uffeb\045\uffeb" +
    "\105\uffeb\117\uffeb\001\002\000\042\003\075\015\054\016" +
    "\023\017\074\021\062\023\052\024\070\026\064\027\100" +
    "\030\101\031\073\032\076\034\103\045\061\105\065\117" +
    "\u010c\001\002\000\024\006\ufff6\007\ufff6\010\ufff6\011\ufff6" +
    "\012\ufff6\015\ufff6\016\ufff6\105\ufff6\117\ufff6\001\002\000" +
    "\006\002\ufffd\004\ufffd\001\002\000\024\006\ufffc\007\ufffc" +
    "\010\ufffc\011\ufffc\012\ufffc\015\ufffc\016\ufffc\105\ufffc\117" +
    "\ufffc\001\002\000\006\104\u0111\105\344\001\002\000\060" +
    "\003\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\015" +
    "\uffc4\016\uffc4\017\uffc4\021\uffc4\023\uffc4\024\uffc4\026\uffc4" +
    "\027\uffc4\030\uffc4\031\uffc4\032\uffc4\034\uffc4\045\uffc4\100" +
    "\350\105\uffc4\114\370\117\uffc4\001\002\000\004\105\344" +
    "\001\002\000\006\075\254\100\350\001\002\000\060\003" +
    "\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\015\uffd2" +
    "\016\uffd2\017\uffd2\021\uffd2\023\uffd2\024\uffd2\026\uffd2\027" +
    "\uffd2\030\uffd2\031\uffd2\032\uffd2\034\uffd2\045\uffd2\075\254" +
    "\105\uffd2\114\353\117\uffd2\001\002\000\054\003\uffd3\006" +
    "\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\015\uffd3\016\uffd3" +
    "\017\uffd3\021\uffd3\023\uffd3\024\uffd3\026\uffd3\027\uffd3\030" +
    "\uffd3\031\uffd3\032\uffd3\034\uffd3\045\uffd3\105\uffd3\117\uffd3" +
    "\001\002\000\054\003\uffd5\006\uffd5\007\uffd5\010\uffd5\011" +
    "\uffd5\012\uffd5\015\uffd5\016\uffd5\017\uffd5\021\uffd5\023\uffd5" +
    "\024\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\034" +
    "\uffd5\045\uffd5\105\uffd5\117\uffd5\001\002\000\006\100\350" +
    "\116\uffee\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0114\000\010\002\006\017\003\020\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\013\001\001\000\004\022\u0115\001\001\000\002" +
    "\001\001\000\014\012\023\013\021\033\026\046\024\047" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\u010e\001\001\000\002\001\001\000\012\012\023\013\u010d" +
    "\033\026\047\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\342\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\033\041\050\042" +
    "\051\040\054\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\033\041" +
    "\051\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\050\001\001\000\030\003\101" +
    "\011\055\012\070\016\076\034\065\037\052\041\057\042" +
    "\054\043\071\044\066\045\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\057\254\060\256\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\015\251\023\114\024\250\025\116" +
    "\052\105\056\252\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\023\114\024\112\025\116\052\105\001\001\000\012" +
    "\023\114\024\144\025\116\052\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\023\114\024\121\025\116\052\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\023\114\024\135\025\116" +
    "\052\105\001\001\000\012\023\114\024\134\025\116\052" +
    "\105\001\001\000\012\023\114\024\133\025\116\052\105" +
    "\001\001\000\012\023\114\024\132\025\116\052\105\001" +
    "\001\000\012\023\114\024\131\025\116\052\105\001\001" +
    "\000\012\023\114\024\130\025\116\052\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\033" +
    "\041\050\137\051\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\023\114\024\142\025\116\052\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\147\001\001\000\030\003" +
    "\101\011\055\012\070\016\076\034\065\037\052\041\057" +
    "\042\054\043\071\044\066\045\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\015\157\023\114\024\156" +
    "\025\161\052\105\055\154\001\001\000\014\015\214\023" +
    "\114\024\213\025\116\052\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\015\162\023\114\024\156\025\116\052\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\015\174\023" +
    "\114\024\156\025\116\052\105\001\001\000\014\015\173" +
    "\023\114\024\156\025\116\052\105\001\001\000\014\015" +
    "\172\023\114\024\156\025\116\052\105\001\001\000\014" +
    "\015\171\023\114\024\156\025\116\052\105\001\001\000" +
    "\014\015\170\023\114\024\156\025\116\052\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\023\114\024\210" +
    "\025\116\052\105\001\001\000\012\023\114\024\207\025" +
    "\116\052\105\001\001\000\012\023\114\024\206\025\116" +
    "\052\105\001\001\000\012\023\114\024\205\025\116\052" +
    "\105\001\001\000\012\023\114\024\204\025\116\052\105" +
    "\001\001\000\012\023\114\024\203\025\116\052\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\015\157\023\114\024" +
    "\156\025\161\052\105\055\217\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\222\001\001\000\030\003" +
    "\101\011\055\012\070\016\076\034\065\037\052\041\057" +
    "\042\054\043\071\044\066\045\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\023\114" +
    "\024\227\025\116\052\105\001\001\000\002\001\001\000" +
    "\012\023\114\024\231\025\116\052\105\001\001\000\002" +
    "\001\001\000\012\023\114\024\233\025\116\052\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\015\157" +
    "\023\114\024\156\025\161\052\105\055\236\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\241\001\001" +
    "\000\030\003\101\011\055\012\070\016\076\034\065\037" +
    "\052\041\057\042\054\043\071\044\066\045\062\001\001" +
    "\000\002\001\001\000\004\003\244\001\001\000\002\001" +
    "\001\000\004\010\246\001\001\000\030\003\101\011\055" +
    "\012\070\016\076\034\065\037\052\041\057\042\054\043" +
    "\071\044\066\045\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\023" +
    "\114\024\263\025\116\052\105\001\001\000\004\060\260" +
    "\001\001\000\012\023\114\024\257\025\116\052\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\015\251\023\114\024\250\025\116\052\105\056" +
    "\262\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\267\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\015\157\023\114\024" +
    "\156\025\161\052\105\055\275\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\302\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\305\001\001\000\030\003\101\011\055\012" +
    "\070\016\076\034\065\037\052\041\057\042\054\043\071" +
    "\044\066\045\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\030\314" +
    "\031\315\032\316\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\030\325\032\326\001\001\000\002\001\001" +
    "\000\006\023\320\025\116\001\001\000\002\001\001\000" +
    "\004\010\322\001\001\000\030\003\101\011\055\012\070" +
    "\016\076\034\065\037\052\041\057\042\054\043\071\044" +
    "\066\045\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\332\001\001\000\030\003\101" +
    "\011\055\012\070\016\076\034\065\037\052\041\057\042" +
    "\054\043\071\044\066\045\062\001\001\000\002\001\001" +
    "\000\010\023\336\025\116\053\335\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\341" +
    "\025\116\001\001\000\002\001\001\000\004\022\344\001" +
    "\001\000\002\001\001\000\004\035\366\001\001\000\004" +
    "\022\346\001\001\000\006\057\350\060\256\001\001\000" +
    "\002\001\001\000\006\060\260\063\351\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\023\114\024\355\025" +
    "\116\052\105\061\356\062\357\001\001\000\016\023\114" +
    "\024\355\025\116\052\105\061\363\062\357\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\023\114\024\355\025\116\052\105\062\362\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\023" +
    "\114\024\370\025\116\052\105\001\001\000\002\001\001" +
    "\000\012\033\041\050\042\051\040\054\372\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\375\001\001" +
    "\000\030\003\101\011\055\012\070\016\076\034\065\037" +
    "\052\041\057\042\054\043\071\044\066\045\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\033\041\050" +
    "\042\051\040\054\u0101\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\u0104\001\001\000\030\003\101\011" +
    "\055\012\070\016\076\034\065\037\052\041\057\042\054" +
    "\043\071\044\066\045\062\001\001\000\002\001\001\000" +
    "\012\033\041\050\042\051\040\054\u0107\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\u010a\001\001\000" +
    "\030\003\101\011\055\012\070\016\076\034\065\037\052" +
    "\041\057\042\054\043\071\044\066\045\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\u010f\001\001\000\004\035\u0114\001\001\000\004\022" +
    "\u0111\001\001\000\006\057\u0112\060\256\001\001\000\006" +
    "\060\260\063\u0113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void syntax_error(Symbol cur_token) {
        System.out.println(" Se esperaban: ");
        String esperados = "";
        for (int i = 0; i < expected_token_ids().size(); i++){
            esperados += symbl_name_from_id(expected_token_ids().get(i))+"-";
        }
        System.out.print(esperados+", pero se encontro "+cur_token.value+" en la linea"+cur_token.right+" y en la columna"+cur_token.left);
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal "+message+info);
    }
    
    public void report_fatal_error(Symbol cur) {
        System.out.println("unrecovered_syntax_error");
    }

    public void imp(String texto){
        System.out.println(texto);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= pistas 
            {
              Object RESULT =null;
		 imp("todo bien carnalin"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // pistas ::= pistas pista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pistas",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // pistas ::= pista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pistas",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // pista ::= PISTA ID extiende INDENT lista_declaracion DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pista",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_declaracion ::= lista_declaracion declaraciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_declaracion ::= declaraciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaraciones ::= metodo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // metodo ::= KEEP tipo ID PAR_A param PAR_C INDENT instrucciones DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // metodo ::= tipo ID PAR_A param PAR_C INDENT instrucciones DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // metodo ::= ID PAR_A param PAR_C INDENT instrucciones DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // metodo ::= KEEP ID PAR_A param PAR_C INDENT instrucciones DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // param ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // param ::= parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametros ::= parametros COMA parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parametro ::= tipo ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // extiende ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extiende",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // extiende ::= EXT ids 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extiende",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ids ::= ids COMA ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ids ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instrucciones ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instrucciones ::= instrucciones instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion ::= asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= CONT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion ::= SALIR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion ::= RETORNA tipo_retorno 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccion ::= para 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruccion ::= si 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruccion ::= mientras 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instruccion ::= hacer 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instruccion ::= switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instruccion ::= reproducir 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruccion ::= esperar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccion ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccion ::= mensaje 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tipo_retorno ::= condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_retorno",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipo_retorno ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_retorno",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // si ::= SI PAR_A condicional PAR_C INDENT instrucciones DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // si ::= SI PAR_A condicional PAR_C INDENT instrucciones DEDENT SINO INDENT instrucciones DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // si ::= SI PAR_A condicional PAR_C INDENT instrucciones DEDENT SINO si 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaracion ::= KEEP VAR tipo ids asignar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaracion ::= VAR tipo ids asignar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaracion ::= KEEP VAR tipo ARREGLO ids dimensiones asignar_arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaracion ::= VAR tipo ARREGLO ids dimensiones asignar_arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // asignar_arreglo ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar_arreglo",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // asignar_arreglo ::= ASIGNAR LLAVE_A items LLAVE_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar_arreglo",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // items ::= items COMA item 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // items ::= item 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // item ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("item",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // item ::= LLAVE_A items LLAVE_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("item",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // dimensiones ::= dimensiones dimension 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimensiones",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // dimensiones ::= dimension 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimensiones",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // dimension ::= COR_A expresion COR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimension",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // para ::= PARA PAR_A asigna PUNTOC condicional PUNTOC NUMERO paso PAR_C INDENT instrucciones DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("para",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // paso ::= INC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paso",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // paso ::= DEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paso",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // asigna ::= ENTERO ID ASIGNAR NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asigna",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // asigna ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asigna",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // asignar ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // asignar ::= ASIGNAR expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // asignacion ::= ID ASIGNAR expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // asignacion ::= ID dimensiones ASIGNAR tipo_retorno 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tipo ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tipo ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tipo ::= CADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // tipo ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tipo ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // switch ::= SWITCH PAR_A ID PAR_C INDENT casos DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // switch ::= SWITCH PAR_A ID PAR_C INDENT casos default DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // switch ::= SWITCH PAR_A ID PAR_C INDENT default DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // casos ::= casos caso 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // casos ::= caso 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // caso ::= CASO valor_puntual INDENT instrucciones DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // default ::= DEFAULT INDENT instrucciones DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // valor_puntual ::= NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_puntual",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // valor_puntual ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_puntual",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // valor_puntual ::= CARACTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_puntual",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // valor_puntual ::= booleano 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_puntual",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // valor_puntual ::= NUMERO_D 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_puntual",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // condicion ::= PAR_A condicion PAR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // condicion ::= expresion MAYOR expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // condicion ::= expresion MENOR expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // condicion ::= expresion MENOR_I expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // condicion ::= expresion MAYOR_I expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // condicion ::= expresion IGUAL expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // condicion ::= expresion DIFF expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // condicion ::= NOT condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // condicion ::= NULO ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // condicion ::= condicion AND condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // condicion ::= condicion OR condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // condicion ::= condicion XOR condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // condicion ::= condicion NAND condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // condicion ::= condicion NOR condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // booleano ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleano",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // booleano ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleano",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresion ::= expresion SUMA expresion 
            {
              Object RESULT =null;
		 imp("Encuentra suma"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresion ::= expresion RESTA expresion 
            {
              Object RESULT =null;
		 imp("Encuentra menos"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresion ::= expresion POR expresion 
            {
              Object RESULT =null;
		 imp("Encuentra por"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresion ::= expresion ENTRE expresion 
            {
              Object RESULT =null;
		 imp("Encuentra division"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresion ::= expresion POT expresion 
            {
              Object RESULT =null;
		 imp("Encuentra potencia"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresion ::= expresion MOD expresion 
            {
              Object RESULT =null;
		 imp("Encuentra modulo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expresion ::= RESTA expresion 
            {
              Object RESULT =null;
		 imp("Encuentra simbolo menos"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expresion ::= valor_puntual 
            {
              Object RESULT =null;
		 imp("Encuentra valor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expresion ::= PAR_A expresion PAR_C 
            {
              Object RESULT =null;
		 imp("Encuentra parentesis"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expresion ::= ID 
            {
              Object RESULT =null;
		 imp("Encuentra variable"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expresion ::= llamada 
            {
              Object RESULT =null;
		 imp("Encuentra llamada"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // llamada ::= ID PAR_A parametros PAR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // mientras ::= MIENTRAS PAR_A condicional PAR_C INDENT instrucciones DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mientras",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // hacer ::= HACER INDENT instrucciones DEDENT MIENTRAS PAR_A condicional PAR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("hacer",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // reproducir ::= REPRODUCIR PAR_A NOTAS COMA expresion COMA expresion COMA expresion PAR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reproducir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // esperar ::= ESPERAR PAR_A expresion COMA expresion PAR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("esperar",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // mensaje ::= MSG PAR_A texto PAR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // texto ::= texto SUMA valor_puntual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // texto ::= valor_puntual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // condicional ::= condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // condicional ::= booleano 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
