
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import Interprete.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\263\000\002\002\004\000\002\002\003\000\002\015" +
    "\004\000\002\015\003\000\002\014\010\000\002\040\004" +
    "\000\002\040\003\000\002\007\003\000\002\007\003\000" +
    "\002\041\013\000\002\041\012\000\002\041\011\000\002" +
    "\041\012\000\002\041\012\000\002\041\011\000\002\046" +
    "\002\000\002\046\003\000\002\042\005\000\002\042\003" +
    "\000\002\043\004\000\002\016\002\000\002\016\004\000" +
    "\002\017\005\000\002\017\003\000\002\004\002\000\002" +
    "\004\004\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\004\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\064\005\000\002\062\004\000\002\063\004\000" +
    "\002\050\003\000\002\050\003\000\002\003\011\000\002" +
    "\003\015\000\002\003\013\000\002\006\007\000\002\006" +
    "\006\000\002\006\011\000\002\006\010\000\002\055\002" +
    "\000\002\055\006\000\002\053\005\000\002\053\003\000" +
    "\002\054\003\000\002\054\005\000\002\051\004\000\002" +
    "\051\003\000\002\052\005\000\002\031\016\000\002\032" +
    "\003\000\002\032\003\000\002\030\006\000\002\030\003" +
    "\000\002\027\002\000\002\027\004\000\002\026\005\000" +
    "\002\026\006\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\013" +
    "\011\000\002\013\012\000\002\013\011\000\002\023\004" +
    "\000\002\023\003\000\002\024\007\000\002\022\006\000" +
    "\002\066\003\000\002\066\003\000\002\066\003\000\002" +
    "\066\003\000\002\066\003\000\002\066\003\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\004\000\002\010\004\000\002\010" +
    "\004\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\021\003\000" +
    "\002\021\003\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\004\000\002\020\003\000\002\020\005" +
    "\000\002\020\003\000\002\020\003\000\002\020\004\000" +
    "\002\020\003\000\002\065\005\000\002\065\005\000\002" +
    "\065\005\000\002\065\005\000\002\065\005\000\002\065" +
    "\005\000\002\065\004\000\002\065\005\000\002\065\005" +
    "\000\002\065\005\000\002\065\005\000\002\065\005\000" +
    "\002\065\005\000\002\065\005\000\002\065\005\000\002" +
    "\065\005\000\002\065\005\000\002\065\005\000\002\065" +
    "\003\000\002\065\005\000\002\065\003\000\002\065\003" +
    "\000\002\065\004\000\002\065\004\000\002\065\004\000" +
    "\002\065\003\000\002\056\010\000\002\056\006\000\002" +
    "\056\006\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\060\003" +
    "\000\002\060\003\000\002\061\003\000\002\061\005\000" +
    "\002\044\006\000\002\011\002\000\002\011\003\000\002" +
    "\012\005\000\002\012\003\000\002\034\011\000\002\033" +
    "\012\000\002\035\014\000\002\036\010\000\002\037\006" +
    "\000\002\045\005\000\002\045\003\000\002\047\003\000" +
    "\002\047\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u017e\000\004\004\005\001\002\000\006\002\ufffe\004" +
    "\ufffe\001\002\000\004\105\012\001\002\000\006\002\000" +
    "\004\005\001\002\000\004\002\010\001\002\000\004\002" +
    "\001\001\002\000\006\002\uffff\004\uffff\001\002\000\006" +
    "\005\013\116\uffed\001\002\000\004\105\u0140\001\002\000" +
    "\004\116\015\001\002\000\024\006\021\007\017\010\020" +
    "\011\032\012\016\015\031\016\023\046\033\105\026\001" +
    "\002\000\006\104\uffb4\105\uffb4\001\002\000\006\104\uffb5" +
    "\105\uffb5\001\002\000\006\104\uffb3\105\uffb3\001\002\000" +
    "\006\104\uffb6\105\uffb6\001\002\000\026\006\ufffb\007\ufffb" +
    "\010\ufffb\011\ufffb\012\ufffb\015\ufffb\016\ufffb\046\ufffb\105" +
    "\ufffb\117\ufffb\001\002\000\014\006\021\007\017\010\020" +
    "\011\032\012\016\001\002\000\026\006\ufffa\007\ufffa\010" +
    "\ufffa\011\ufffa\012\ufffa\015\ufffa\016\ufffa\046\ufffa\105\ufffa" +
    "\117\ufffa\001\002\000\026\006\021\007\017\010\020\011" +
    "\032\012\016\015\031\016\023\046\033\105\026\117\u0177" +
    "\001\002\000\004\110\u0171\001\002\000\004\105\u016a\001" +
    "\002\000\026\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9" +
    "\015\ufff9\016\ufff9\046\ufff9\105\ufff9\117\ufff9\001\002\000" +
    "\022\006\021\007\017\010\020\011\032\012\016\016\u013e" +
    "\046\u0156\105\u0154\001\002\000\006\104\uffb2\105\uffb2\001" +
    "\002\000\004\110\034\001\002\000\016\006\021\007\017" +
    "\010\020\011\032\012\016\111\ufff2\001\002\000\004\111" +
    "\044\001\002\000\006\100\uffef\111\uffef\001\002\000\004" +
    "\105\043\001\002\000\006\100\041\111\ufff1\001\002\000" +
    "\014\006\021\007\017\010\020\011\032\012\016\001\002" +
    "\000\006\100\ufff0\111\ufff0\001\002\000\006\100\uffee\111" +
    "\uffee\001\002\000\004\116\045\001\002\000\050\003\uffe9" +
    "\015\uffe9\016\uffe9\017\uffe9\021\uffe9\023\uffe9\024\uffe9\026" +
    "\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\034\uffe9\035\uffe9" +
    "\043\uffe9\044\uffe9\045\uffe9\105\uffe9\117\uffe9\001\002\000" +
    "\050\003\100\015\052\016\023\017\077\021\060\023\047" +
    "\024\067\026\062\027\105\030\106\031\075\032\101\034" +
    "\110\035\074\043\102\044\050\045\057\105\063\117\055" +
    "\001\002\000\050\003\uffdf\015\uffdf\016\uffdf\017\uffdf\021" +
    "\uffdf\023\uffdf\024\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf" +
    "\032\uffdf\034\uffdf\035\uffdf\043\uffdf\044\uffdf\045\uffdf\105" +
    "\uffdf\117\uffdf\001\002\000\004\110\u014f\001\002\000\050" +
    "\003\uffdd\015\uffdd\016\uffdd\017\uffdd\021\uffdd\023\uffdd\024" +
    "\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\034\uffdd" +
    "\035\uffdd\043\uffdd\044\uffdd\045\uffdd\105\uffdd\117\uffdd\001" +
    "\002\000\004\016\u013e\001\002\000\050\003\uffdb\015\uffdb" +
    "\016\uffdb\017\uffdb\021\uffdb\023\uffdb\024\uffdb\026\uffdb\027" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\034\uffdb\035\uffdb\043\uffdb" +
    "\044\uffdb\045\uffdb\105\uffdb\117\uffdb\001\002\000\050\003" +
    "\uffe8\015\uffe8\016\uffe8\017\uffe8\021\uffe8\023\uffe8\024\uffe8" +
    "\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\034\uffe8\035" +
    "\uffe8\043\uffe8\044\uffe8\045\uffe8\105\uffe8\117\uffe8\001\002" +
    "\000\026\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\015" +
    "\ufff3\016\ufff3\046\ufff3\105\ufff3\117\ufff3\001\002\000\050" +
    "\003\uffda\015\uffda\016\uffda\017\uffda\021\uffda\023\uffda\024" +
    "\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\034\uffda" +
    "\035\uffda\043\uffda\044\uffda\045\uffda\105\uffda\117\uffda\001" +
    "\002\000\004\110\u0138\001\002\000\004\110\u0123\001\002" +
    "\000\050\003\uffd5\015\uffd5\016\uffd5\017\uffd5\021\uffd5\023" +
    "\uffd5\024\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5" +
    "\034\uffd5\035\uffd5\043\uffd5\044\uffd5\045\uffd5\105\uffd5\117" +
    "\uffd5\001\002\000\004\110\u0111\001\002\000\016\072\u010b" +
    "\073\u0109\074\u0108\075\145\110\144\114\u010c\001\002\000" +
    "\050\003\uffe1\015\uffe1\016\uffe1\017\uffe1\021\uffe1\023\uffe1" +
    "\024\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\034" +
    "\uffe1\035\uffe1\043\uffe1\044\uffe1\045\uffe1\105\uffe1\117\uffe1" +
    "\001\002\000\050\003\uffe5\015\uffe5\016\uffe5\017\uffe5\021" +
    "\uffe5\023\uffe5\024\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5" +
    "\032\uffe5\034\uffe5\035\uffe5\043\uffe5\044\uffe5\045\uffe5\105" +
    "\uffe5\117\uffe5\001\002\000\050\003\uffd7\015\uffd7\016\uffd7" +
    "\017\uffd7\021\uffd7\023\uffd7\024\uffd7\026\uffd7\027\uffd7\030" +
    "\uffd7\031\uffd7\032\uffd7\034\uffd7\035\uffd7\043\uffd7\044\uffd7" +
    "\045\uffd7\105\uffd7\117\uffd7\001\002\000\050\003\uffe0\015" +
    "\uffe0\016\uffe0\017\uffe0\021\uffe0\023\uffe0\024\uffe0\026\uffe0" +
    "\027\uffe0\030\uffe0\031\uffe0\032\uffe0\034\uffe0\035\uffe0\043" +
    "\uffe0\044\uffe0\045\uffe0\105\uffe0\117\uffe0\001\002\000\050" +
    "\003\uffe2\015\uffe2\016\uffe2\017\uffe2\021\uffe2\023\uffe2\024" +
    "\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\034\uffe2" +
    "\035\uffe2\043\uffe2\044\uffe2\045\uffe2\105\uffe2\117\uffe2\001" +
    "\002\000\050\003\uffe7\015\uffe7\016\uffe7\017\uffe7\021\uffe7" +
    "\023\uffe7\024\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032" +
    "\uffe7\034\uffe7\035\uffe7\043\uffe7\044\uffe7\045\uffe7\105\uffe7" +
    "\117\uffe7\001\002\000\050\003\uffe4\015\uffe4\016\uffe4\017" +
    "\uffe4\021\uffe4\023\uffe4\024\uffe4\026\uffe4\027\uffe4\030\uffe4" +
    "\031\uffe4\032\uffe4\034\uffe4\035\uffe4\043\uffe4\044\uffe4\045" +
    "\uffe4\105\uffe4\117\uffe4\001\002\000\050\003\uffd8\015\uffd8" +
    "\016\uffd8\017\uffd8\021\uffd8\023\uffd8\024\uffd8\026\uffd8\027" +
    "\uffd8\030\uffd8\031\uffd8\032\uffd8\034\uffd8\035\uffd8\043\uffd8" +
    "\044\uffd8\045\uffd8\105\uffd8\117\uffd8\001\002\000\004\110" +
    "\376\001\002\000\036\013\114\014\121\035\074\043\102" +
    "\044\050\055\251\063\243\065\253\105\247\106\115\107" +
    "\125\110\246\112\117\113\116\001\002\000\050\003\uffe3" +
    "\015\uffe3\016\uffe3\017\uffe3\021\uffe3\023\uffe3\024\uffe3\026" +
    "\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\034\uffe3\035\uffe3" +
    "\043\uffe3\044\uffe3\045\uffe3\105\uffe3\117\uffe3\001\002\000" +
    "\004\110\362\001\002\000\050\003\uffd6\015\uffd6\016\uffd6" +
    "\017\uffd6\021\uffd6\023\uffd6\024\uffd6\026\uffd6\027\uffd6\030" +
    "\uffd6\031\uffd6\032\uffd6\034\uffd6\035\uffd6\043\uffd6\044\uffd6" +
    "\045\uffd6\105\uffd6\117\uffd6\001\002\000\004\110\351\001" +
    "\002\000\004\110\333\001\002\000\050\003\uffd9\015\uffd9" +
    "\016\uffd9\017\uffd9\021\uffd9\023\uffd9\024\uffd9\026\uffd9\027" +
    "\uffd9\030\uffd9\031\uffd9\032\uffd9\034\uffd9\035\uffd9\043\uffd9" +
    "\044\uffd9\045\uffd9\105\uffd9\117\uffd9\001\002\000\050\003" +
    "\uffe6\015\uffe6\016\uffe6\017\uffe6\021\uffe6\023\uffe6\024\uffe6" +
    "\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\034\uffe6\035" +
    "\uffe6\043\uffe6\044\uffe6\045\uffe6\105\uffe6\117\uffe6\001\002" +
    "\000\004\110\325\001\002\000\004\116\236\001\002\000" +
    "\050\003\uffdc\015\uffdc\016\uffdc\017\uffdc\021\uffdc\023\uffdc" +
    "\024\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\034" +
    "\uffdc\035\uffdc\043\uffdc\044\uffdc\045\uffdc\105\uffdc\117\uffdc" +
    "\001\002\000\004\110\111\001\002\000\032\013\114\014" +
    "\121\035\074\043\102\044\050\065\124\105\123\106\115" +
    "\107\125\110\113\112\117\113\116\001\002\000\122\003" +
    "\uff85\015\uff85\016\uff85\017\uff85\021\uff85\023\uff85\024\uff85" +
    "\026\uff85\027\uff85\030\uff85\031\uff85\032\uff85\034\uff85\035" +
    "\uff85\043\uff85\044\uff85\045\uff85\047\uff85\050\uff85\051\uff85" +
    "\052\uff85\053\uff85\054\uff85\056\uff85\057\uff85\060\uff85\061" +
    "\uff85\062\uff85\064\uff85\065\uff85\066\uff85\067\uff85\070\uff85" +
    "\071\uff85\076\uff85\100\uff85\102\uff85\105\uff85\111\uff85\117" +
    "\uff85\001\002\000\032\013\114\014\121\035\074\043\102" +
    "\044\050\065\124\105\123\106\115\107\125\110\113\112" +
    "\117\113\116\001\002\000\142\003\uffa7\006\uffa7\007\uffa7" +
    "\010\uffa7\011\uffa7\012\uffa7\015\uffa7\016\uffa7\017\uffa7\021" +
    "\uffa7\023\uffa7\024\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7" +
    "\032\uffa7\034\uffa7\035\uffa7\043\uffa7\044\uffa7\045\uffa7\046" +
    "\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7" +
    "\056\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\064\uffa7\065" +
    "\uffa7\066\uffa7\067\uffa7\070\uffa7\071\uffa7\076\uffa7\100\uffa7" +
    "\102\uffa7\105\uffa7\111\uffa7\116\uffa7\117\uffa7\121\uffa7\001" +
    "\002\000\142\003\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9" +
    "\012\uffa9\015\uffa9\016\uffa9\017\uffa9\021\uffa9\023\uffa9\024" +
    "\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\034\uffa9" +
    "\035\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050" +
    "\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\056\uffa9\057\uffa9" +
    "\060\uffa9\061\uffa9\062\uffa9\064\uffa9\065\uffa9\066\uffa9\067" +
    "\uffa9\070\uffa9\071\uffa9\076\uffa9\100\uffa9\102\uffa9\105\uffa9" +
    "\111\uffa9\116\uffa9\117\uffa9\121\uffa9\001\002\000\142\003" +
    "\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5\015\uffa5" +
    "\016\uffa5\017\uffa5\021\uffa5\023\uffa5\024\uffa5\026\uffa5\027" +
    "\uffa5\030\uffa5\031\uffa5\032\uffa5\034\uffa5\035\uffa5\043\uffa5" +
    "\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052" +
    "\uffa5\053\uffa5\054\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5" +
    "\062\uffa5\064\uffa5\065\uffa5\066\uffa5\067\uffa5\070\uffa5\071" +
    "\uffa5\076\uffa5\100\uffa5\102\uffa5\105\uffa5\111\uffa5\116\uffa5" +
    "\117\uffa5\121\uffa5\001\002\000\142\003\uffaa\006\uffaa\007" +
    "\uffaa\010\uffaa\011\uffaa\012\uffaa\015\uffaa\016\uffaa\017\uffaa" +
    "\021\uffaa\023\uffaa\024\uffaa\026\uffaa\027\uffaa\030\uffaa\031" +
    "\uffaa\032\uffaa\034\uffaa\035\uffaa\043\uffaa\044\uffaa\045\uffaa" +
    "\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054" +
    "\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\064\uffaa" +
    "\065\uffaa\066\uffaa\067\uffaa\070\uffaa\071\uffaa\076\uffaa\100" +
    "\uffaa\102\uffaa\105\uffaa\111\uffaa\116\uffaa\117\uffaa\121\uffaa" +
    "\001\002\000\122\003\uff88\015\uff88\016\uff88\017\uff88\021" +
    "\uff88\023\uff88\024\uff88\026\uff88\027\uff88\030\uff88\031\uff88" +
    "\032\uff88\034\uff88\035\uff88\043\uff88\044\uff88\045\uff88\047" +
    "\uff88\050\uff88\051\uff88\052\uff88\053\uff88\054\uff88\056\uff88" +
    "\057\uff88\060\uff88\061\uff88\062\uff88\064\uff88\065\uff88\066" +
    "\uff88\067\uff88\070\uff88\071\uff88\076\uff88\100\uff88\102\uff88" +
    "\105\uff88\111\uff88\117\uff88\001\002\000\142\003\uffa6\006" +
    "\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\015\uffa6\016\uffa6" +
    "\017\uffa6\021\uffa6\023\uffa6\024\uffa6\026\uffa6\027\uffa6\030" +
    "\uffa6\031\uffa6\032\uffa6\034\uffa6\035\uffa6\043\uffa6\044\uffa6" +
    "\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053" +
    "\uffa6\054\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6" +
    "\064\uffa6\065\uffa6\066\uffa6\067\uffa6\070\uffa6\071\uffa6\076" +
    "\uffa6\100\uffa6\102\uffa6\105\uffa6\111\uffa6\116\uffa6\117\uffa6" +
    "\121\uffa6\001\002\000\020\064\133\065\130\066\135\067" +
    "\132\070\131\071\134\100\232\001\002\000\126\003\uff86" +
    "\015\uff86\016\uff86\017\uff86\021\uff86\023\uff86\024\uff86\026" +
    "\uff86\027\uff86\030\uff86\031\uff86\032\uff86\034\uff86\035\uff86" +
    "\043\uff86\044\uff86\045\uff86\047\uff86\050\uff86\051\uff86\052" +
    "\uff86\053\uff86\054\uff86\056\uff86\057\uff86\060\uff86\061\uff86" +
    "\062\uff86\064\uff86\065\uff86\066\uff86\067\uff86\070\uff86\071" +
    "\uff86\075\145\076\uff86\100\uff86\102\uff86\105\uff86\110\144" +
    "\111\uff86\117\uff86\001\002\000\032\013\114\014\121\035" +
    "\074\043\102\044\050\065\124\105\123\106\115\107\125" +
    "\110\113\112\117\113\116\001\002\000\142\003\uffa8\006" +
    "\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\015\uffa8\016\uffa8" +
    "\017\uffa8\021\uffa8\023\uffa8\024\uffa8\026\uffa8\027\uffa8\030" +
    "\uffa8\031\uffa8\032\uffa8\034\uffa8\035\uffa8\043\uffa8\044\uffa8" +
    "\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053" +
    "\uffa8\054\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8" +
    "\064\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8\071\uffa8\076" +
    "\uffa8\100\uffa8\102\uffa8\105\uffa8\111\uffa8\116\uffa8\117\uffa8" +
    "\121\uffa8\001\002\000\122\003\uff83\015\uff83\016\uff83\017" +
    "\uff83\021\uff83\023\uff83\024\uff83\026\uff83\027\uff83\030\uff83" +
    "\031\uff83\032\uff83\034\uff83\035\uff83\043\uff83\044\uff83\045" +
    "\uff83\047\uff83\050\uff83\051\uff83\052\uff83\053\uff83\054\uff83" +
    "\056\uff83\057\uff83\060\uff83\061\uff83\062\uff83\064\uff83\065" +
    "\uff83\066\uff83\067\uff83\070\uff83\071\uff83\076\uff83\100\uff83" +
    "\102\uff83\105\uff83\111\uff83\117\uff83\001\002\000\122\003" +
    "\uff89\015\uff89\016\uff89\017\uff89\021\uff89\023\uff89\024\uff89" +
    "\026\uff89\027\uff89\030\uff89\031\uff89\032\uff89\034\uff89\035" +
    "\uff89\043\uff89\044\uff89\045\uff89\047\uff89\050\uff89\051\uff89" +
    "\052\uff89\053\uff89\054\uff89\056\uff89\057\uff89\060\uff89\061" +
    "\uff89\062\uff89\064\uff89\065\uff89\066\uff89\067\uff89\070\uff89" +
    "\071\uff89\076\uff89\100\uff89\102\uff89\105\uff89\111\uff89\117" +
    "\uff89\001\002\000\032\013\114\014\121\035\074\043\102" +
    "\044\050\065\124\105\123\106\115\107\125\110\113\112" +
    "\117\113\116\001\002\000\032\013\114\014\121\035\074" +
    "\043\102\044\050\065\124\105\123\106\115\107\125\110" +
    "\113\112\117\113\116\001\002\000\032\013\114\014\121" +
    "\035\074\043\102\044\050\065\124\105\123\106\115\107" +
    "\125\110\113\112\117\113\116\001\002\000\032\013\114" +
    "\014\121\035\074\043\102\044\050\065\124\105\123\106" +
    "\115\107\125\110\113\112\117\113\116\001\002\000\032" +
    "\013\114\014\121\035\074\043\102\044\050\065\124\105" +
    "\123\106\115\107\125\110\113\112\117\113\116\001\002" +
    "\000\032\013\114\014\121\035\074\043\102\044\050\065" +
    "\124\105\123\106\115\107\125\110\113\112\117\113\116" +
    "\001\002\000\122\003\uff8d\015\uff8d\016\uff8d\017\uff8d\021" +
    "\uff8d\023\uff8d\024\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d" +
    "\032\uff8d\034\uff8d\035\uff8d\043\uff8d\044\uff8d\045\uff8d\047" +
    "\uff8d\050\uff8d\051\uff8d\052\uff8d\053\uff8d\054\uff8d\056\uff8d" +
    "\057\uff8d\060\uff8d\061\uff8d\062\uff8d\064\uff8d\065\uff8d\066" +
    "\uff8d\067\uff8d\070\uff8d\071\134\076\uff8d\100\uff8d\102\uff8d" +
    "\105\uff8d\111\uff8d\117\uff8d\001\002\000\122\003\uff8b\015" +
    "\uff8b\016\uff8b\017\uff8b\021\uff8b\023\uff8b\024\uff8b\026\uff8b" +
    "\027\uff8b\030\uff8b\031\uff8b\032\uff8b\034\uff8b\035\uff8b\043" +
    "\uff8b\044\uff8b\045\uff8b\047\uff8b\050\uff8b\051\uff8b\052\uff8b" +
    "\053\uff8b\054\uff8b\056\uff8b\057\uff8b\060\uff8b\061\uff8b\062" +
    "\uff8b\064\uff8b\065\uff8b\066\uff8b\067\uff8b\070\uff8b\071\uff8b" +
    "\076\uff8b\100\uff8b\102\uff8b\105\uff8b\111\uff8b\117\uff8b\001" +
    "\002\000\122\003\uff8f\015\uff8f\016\uff8f\017\uff8f\021\uff8f" +
    "\023\uff8f\024\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f\032" +
    "\uff8f\034\uff8f\035\uff8f\043\uff8f\044\uff8f\045\uff8f\047\uff8f" +
    "\050\uff8f\051\uff8f\052\uff8f\053\uff8f\054\uff8f\056\uff8f\057" +
    "\uff8f\060\uff8f\061\uff8f\062\uff8f\064\uff8f\065\uff8f\066\135" +
    "\067\132\070\131\071\134\076\uff8f\100\uff8f\102\uff8f\105" +
    "\uff8f\111\uff8f\117\uff8f\001\002\000\122\003\uff8c\015\uff8c" +
    "\016\uff8c\017\uff8c\021\uff8c\023\uff8c\024\uff8c\026\uff8c\027" +
    "\uff8c\030\uff8c\031\uff8c\032\uff8c\034\uff8c\035\uff8c\043\uff8c" +
    "\044\uff8c\045\uff8c\047\uff8c\050\uff8c\051\uff8c\052\uff8c\053" +
    "\uff8c\054\uff8c\056\uff8c\057\uff8c\060\uff8c\061\uff8c\062\uff8c" +
    "\064\uff8c\065\uff8c\066\uff8c\067\uff8c\070\uff8c\071\134\076" +
    "\uff8c\100\uff8c\102\uff8c\105\uff8c\111\uff8c\117\uff8c\001\002" +
    "\000\122\003\uff8a\015\uff8a\016\uff8a\017\uff8a\021\uff8a\023" +
    "\uff8a\024\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a" +
    "\034\uff8a\035\uff8a\043\uff8a\044\uff8a\045\uff8a\047\uff8a\050" +
    "\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a\056\uff8a\057\uff8a" +
    "\060\uff8a\061\uff8a\062\uff8a\064\uff8a\065\uff8a\066\uff8a\067" +
    "\uff8a\070\uff8a\071\134\076\uff8a\100\uff8a\102\uff8a\105\uff8a" +
    "\111\uff8a\117\uff8a\001\002\000\122\003\uff8e\015\uff8e\016" +
    "\uff8e\017\uff8e\021\uff8e\023\uff8e\024\uff8e\026\uff8e\027\uff8e" +
    "\030\uff8e\031\uff8e\032\uff8e\034\uff8e\035\uff8e\043\uff8e\044" +
    "\uff8e\045\uff8e\047\uff8e\050\uff8e\051\uff8e\052\uff8e\053\uff8e" +
    "\054\uff8e\056\uff8e\057\uff8e\060\uff8e\061\uff8e\062\uff8e\064" +
    "\uff8e\065\uff8e\066\135\067\132\070\131\071\134\076\uff8e" +
    "\100\uff8e\102\uff8e\105\uff8e\111\uff8e\117\uff8e\001\002\000" +
    "\040\013\114\014\121\035\074\043\102\044\050\055\161" +
    "\063\155\065\124\105\123\106\115\107\125\110\157\111" +
    "\uff5b\112\117\113\116\001\002\000\032\013\114\014\121" +
    "\035\074\043\102\044\050\065\124\105\123\106\115\107" +
    "\125\110\113\112\117\113\116\001\002\000\124\003\uff84" +
    "\015\uff84\016\uff84\017\uff84\021\uff84\023\uff84\024\uff84\026" +
    "\uff84\027\uff84\030\uff84\031\uff84\032\uff84\034\uff84\035\uff84" +
    "\043\uff84\044\uff84\045\uff84\047\uff84\050\uff84\051\uff84\052" +
    "\uff84\053\uff84\054\uff84\056\uff84\057\uff84\060\uff84\061\uff84" +
    "\062\uff84\064\uff84\065\uff84\066\uff84\067\uff84\070\uff84\071" +
    "\uff84\075\145\076\uff84\100\uff84\102\uff84\105\uff84\111\uff84" +
    "\117\uff84\001\002\000\144\003\uffc1\006\uffc1\007\uffc1\010" +
    "\uffc1\011\uffc1\012\uffc1\015\uffc1\016\uffc1\017\uffc1\021\uffc1" +
    "\023\uffc1\024\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032" +
    "\uffc1\034\uffc1\035\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1" +
    "\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\056" +
    "\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\064\uffc1\065\uffc1" +
    "\066\uffc1\067\uffc1\070\uffc1\071\uffc1\075\uffc1\076\uffc1\100" +
    "\uffc1\102\uffc1\105\uffc1\111\uffc1\114\uffc1\117\uffc1\121\uffc1" +
    "\001\002\000\144\003\uffc2\006\uffc2\007\uffc2\010\uffc2\011" +
    "\uffc2\012\uffc2\015\uffc2\016\uffc2\017\uffc2\021\uffc2\023\uffc2" +
    "\024\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\034" +
    "\uffc2\035\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2" +
    "\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\056\uffc2\057" +
    "\uffc2\060\uffc2\061\uffc2\062\uffc2\064\uffc2\065\uffc2\066\uffc2" +
    "\067\uffc2\070\uffc2\071\uffc2\075\uffc2\076\uffc2\100\uffc2\102" +
    "\uffc2\105\uffc2\111\uffc2\114\uffc2\117\uffc2\121\uffc2\001\002" +
    "\000\020\064\133\065\130\066\135\067\132\070\131\071" +
    "\134\076\152\001\002\000\144\003\uffc0\006\uffc0\007\uffc0" +
    "\010\uffc0\011\uffc0\012\uffc0\015\uffc0\016\uffc0\017\uffc0\021" +
    "\uffc0\023\uffc0\024\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0" +
    "\032\uffc0\034\uffc0\035\uffc0\043\uffc0\044\uffc0\045\uffc0\046" +
    "\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0" +
    "\056\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\064\uffc0\065" +
    "\uffc0\066\uffc0\067\uffc0\070\uffc0\071\uffc0\075\uffc0\076\uffc0" +
    "\100\uffc0\102\uffc0\105\uffc0\111\uffc0\114\uffc0\117\uffc0\121" +
    "\uffc0\001\002\000\024\047\205\050\203\056\204\057\202" +
    "\060\207\061\210\062\206\100\uffd1\111\uffd1\001\002\000" +
    "\036\047\173\050\174\051\172\052\171\053\175\054\170" +
    "\064\133\065\130\066\135\067\132\070\131\071\134\100" +
    "\uffd0\111\uffd0\001\002\000\036\013\114\014\121\035\074" +
    "\043\102\044\050\055\161\063\155\065\124\105\123\106" +
    "\115\107\125\110\157\112\117\113\116\001\002\000\004" +
    "\111\227\001\002\000\036\013\114\014\121\035\074\043" +
    "\102\044\050\055\161\063\155\065\124\105\123\106\115" +
    "\107\125\110\157\112\117\113\116\001\002\000\006\100" +
    "\164\111\uff5a\001\002\000\004\105\163\001\002\000\006" +
    "\100\uff58\111\uff58\001\002\000\024\047\uff97\050\uff97\056" +
    "\uff97\057\uff97\060\uff97\061\uff97\062\uff97\100\uff97\111\uff97" +
    "\001\002\000\036\013\114\014\121\035\074\043\102\044" +
    "\050\055\161\063\155\065\124\105\123\106\115\107\125" +
    "\110\157\112\117\113\116\001\002\000\006\100\uff59\111" +
    "\uff59\001\002\000\022\047\205\050\203\056\204\057\202" +
    "\060\207\061\210\062\206\111\226\001\002\000\034\047" +
    "\173\050\174\051\172\052\171\053\175\054\170\064\133" +
    "\065\130\066\135\067\132\070\131\071\134\111\176\001" +
    "\002\000\032\013\114\014\121\035\074\043\102\044\050" +
    "\065\124\105\123\106\115\107\125\110\113\112\117\113" +
    "\116\001\002\000\032\013\114\014\121\035\074\043\102" +
    "\044\050\065\124\105\123\106\115\107\125\110\113\112" +
    "\117\113\116\001\002\000\032\013\114\014\121\035\074" +
    "\043\102\044\050\065\124\105\123\106\115\107\125\110" +
    "\113\112\117\113\116\001\002\000\036\013\114\014\121" +
    "\035\074\043\102\044\050\055\161\063\155\065\124\105" +
    "\123\106\115\107\125\110\157\112\117\113\116\001\002" +
    "\000\036\013\114\014\121\035\074\043\102\044\050\055" +
    "\161\063\155\065\124\105\123\106\115\107\125\110\157" +
    "\112\117\113\116\001\002\000\032\013\114\014\121\035" +
    "\074\043\102\044\050\065\124\105\123\106\115\107\125" +
    "\110\113\112\117\113\116\001\002\000\122\003\uff87\015" +
    "\uff87\016\uff87\017\uff87\021\uff87\023\uff87\024\uff87\026\uff87" +
    "\027\uff87\030\uff87\031\uff87\032\uff87\034\uff87\035\uff87\043" +
    "\uff87\044\uff87\045\uff87\047\uff87\050\uff87\051\uff87\052\uff87" +
    "\053\uff87\054\uff87\056\uff87\057\uff87\060\uff87\061\uff87\062" +
    "\uff87\064\uff87\065\uff87\066\uff87\067\uff87\070\uff87\071\uff87" +
    "\076\uff87\100\uff87\102\uff87\105\uff87\111\uff87\117\uff87\001" +
    "\002\000\040\047\uffa0\050\uffa0\056\uffa0\057\uffa0\060\uffa0" +
    "\061\uffa0\062\uffa0\064\133\065\130\066\135\067\132\070" +
    "\131\071\134\100\uffa0\111\uffa0\001\002\000\024\047\uff9c" +
    "\050\uff9c\056\uff9c\057\uff9c\060\uff9c\061\uff9c\062\uff9c\100" +
    "\uff9c\111\uff9c\001\002\000\050\047\uff9e\050\uff9e\051\172" +
    "\052\171\053\175\054\170\056\uff9e\057\uff9e\060\uff9e\061" +
    "\uff9e\062\uff9e\064\133\065\130\066\135\067\132\070\131" +
    "\071\134\100\uff9e\111\uff9e\001\002\000\036\013\114\014" +
    "\121\035\074\043\102\044\050\055\161\063\155\065\124" +
    "\105\123\106\115\107\125\110\157\112\117\113\116\001" +
    "\002\000\032\013\114\014\121\035\074\043\102\044\050" +
    "\065\124\105\123\106\115\107\125\110\113\112\117\113" +
    "\116\001\002\000\036\013\114\014\121\035\074\043\102" +
    "\044\050\055\161\063\155\065\124\105\123\106\115\107" +
    "\125\110\157\112\117\113\116\001\002\000\032\013\114" +
    "\014\121\035\074\043\102\044\050\065\124\105\123\106" +
    "\115\107\125\110\113\112\117\113\116\001\002\000\036" +
    "\013\114\014\121\035\074\043\102\044\050\055\161\063" +
    "\155\065\124\105\123\106\115\107\125\110\157\112\117" +
    "\113\116\001\002\000\036\013\114\014\121\035\074\043" +
    "\102\044\050\055\161\063\155\065\124\105\123\106\115" +
    "\107\125\110\157\112\117\113\116\001\002\000\036\013" +
    "\114\014\121\035\074\043\102\044\050\055\161\063\155" +
    "\065\124\105\123\106\115\107\125\110\157\112\117\113" +
    "\116\001\002\000\024\047\205\050\203\056\204\057\202" +
    "\060\uff94\061\uff94\062\uff94\100\uff94\111\uff94\001\002\000" +
    "\032\047\173\050\174\051\172\052\171\053\175\054\170" +
    "\064\133\065\130\066\135\067\132\070\131\071\134\001" +
    "\002\000\024\047\205\050\203\056\204\057\202\060\uff95" +
    "\061\uff95\062\uff95\100\uff95\111\uff95\001\002\000\024\047" +
    "\205\050\203\056\204\057\202\060\uff92\061\uff92\062\uff92" +
    "\100\uff92\111\uff92\001\002\000\040\047\uff9a\050\uff9a\056" +
    "\uff9a\057\uff9a\060\uff9a\061\uff9a\062\uff9a\064\133\065\130" +
    "\066\135\067\132\070\131\071\134\100\uff9a\111\uff9a\001" +
    "\002\000\024\047\205\050\203\056\uff96\057\uff96\060\uff96" +
    "\061\uff96\062\uff96\100\uff96\111\uff96\001\002\000\040\047" +
    "\uff9b\050\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b\062\uff9b" +
    "\064\133\065\130\066\135\067\132\070\131\071\134\100" +
    "\uff9b\111\uff9b\001\002\000\024\047\205\050\203\056\uff93" +
    "\057\uff93\060\uff93\061\uff93\062\uff93\100\uff93\111\uff93\001" +
    "\002\000\024\047\uff9d\050\uff9d\056\uff9d\057\uff9d\060\uff9d" +
    "\061\uff9d\062\uff9d\100\uff9d\111\uff9d\001\002\000\050\047" +
    "\uff9f\050\uff9f\051\172\052\171\053\175\054\170\056\uff9f" +
    "\057\uff9f\060\uff9f\061\uff9f\062\uff9f\064\133\065\130\066" +
    "\135\067\132\070\131\071\134\100\uff9f\111\uff9f\001\002" +
    "\000\040\047\uffa3\050\uffa3\056\uffa3\057\uffa3\060\uffa3\061" +
    "\uffa3\062\uffa3\064\133\065\130\066\135\067\132\070\131" +
    "\071\134\100\uffa3\111\uffa3\001\002\000\040\047\uffa2\050" +
    "\uffa2\056\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2\064\133" +
    "\065\130\066\135\067\132\070\131\071\134\100\uffa2\111" +
    "\uffa2\001\002\000\040\047\uffa1\050\uffa1\056\uffa1\057\uffa1" +
    "\060\uffa1\061\uffa1\062\uffa1\064\133\065\130\066\135\067" +
    "\132\070\131\071\134\100\uffa1\111\uffa1\001\002\000\024" +
    "\047\uffa4\050\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4\062" +
    "\uffa4\100\uffa4\111\uffa4\001\002\000\140\003\uff5c\006\uff5c" +
    "\007\uff5c\010\uff5c\011\uff5c\012\uff5c\015\uff5c\016\uff5c\017" +
    "\uff5c\021\uff5c\023\uff5c\024\uff5c\026\uff5c\027\uff5c\030\uff5c" +
    "\031\uff5c\032\uff5c\034\uff5c\035\uff5c\043\uff5c\044\uff5c\045" +
    "\uff5c\046\uff5c\047\uff5c\050\uff5c\051\uff5c\052\uff5c\053\uff5c" +
    "\054\uff5c\056\uff5c\057\uff5c\060\uff5c\061\uff5c\062\uff5c\064" +
    "\uff5c\065\uff5c\066\uff5c\067\uff5c\070\uff5c\071\uff5c\076\uff5c" +
    "\100\uff5c\102\uff5c\105\uff5c\111\uff5c\117\uff5c\121\uff5c\001" +
    "\002\000\024\047\205\050\203\056\uff99\057\uff99\060\uff99" +
    "\061\uff99\062\uff99\100\uff99\111\uff99\001\002\000\050\047" +
    "\173\050\174\051\172\052\171\053\175\054\170\056\uff98" +
    "\057\uff98\060\uff98\061\uff98\062\uff98\064\133\065\130\066" +
    "\135\067\132\070\131\071\134\100\uff98\111\uff98\001\002" +
    "\000\032\013\114\014\121\035\074\043\102\044\050\065" +
    "\124\105\123\106\115\107\125\110\113\112\117\113\116" +
    "\001\002\000\020\064\133\065\130\066\135\067\132\070" +
    "\131\071\134\111\234\001\002\000\050\003\uff54\015\uff54" +
    "\016\uff54\017\uff54\021\uff54\023\uff54\024\uff54\026\uff54\027" +
    "\uff54\030\uff54\031\uff54\032\uff54\034\uff54\035\uff54\043\uff54" +
    "\044\uff54\045\uff54\105\uff54\117\uff54\001\002\000\020\064" +
    "\133\065\130\066\135\067\132\070\131\071\134\111\176" +
    "\001\002\000\050\003\uffe9\015\uffe9\016\uffe9\017\uffe9\021" +
    "\uffe9\023\uffe9\024\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9" +
    "\032\uffe9\034\uffe9\035\uffe9\043\uffe9\044\uffe9\045\uffe9\105" +
    "\uffe9\117\uffe9\001\002\000\050\003\100\015\052\016\023" +
    "\017\077\021\060\023\047\024\067\026\062\027\105\030" +
    "\106\031\075\032\101\034\110\035\074\043\102\044\050" +
    "\045\057\105\063\117\240\001\002\000\004\027\241\001" +
    "\002\000\004\110\242\001\002\000\036\013\114\014\121" +
    "\035\074\043\102\044\050\055\251\063\243\065\253\105" +
    "\247\106\115\107\125\110\246\112\117\113\116\001\002" +
    "\000\036\013\114\014\121\035\074\043\102\044\050\055" +
    "\251\063\243\065\253\105\247\106\115\107\125\110\246" +
    "\112\117\113\116\001\002\000\132\003\uff70\006\uff70\007" +
    "\uff70\010\uff70\011\uff70\012\uff70\015\uff70\016\uff70\017\uff70" +
    "\021\uff70\023\uff70\024\uff70\026\uff70\027\uff70\030\uff70\031" +
    "\uff70\032\uff70\034\uff70\035\uff70\043\uff70\044\uff70\045\uff70" +
    "\046\uff70\047\uff70\050\uff70\051\uff70\052\uff70\053\uff70\054" +
    "\uff70\056\uff70\057\uff70\060\uff70\061\uff70\062\uff70\064\uff70" +
    "\065\uff70\066\uff70\067\uff70\070\uff70\071\uff70\105\uff70\111" +
    "\uff70\117\uff70\121\uff70\001\002\000\046\047\270\050\271" +
    "\051\266\052\260\053\273\054\255\056\256\057\267\060" +
    "\275\061\257\062\274\064\261\065\272\066\264\067\265" +
    "\070\263\071\262\111\323\001\002\000\036\013\114\014" +
    "\121\035\074\043\102\044\050\055\251\063\243\065\253" +
    "\105\247\106\115\107\125\110\246\112\117\113\116\001" +
    "\002\000\136\003\uff6e\006\uff6e\007\uff6e\010\uff6e\011\uff6e" +
    "\012\uff6e\015\uff6e\016\uff6e\017\uff6e\021\uff6e\023\uff6e\024" +
    "\uff6e\026\uff6e\027\uff6e\030\uff6e\031\uff6e\032\uff6e\034\uff6e" +
    "\035\uff6e\043\uff6e\044\uff6e\045\uff6e\046\uff6e\047\uff6e\050" +
    "\uff6e\051\uff6e\052\uff6e\053\uff6e\054\uff6e\056\uff6e\057\uff6e" +
    "\060\uff6e\061\uff6e\062\uff6e\064\uff6e\065\uff6e\066\uff6e\067" +
    "\uff6e\070\uff6e\071\uff6e\075\145\105\uff6e\110\144\111\uff6e" +
    "\117\uff6e\121\uff6e\001\002\000\132\003\uff6d\006\uff6d\007" +
    "\uff6d\010\uff6d\011\uff6d\012\uff6d\015\uff6d\016\uff6d\017\uff6d" +
    "\021\uff6d\023\uff6d\024\uff6d\026\uff6d\027\uff6d\030\uff6d\031" +
    "\uff6d\032\uff6d\034\uff6d\035\uff6d\043\uff6d\044\uff6d\045\uff6d" +
    "\046\uff6d\047\uff6d\050\uff6d\051\uff6d\052\uff6d\053\uff6d\054" +
    "\uff6d\056\uff6d\057\uff6d\060\uff6d\061\uff6d\062\uff6d\064\uff6d" +
    "\065\uff6d\066\uff6d\067\uff6d\070\uff6d\071\uff6d\105\uff6d\111" +
    "\uff6d\117\uff6d\121\uff6d\001\002\000\004\105\317\001\002" +
    "\000\132\003\uff69\006\uff69\007\uff69\010\uff69\011\uff69\012" +
    "\uff69\015\uff69\016\uff69\017\uff69\021\uff69\023\uff69\024\uff69" +
    "\026\uff69\027\uff69\030\uff69\031\uff69\032\uff69\034\uff69\035" +
    "\uff69\043\uff69\044\uff69\045\uff69\046\uff69\047\uff69\050\uff69" +
    "\051\uff69\052\uff69\053\uff69\054\uff69\056\uff69\057\uff69\060" +
    "\uff69\061\uff69\062\uff69\064\uff69\065\uff69\066\uff69\067\uff69" +
    "\070\uff69\071\uff69\105\uff69\111\uff69\117\uff69\121\uff69\001" +
    "\002\000\036\013\114\014\121\035\074\043\102\044\050" +
    "\055\251\063\243\065\253\105\247\106\115\107\125\110" +
    "\246\112\117\113\116\001\002\000\132\003\uff7c\006\uff7c" +
    "\007\uff7c\010\uff7c\011\uff7c\012\uff7c\015\uff7c\016\uff7c\017" +
    "\uff7c\021\uff7c\023\uff7c\024\uff7c\026\uff7c\027\uff7c\030\uff7c" +
    "\031\uff7c\032\uff7c\034\uff7c\035\uff7c\043\uff7c\044\uff7c\045" +
    "\uff7c\046\uff7c\047\270\050\271\051\266\052\260\053\273" +
    "\054\255\056\256\057\267\060\275\061\257\062\274\064" +
    "\uff7c\065\uff7c\066\uff7c\067\uff7c\070\uff7c\071\uff7c\105\uff7c" +
    "\111\uff7c\117\uff7c\121\uff7c\001\002\000\036\013\114\014" +
    "\121\035\074\043\102\044\050\055\251\063\243\065\253" +
    "\105\247\106\115\107\125\110\246\112\117\113\116\001" +
    "\002\000\036\013\114\014\121\035\074\043\102\044\050" +
    "\055\251\063\243\065\253\105\247\106\115\107\125\110" +
    "\246\112\117\113\116\001\002\000\036\013\114\014\121" +
    "\035\074\043\102\044\050\055\251\063\243\065\253\105" +
    "\247\106\115\107\125\110\246\112\117\113\116\001\002" +
    "\000\036\013\114\014\121\035\074\043\102\044\050\055" +
    "\251\063\243\065\253\105\247\106\115\107\125\110\246" +
    "\112\117\113\116\001\002\000\036\013\114\014\121\035" +
    "\074\043\102\044\050\055\251\063\243\065\253\105\247" +
    "\106\115\107\125\110\246\112\117\113\116\001\002\000" +
    "\036\013\114\014\121\035\074\043\102\044\050\055\251" +
    "\063\243\065\253\105\247\106\115\107\125\110\246\112" +
    "\117\113\116\001\002\000\036\013\114\014\121\035\074" +
    "\043\102\044\050\055\251\063\243\065\253\105\247\106" +
    "\115\107\125\110\246\112\117\113\116\001\002\000\036" +
    "\013\114\014\121\035\074\043\102\044\050\055\251\063" +
    "\243\065\253\105\247\106\115\107\125\110\246\112\117" +
    "\113\116\001\002\000\036\013\114\014\121\035\074\043" +
    "\102\044\050\055\251\063\243\065\253\105\247\106\115" +
    "\107\125\110\246\112\117\113\116\001\002\000\036\013" +
    "\114\014\121\035\074\043\102\044\050\055\251\063\243" +
    "\065\253\105\247\106\115\107\125\110\246\112\117\113" +
    "\116\001\002\000\036\013\114\014\121\035\074\043\102" +
    "\044\050\055\251\063\243\065\253\105\247\106\115\107" +
    "\125\110\246\112\117\113\116\001\002\000\036\013\114" +
    "\014\121\035\074\043\102\044\050\055\251\063\243\065" +
    "\253\105\247\106\115\107\125\110\246\112\117\113\116" +
    "\001\002\000\036\013\114\014\121\035\074\043\102\044" +
    "\050\055\251\063\243\065\253\105\247\106\115\107\125" +
    "\110\246\112\117\113\116\001\002\000\036\013\114\014" +
    "\121\035\074\043\102\044\050\055\251\063\243\065\253" +
    "\105\247\106\115\107\125\110\246\112\117\113\116\001" +
    "\002\000\036\013\114\014\121\035\074\043\102\044\050" +
    "\055\251\063\243\065\253\105\247\106\115\107\125\110" +
    "\246\112\117\113\116\001\002\000\036\013\114\014\121" +
    "\035\074\043\102\044\050\055\251\063\243\065\253\105" +
    "\247\106\115\107\125\110\246\112\117\113\116\001\002" +
    "\000\036\013\114\014\121\035\074\043\102\044\050\055" +
    "\251\063\243\065\253\105\247\106\115\107\125\110\246" +
    "\112\117\113\116\001\002\000\132\003\uff74\006\uff74\007" +
    "\uff74\010\uff74\011\uff74\012\uff74\015\uff74\016\uff74\017\uff74" +
    "\021\uff74\023\uff74\024\uff74\026\uff74\027\uff74\030\uff74\031" +
    "\uff74\032\uff74\034\uff74\035\uff74\043\uff74\044\uff74\045\uff74" +
    "\046\uff74\047\270\050\271\051\266\052\260\053\273\054" +
    "\255\056\256\057\267\060\uff74\061\uff74\062\uff74\064\uff74" +
    "\065\uff74\066\uff74\067\uff74\070\uff74\071\uff74\105\uff74\111" +
    "\uff74\117\uff74\121\uff74\001\002\000\132\003\uff71\006\uff71" +
    "\007\uff71\010\uff71\011\uff71\012\uff71\015\uff71\016\uff71\017" +
    "\uff71\021\uff71\023\uff71\024\uff71\026\uff71\027\uff71\030\uff71" +
    "\031\uff71\032\uff71\034\uff71\035\uff71\043\uff71\044\uff71\045" +
    "\uff71\046\uff71\047\270\050\271\051\266\052\260\053\273" +
    "\054\255\056\256\057\267\060\uff71\061\uff71\062\uff71\064" +
    "\uff71\065\uff71\066\uff71\067\uff71\070\uff71\071\uff71\105\uff71" +
    "\111\uff71\117\uff71\121\uff71\001\002\000\132\003\uff78\006" +
    "\uff78\007\uff78\010\uff78\011\uff78\012\uff78\015\uff78\016\uff78" +
    "\017\uff78\021\uff78\023\uff78\024\uff78\026\uff78\027\uff78\030" +
    "\uff78\031\uff78\032\uff78\034\uff78\035\uff78\043\uff78\044\uff78" +
    "\045\uff78\046\uff78\047\uff78\050\uff78\051\uff78\052\uff78\053" +
    "\uff78\054\uff78\056\uff78\057\uff78\060\uff78\061\uff78\062\uff78" +
    "\064\uff78\065\uff78\066\uff78\067\uff78\070\uff78\071\uff78\105" +
    "\uff78\111\uff78\117\uff78\121\uff78\001\002\000\132\003\uff81" +
    "\006\uff81\007\uff81\010\uff81\011\uff81\012\uff81\015\uff81\016" +
    "\uff81\017\uff81\021\uff81\023\uff81\024\uff81\026\uff81\027\uff81" +
    "\030\uff81\031\uff81\032\uff81\034\uff81\035\uff81\043\uff81\044" +
    "\uff81\045\uff81\046\uff81\047\270\050\271\051\266\052\260" +
    "\053\273\054\255\056\256\057\267\060\275\061\257\062" +
    "\274\064\uff81\065\uff81\066\264\067\265\070\263\071\262" +
    "\105\uff81\111\uff81\117\uff81\121\uff81\001\002\000\132\003" +
    "\uff76\006\uff76\007\uff76\010\uff76\011\uff76\012\uff76\015\uff76" +
    "\016\uff76\017\uff76\021\uff76\023\uff76\024\uff76\026\uff76\027" +
    "\uff76\030\uff76\031\uff76\032\uff76\034\uff76\035\uff76\043\uff76" +
    "\044\uff76\045\uff76\046\uff76\047\uff76\050\uff76\051\uff76\052" +
    "\uff76\053\uff76\054\uff76\056\uff76\057\uff76\060\uff76\061\uff76" +
    "\062\uff76\064\uff76\065\uff76\066\uff76\067\uff76\070\uff76\071" +
    "\uff76\105\uff76\111\uff76\117\uff76\121\uff76\001\002\000\132" +
    "\003\uff77\006\uff77\007\uff77\010\uff77\011\uff77\012\uff77\015" +
    "\uff77\016\uff77\017\uff77\021\uff77\023\uff77\024\uff77\026\uff77" +
    "\027\uff77\030\uff77\031\uff77\032\uff77\034\uff77\035\uff77\043" +
    "\uff77\044\uff77\045\uff77\046\uff77\047\uff77\050\uff77\051\uff77" +
    "\052\uff77\053\uff77\054\uff77\056\uff77\057\uff77\060\uff77\061" +
    "\uff77\062\uff77\064\uff77\065\uff77\066\uff77\067\uff77\070\uff77" +
    "\071\uff77\105\uff77\111\uff77\117\uff77\121\uff77\001\002\000" +
    "\132\003\uff72\006\uff72\007\uff72\010\uff72\011\uff72\012\uff72" +
    "\015\uff72\016\uff72\017\uff72\021\uff72\023\uff72\024\uff72\026" +
    "\uff72\027\uff72\030\uff72\031\uff72\032\uff72\034\uff72\035\uff72" +
    "\043\uff72\044\uff72\045\uff72\046\uff72\047\270\050\271\051" +
    "\266\052\260\053\273\054\255\056\uff72\057\uff72\060\uff72" +
    "\061\uff72\062\uff72\064\uff72\065\uff72\066\uff72\067\uff72\070" +
    "\uff72\071\uff72\105\uff72\111\uff72\117\uff72\121\uff72\001\002" +
    "\000\132\003\uff7b\006\uff7b\007\uff7b\010\uff7b\011\uff7b\012" +
    "\uff7b\015\uff7b\016\uff7b\017\uff7b\021\uff7b\023\uff7b\024\uff7b" +
    "\026\uff7b\027\uff7b\030\uff7b\031\uff7b\032\uff7b\034\uff7b\035" +
    "\uff7b\043\uff7b\044\uff7b\045\uff7b\046\uff7b\047\uff7b\050\uff7b" +
    "\051\uff7b\052\uff7b\053\uff7b\054\uff7b\056\uff7b\057\uff7b\060" +
    "\uff7b\061\uff7b\062\uff7b\064\uff7b\065\uff7b\066\uff7b\067\uff7b" +
    "\070\uff7b\071\uff7b\105\uff7b\111\uff7b\117\uff7b\121\uff7b\001" +
    "\002\000\132\003\uff7f\006\uff7f\007\uff7f\010\uff7f\011\uff7f" +
    "\012\uff7f\015\uff7f\016\uff7f\017\uff7f\021\uff7f\023\uff7f\024" +
    "\uff7f\026\uff7f\027\uff7f\030\uff7f\031\uff7f\032\uff7f\034\uff7f" +
    "\035\uff7f\043\uff7f\044\uff7f\045\uff7f\046\uff7f\047\270\050" +
    "\271\051\266\052\260\053\273\054\255\056\256\057\267" +
    "\060\275\061\257\062\274\064\uff7f\065\uff7f\066\uff7f\067" +
    "\uff7f\070\uff7f\071\262\105\uff7f\111\uff7f\117\uff7f\121\uff7f" +
    "\001\002\000\132\003\uff80\006\uff80\007\uff80\010\uff80\011" +
    "\uff80\012\uff80\015\uff80\016\uff80\017\uff80\021\uff80\023\uff80" +
    "\024\uff80\026\uff80\027\uff80\030\uff80\031\uff80\032\uff80\034" +
    "\uff80\035\uff80\043\uff80\044\uff80\045\uff80\046\uff80\047\270" +
    "\050\271\051\266\052\260\053\273\054\255\056\256\057" +
    "\267\060\275\061\257\062\274\064\uff80\065\uff80\066\uff80" +
    "\067\uff80\070\uff80\071\262\105\uff80\111\uff80\117\uff80\121" +
    "\uff80\001\002\000\132\003\uff7d\006\uff7d\007\uff7d\010\uff7d" +
    "\011\uff7d\012\uff7d\015\uff7d\016\uff7d\017\uff7d\021\uff7d\023" +
    "\uff7d\024\uff7d\026\uff7d\027\uff7d\030\uff7d\031\uff7d\032\uff7d" +
    "\034\uff7d\035\uff7d\043\uff7d\044\uff7d\045\uff7d\046\uff7d\047" +
    "\270\050\271\051\266\052\260\053\273\054\255\056\256" +
    "\057\267\060\275\061\257\062\274\064\uff7d\065\uff7d\066" +
    "\uff7d\067\uff7d\070\uff7d\071\262\105\uff7d\111\uff7d\117\uff7d" +
    "\121\uff7d\001\002\000\132\003\uff7e\006\uff7e\007\uff7e\010" +
    "\uff7e\011\uff7e\012\uff7e\015\uff7e\016\uff7e\017\uff7e\021\uff7e" +
    "\023\uff7e\024\uff7e\026\uff7e\027\uff7e\030\uff7e\031\uff7e\032" +
    "\uff7e\034\uff7e\035\uff7e\043\uff7e\044\uff7e\045\uff7e\046\uff7e" +
    "\047\270\050\271\051\266\052\260\053\273\054\255\056" +
    "\256\057\267\060\275\061\257\062\274\064\uff7e\065\uff7e" +
    "\066\uff7e\067\uff7e\070\uff7e\071\uff7e\105\uff7e\111\uff7e\117" +
    "\uff7e\121\uff7e\001\002\000\132\003\uff82\006\uff82\007\uff82" +
    "\010\uff82\011\uff82\012\uff82\015\uff82\016\uff82\017\uff82\021" +
    "\uff82\023\uff82\024\uff82\026\uff82\027\uff82\030\uff82\031\uff82" +
    "\032\uff82\034\uff82\035\uff82\043\uff82\044\uff82\045\uff82\046" +
    "\uff82\047\270\050\271\051\266\052\260\053\273\054\255" +
    "\056\256\057\267\060\275\061\257\062\274\064\uff82\065" +
    "\uff82\066\264\067\265\070\263\071\262\105\uff82\111\uff82" +
    "\117\uff82\121\uff82\001\002\000\132\003\uff7a\006\uff7a\007" +
    "\uff7a\010\uff7a\011\uff7a\012\uff7a\015\uff7a\016\uff7a\017\uff7a" +
    "\021\uff7a\023\uff7a\024\uff7a\026\uff7a\027\uff7a\030\uff7a\031" +
    "\uff7a\032\uff7a\034\uff7a\035\uff7a\043\uff7a\044\uff7a\045\uff7a" +
    "\046\uff7a\047\uff7a\050\uff7a\051\uff7a\052\uff7a\053\uff7a\054" +
    "\uff7a\056\uff7a\057\uff7a\060\uff7a\061\uff7a\062\uff7a\064\uff7a" +
    "\065\uff7a\066\uff7a\067\uff7a\070\uff7a\071\uff7a\105\uff7a\111" +
    "\uff7a\117\uff7a\121\uff7a\001\002\000\132\003\uff73\006\uff73" +
    "\007\uff73\010\uff73\011\uff73\012\uff73\015\uff73\016\uff73\017" +
    "\uff73\021\uff73\023\uff73\024\uff73\026\uff73\027\uff73\030\uff73" +
    "\031\uff73\032\uff73\034\uff73\035\uff73\043\uff73\044\uff73\045" +
    "\uff73\046\uff73\047\270\050\271\051\266\052\260\053\273" +
    "\054\255\056\256\057\267\060\uff73\061\uff73\062\uff73\064" +
    "\uff73\065\uff73\066\uff73\067\uff73\070\uff73\071\uff73\105\uff73" +
    "\111\uff73\117\uff73\121\uff73\001\002\000\132\003\uff75\006" +
    "\uff75\007\uff75\010\uff75\011\uff75\012\uff75\015\uff75\016\uff75" +
    "\017\uff75\021\uff75\023\uff75\024\uff75\026\uff75\027\uff75\030" +
    "\uff75\031\uff75\032\uff75\034\uff75\035\uff75\043\uff75\044\uff75" +
    "\045\uff75\046\uff75\047\270\050\271\051\266\052\260\053" +
    "\273\054\255\056\uff75\057\uff75\060\uff75\061\uff75\062\uff75" +
    "\064\uff75\065\uff75\066\uff75\067\uff75\070\uff75\071\uff75\105" +
    "\uff75\111\uff75\117\uff75\121\uff75\001\002\000\132\003\uff79" +
    "\006\uff79\007\uff79\010\uff79\011\uff79\012\uff79\015\uff79\016" +
    "\uff79\017\uff79\021\uff79\023\uff79\024\uff79\026\uff79\027\uff79" +
    "\030\uff79\031\uff79\032\uff79\034\uff79\035\uff79\043\uff79\044" +
    "\uff79\045\uff79\046\uff79\047\uff79\050\uff79\051\uff79\052\uff79" +
    "\053\uff79\054\uff79\056\uff79\057\uff79\060\uff79\061\uff79\062" +
    "\uff79\064\uff79\065\uff79\066\uff79\067\uff79\070\uff79\071\uff79" +
    "\105\uff79\111\uff79\117\uff79\121\uff79\001\002\000\132\003" +
    "\uff6a\006\uff6a\007\uff6a\010\uff6a\011\uff6a\012\uff6a\015\uff6a" +
    "\016\uff6a\017\uff6a\021\uff6a\023\uff6a\024\uff6a\026\uff6a\027" +
    "\uff6a\030\uff6a\031\uff6a\032\uff6a\034\uff6a\035\uff6a\043\uff6a" +
    "\044\uff6a\045\uff6a\046\uff6a\047\uff6a\050\uff6a\051\uff6a\052" +
    "\uff6a\053\uff6a\054\uff6a\056\uff6a\057\uff6a\060\uff6a\061\uff6a" +
    "\062\uff6a\064\uff6a\065\uff6a\066\uff6a\067\uff6a\070\uff6a\071" +
    "\uff6a\105\uff6a\111\uff6a\117\uff6a\121\uff6a\001\002\000\134" +
    "\003\uff6c\006\uff6c\007\uff6c\010\uff6c\011\uff6c\012\uff6c\015" +
    "\uff6c\016\uff6c\017\uff6c\021\uff6c\023\uff6c\024\uff6c\026\uff6c" +
    "\027\uff6c\030\uff6c\031\uff6c\032\uff6c\034\uff6c\035\uff6c\043" +
    "\uff6c\044\uff6c\045\uff6c\046\uff6c\047\uff6c\050\uff6c\051\uff6c" +
    "\052\uff6c\053\uff6c\054\uff6c\056\uff6c\057\uff6c\060\uff6c\061" +
    "\uff6c\062\uff6c\064\uff6c\065\uff6c\066\uff6c\067\uff6c\070\uff6c" +
    "\071\uff6c\075\145\105\uff6c\111\uff6c\117\uff6c\121\uff6c\001" +
    "\002\000\046\047\270\050\271\051\266\052\260\053\273" +
    "\054\255\056\256\057\267\060\275\061\257\062\274\064" +
    "\261\065\272\066\264\067\265\070\263\071\262\111\322" +
    "\001\002\000\132\003\uff6f\006\uff6f\007\uff6f\010\uff6f\011" +
    "\uff6f\012\uff6f\015\uff6f\016\uff6f\017\uff6f\021\uff6f\023\uff6f" +
    "\024\uff6f\026\uff6f\027\uff6f\030\uff6f\031\uff6f\032\uff6f\034" +
    "\uff6f\035\uff6f\043\uff6f\044\uff6f\045\uff6f\046\uff6f\047\uff6f" +
    "\050\uff6f\051\uff6f\052\uff6f\053\uff6f\054\uff6f\056\uff6f\057" +
    "\uff6f\060\uff6f\061\uff6f\062\uff6f\064\uff6f\065\uff6f\066\uff6f" +
    "\067\uff6f\070\uff6f\071\uff6f\105\uff6f\111\uff6f\117\uff6f\121" +
    "\uff6f\001\002\000\050\003\uff56\015\uff56\016\uff56\017\uff56" +
    "\021\uff56\023\uff56\024\uff56\026\uff56\027\uff56\030\uff56\031" +
    "\uff56\032\uff56\034\uff56\035\uff56\043\uff56\044\uff56\045\uff56" +
    "\105\uff56\117\uff56\001\002\000\132\003\uff6b\006\uff6b\007" +
    "\uff6b\010\uff6b\011\uff6b\012\uff6b\015\uff6b\016\uff6b\017\uff6b" +
    "\021\uff6b\023\uff6b\024\uff6b\026\uff6b\027\uff6b\030\uff6b\031" +
    "\uff6b\032\uff6b\034\uff6b\035\uff6b\043\uff6b\044\uff6b\045\uff6b" +
    "\046\uff6b\047\270\050\271\051\266\052\260\053\273\054" +
    "\255\056\uff6b\057\uff6b\060\uff6b\061\uff6b\062\uff6b\064\uff6b" +
    "\065\uff6b\066\uff6b\067\uff6b\070\uff6b\071\uff6b\105\uff6b\111" +
    "\uff6b\117\uff6b\121\uff6b\001\002\000\036\013\114\014\121" +
    "\035\074\043\102\044\050\055\251\063\243\065\253\105" +
    "\247\106\115\107\125\110\246\112\117\113\116\001\002" +
    "\000\046\047\270\050\271\051\266\052\260\053\273\054" +
    "\255\056\256\057\267\060\275\061\257\062\274\064\261" +
    "\065\272\066\264\067\265\070\263\071\262\111\327\001" +
    "\002\000\004\116\330\001\002\000\050\003\uffe9\015\uffe9" +
    "\016\uffe9\017\uffe9\021\uffe9\023\uffe9\024\uffe9\026\uffe9\027" +
    "\uffe9\030\uffe9\031\uffe9\032\uffe9\034\uffe9\035\uffe9\043\uffe9" +
    "\044\uffe9\045\uffe9\105\uffe9\117\uffe9\001\002\000\050\003" +
    "\100\015\052\016\023\017\077\021\060\023\047\024\067" +
    "\026\062\027\105\030\106\031\075\032\101\034\110\035" +
    "\074\043\102\044\050\045\057\105\063\117\332\001\002" +
    "\000\050\003\uff57\015\uff57\016\uff57\017\uff57\021\uff57\023" +
    "\uff57\024\uff57\026\uff57\027\uff57\030\uff57\031\uff57\032\uff57" +
    "\034\uff57\035\uff57\043\uff57\044\uff57\045\uff57\105\uff57\117" +
    "\uff57\001\002\000\006\101\336\105\334\001\002\000\006" +
    "\100\uff5e\111\uff5e\001\002\000\004\111\350\001\002\000" +
    "\034\013\114\014\121\035\074\043\102\044\050\065\124" +
    "\101\341\105\123\106\115\107\125\110\113\112\117\113" +
    "\116\001\002\000\022\064\133\065\130\066\135\067\132" +
    "\070\131\071\134\100\uffc4\102\uffc4\001\002\000\006\100" +
    "\344\102\347\001\002\000\034\013\114\014\121\035\074" +
    "\043\102\044\050\065\124\101\341\105\123\106\115\107" +
    "\125\110\113\112\117\113\116\001\002\000\006\100\uffc5" +
    "\102\uffc5\001\002\000\006\100\344\102\345\001\002\000" +
    "\034\013\114\014\121\035\074\043\102\044\050\065\124" +
    "\101\341\105\123\106\115\107\125\110\113\112\117\113" +
    "\116\001\002\000\006\100\uffc3\102\uffc3\001\002\000\006" +
    "\100\uffc6\102\uffc6\001\002\000\006\100\uff5d\111\uff5d\001" +
    "\002\000\140\003\uff67\006\uff67\007\uff67\010\uff67\011\uff67" +
    "\012\uff67\015\uff67\016\uff67\017\uff67\021\uff67\023\uff67\024" +
    "\uff67\026\uff67\027\uff67\030\uff67\031\uff67\032\uff67\034\uff67" +
    "\035\uff67\043\uff67\044\uff67\045\uff67\046\uff67\047\uff67\050" +
    "\uff67\051\uff67\052\uff67\053\uff67\054\uff67\056\uff67\057\uff67" +
    "\060\uff67\061\uff67\062\uff67\064\uff67\065\uff67\066\uff67\067" +
    "\uff67\070\uff67\071\uff67\076\uff67\100\uff67\102\uff67\105\uff67" +
    "\111\uff67\117\uff67\121\uff67\001\002\000\004\033\352\001" +
    "\002\000\004\100\353\001\002\000\032\013\114\014\121" +
    "\035\074\043\102\044\050\065\124\105\123\106\115\107" +
    "\125\110\113\112\117\113\116\001\002\000\020\064\133" +
    "\065\130\066\135\067\132\070\131\071\134\100\355\001" +
    "\002\000\032\013\114\014\121\035\074\043\102\044\050" +
    "\065\124\105\123\106\115\107\125\110\113\112\117\113" +
    "\116\001\002\000\020\064\133\065\130\066\135\067\132" +
    "\070\131\071\134\100\357\001\002\000\032\013\114\014" +
    "\121\035\074\043\102\044\050\065\124\105\123\106\115" +
    "\107\125\110\113\112\117\113\116\001\002\000\020\064" +
    "\133\065\130\066\135\067\132\070\131\071\134\111\361" +
    "\001\002\000\050\003\uff55\015\uff55\016\uff55\017\uff55\021" +
    "\uff55\023\uff55\024\uff55\026\uff55\027\uff55\030\uff55\031\uff55" +
    "\032\uff55\034\uff55\035\uff55\043\uff55\044\uff55\045\uff55\105" +
    "\uff55\117\uff55\001\002\000\036\013\114\014\121\035\074" +
    "\043\102\044\050\055\251\063\243\065\253\105\247\106" +
    "\115\107\125\110\246\112\117\113\116\001\002\000\046" +
    "\047\270\050\271\051\266\052\260\053\273\054\255\056" +
    "\256\057\267\060\275\061\257\062\274\064\261\065\272" +
    "\066\264\067\265\070\263\071\262\111\364\001\002\000" +
    "\004\116\365\001\002\000\050\003\uffe9\015\uffe9\016\uffe9" +
    "\017\uffe9\021\uffe9\023\uffe9\024\uffe9\026\uffe9\027\uffe9\030" +
    "\uffe9\031\uffe9\032\uffe9\034\uffe9\035\uffe9\043\uffe9\044\uffe9" +
    "\045\uffe9\105\uffe9\117\uffe9\001\002\000\050\003\100\015" +
    "\052\016\023\017\077\021\060\023\047\024\067\026\062" +
    "\027\105\030\106\031\075\032\101\034\110\035\074\043" +
    "\102\044\050\045\057\105\063\117\367\001\002\000\052" +
    "\003\uffcf\015\uffcf\016\uffcf\017\uffcf\020\370\021\uffcf\023" +
    "\uffcf\024\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf" +
    "\034\uffcf\035\uffcf\043\uffcf\044\uffcf\045\uffcf\105\uffcf\117" +
    "\uffcf\001\002\000\006\017\077\116\372\001\002\000\050" +
    "\003\uffcd\015\uffcd\016\uffcd\017\uffcd\021\uffcd\023\uffcd\024" +
    "\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\034\uffcd" +
    "\035\uffcd\043\uffcd\044\uffcd\045\uffcd\105\uffcd\117\uffcd\001" +
    "\002\000\050\003\uffe9\015\uffe9\016\uffe9\017\uffe9\021\uffe9" +
    "\023\uffe9\024\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032" +
    "\uffe9\034\uffe9\035\uffe9\043\uffe9\044\uffe9\045\uffe9\105\uffe9" +
    "\117\uffe9\001\002\000\050\003\100\015\052\016\023\017" +
    "\077\021\060\023\047\024\067\026\062\027\105\030\106" +
    "\031\075\032\101\034\110\035\074\043\102\044\050\045" +
    "\057\105\063\117\374\001\002\000\050\003\uffce\015\uffce" +
    "\016\uffce\017\uffce\021\uffce\023\uffce\024\uffce\026\uffce\027" +
    "\uffce\030\uffce\031\uffce\032\uffce\034\uffce\035\uffce\043\uffce" +
    "\044\uffce\045\uffce\105\uffce\117\uffce\001\002\000\112\003" +
    "\uffde\015\uffde\016\uffde\017\uffde\021\uffde\023\uffde\024\uffde" +
    "\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\034\uffde\035" +
    "\uffde\043\uffde\044\uffde\045\uffde\047\270\050\271\051\266" +
    "\052\260\053\273\054\255\056\256\057\267\060\275\061" +
    "\257\062\274\064\261\065\272\066\264\067\265\070\263" +
    "\071\262\105\uffde\117\uffde\001\002\000\006\101\336\105" +
    "\334\001\002\000\004\100\u0100\001\002\000\014\036\u0104" +
    "\037\u0103\040\u0102\041\u0101\042\u0105\001\002\000\004\111" +
    "\uff62\001\002\000\004\111\uff63\001\002\000\004\111\uff64" +
    "\001\002\000\004\111\uff65\001\002\000\004\111\uff61\001" +
    "\002\000\004\111\u0107\001\002\000\140\003\uff68\006\uff68" +
    "\007\uff68\010\uff68\011\uff68\012\uff68\015\uff68\016\uff68\017" +
    "\uff68\021\uff68\023\uff68\024\uff68\026\uff68\027\uff68\030\uff68" +
    "\031\uff68\032\uff68\034\uff68\035\uff68\043\uff68\044\uff68\045" +
    "\uff68\046\uff68\047\uff68\050\uff68\051\uff68\052\uff68\053\uff68" +
    "\054\uff68\056\uff68\057\uff68\060\uff68\061\uff68\062\uff68\064" +
    "\uff68\065\uff68\066\uff68\067\uff68\070\uff68\071\uff68\076\uff68" +
    "\100\uff68\102\uff68\105\uff68\111\uff68\117\uff68\121\uff68\001" +
    "\002\000\032\013\114\014\121\035\074\043\102\044\050" +
    "\065\124\105\123\106\115\107\125\110\113\112\117\113" +
    "\116\001\002\000\050\003\uffd3\015\uffd3\016\uffd3\017\uffd3" +
    "\021\uffd3\023\uffd3\024\uffd3\026\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\032\uffd3\034\uffd3\035\uffd3\043\uffd3\044\uffd3\045\uffd3" +
    "\105\uffd3\117\uffd3\001\002\000\006\075\145\114\u010e\001" +
    "\002\000\050\003\uffd2\015\uffd2\016\uffd2\017\uffd2\021\uffd2" +
    "\023\uffd2\024\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032" +
    "\uffd2\034\uffd2\035\uffd2\043\uffd2\044\uffd2\045\uffd2\105\uffd2" +
    "\117\uffd2\001\002\000\036\013\114\014\121\035\074\043" +
    "\102\044\050\055\251\063\243\065\253\105\247\106\115" +
    "\107\125\110\246\112\117\113\116\001\002\000\112\003" +
    "\uffb8\015\uffb8\016\uffb8\017\uffb8\021\uffb8\023\uffb8\024\uffb8" +
    "\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\034\uffb8\035" +
    "\uffb8\043\uffb8\044\uffb8\045\uffb8\047\270\050\271\051\266" +
    "\052\260\053\273\054\255\056\256\057\267\060\275\061" +
    "\257\062\274\064\261\065\272\066\264\067\265\070\263" +
    "\071\262\105\uffb8\117\uffb8\001\002\000\036\013\114\014" +
    "\121\035\074\043\102\044\050\055\251\063\243\065\253" +
    "\105\247\106\115\107\125\110\246\112\117\113\116\001" +
    "\002\000\112\003\uffb7\015\uffb7\016\uffb7\017\uffb7\021\uffb7" +
    "\023\uffb7\024\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032" +
    "\uffb7\034\uffb7\035\uffb7\043\uffb7\044\uffb7\045\uffb7\047\270" +
    "\050\271\051\266\052\260\053\273\054\255\056\256\057" +
    "\267\060\275\061\257\062\274\064\261\065\272\066\264" +
    "\067\265\070\263\071\262\105\uffb7\117\uffb7\001\002\000" +
    "\064\003\uffd4\015\uffd4\016\uffd4\017\uffd4\021\uffd4\023\uffd4" +
    "\024\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\034" +
    "\uffd4\035\uffd4\043\uffd4\044\uffd4\045\uffd4\064\133\065\130" +
    "\066\135\067\132\070\131\071\134\105\uffd4\117\uffd4\001" +
    "\002\000\006\006\u0114\105\u0112\001\002\000\004\121\uffbb" +
    "\001\002\000\004\121\u0118\001\002\000\004\105\u0115\001" +
    "\002\000\004\114\u0116\001\002\000\004\112\u0117\001\002" +
    "\000\004\121\uffbc\001\002\000\036\013\114\014\121\035" +
    "\074\043\102\044\050\055\251\063\243\065\253\105\247" +
    "\106\115\107\125\110\246\112\117\113\116\001\002\000" +
    "\046\047\270\050\271\051\266\052\260\053\273\054\255" +
    "\056\256\057\267\060\275\061\257\062\274\064\261\065" +
    "\272\066\264\067\265\070\263\071\262\121\u011a\001\002" +
    "\000\004\112\u011b\001\002\000\006\072\u011d\073\u011c\001" +
    "\002\000\004\111\uffbe\001\002\000\004\111\uffbd\001\002" +
    "\000\004\111\u011f\001\002\000\004\116\u0120\001\002\000" +
    "\050\003\uffe9\015\uffe9\016\uffe9\017\uffe9\021\uffe9\023\uffe9" +
    "\024\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\034" +
    "\uffe9\035\uffe9\043\uffe9\044\uffe9\045\uffe9\105\uffe9\117\uffe9" +
    "\001\002\000\050\003\100\015\052\016\023\017\077\021" +
    "\060\023\047\024\067\026\062\027\105\030\106\031\075" +
    "\032\101\034\110\035\074\043\102\044\050\045\057\105" +
    "\063\117\u0122\001\002\000\050\003\uffbf\015\uffbf\016\uffbf" +
    "\017\uffbf\021\uffbf\023\uffbf\024\uffbf\026\uffbf\027\uffbf\030" +
    "\uffbf\031\uffbf\032\uffbf\034\uffbf\035\uffbf\043\uffbf\044\uffbf" +
    "\045\uffbf\105\uffbf\117\uffbf\001\002\000\004\105\u0124\001" +
    "\002\000\004\111\u0125\001\002\000\004\116\u0126\001\002" +
    "\000\006\022\u012b\025\u0127\001\002\000\004\116\u0135\001" +
    "\002\000\004\117\u0134\001\002\000\010\022\u012b\025\u0127" +
    "\117\u0131\001\002\000\010\022\uffad\025\uffad\117\uffad\001" +
    "\002\000\016\013\114\014\121\106\115\107\125\112\117" +
    "\113\116\001\002\000\004\116\u012d\001\002\000\050\003" +
    "\uffe9\015\uffe9\016\uffe9\017\uffe9\021\uffe9\023\uffe9\024\uffe9" +
    "\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\034\uffe9\035" +
    "\uffe9\043\uffe9\044\uffe9\045\uffe9\105\uffe9\117\uffe9\001\002" +
    "\000\050\003\100\015\052\016\023\017\077\021\060\023" +
    "\047\024\067\026\062\027\105\030\106\031\075\032\101" +
    "\034\110\035\074\043\102\044\050\045\057\105\063\117" +
    "\u012f\001\002\000\010\022\uffac\025\uffac\117\uffac\001\002" +
    "\000\004\117\u0133\001\002\000\050\003\uffb1\015\uffb1\016" +
    "\uffb1\017\uffb1\021\uffb1\023\uffb1\024\uffb1\026\uffb1\027\uffb1" +
    "\030\uffb1\031\uffb1\032\uffb1\034\uffb1\035\uffb1\043\uffb1\044" +
    "\uffb1\045\uffb1\105\uffb1\117\uffb1\001\002\000\010\022\uffae" +
    "\025\uffae\117\uffae\001\002\000\050\003\uffb0\015\uffb0\016" +
    "\uffb0\017\uffb0\021\uffb0\023\uffb0\024\uffb0\026\uffb0\027\uffb0" +
    "\030\uffb0\031\uffb0\032\uffb0\034\uffb0\035\uffb0\043\uffb0\044" +
    "\uffb0\045\uffb0\105\uffb0\117\uffb0\001\002\000\050\003\uffaf" +
    "\015\uffaf\016\uffaf\017\uffaf\021\uffaf\023\uffaf\024\uffaf\026" +
    "\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\034\uffaf\035\uffaf" +
    "\043\uffaf\044\uffaf\045\uffaf\105\uffaf\117\uffaf\001\002\000" +
    "\050\003\uffe9\015\uffe9\016\uffe9\017\uffe9\021\uffe9\023\uffe9" +
    "\024\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\034" +
    "\uffe9\035\uffe9\043\uffe9\044\uffe9\045\uffe9\105\uffe9\117\uffe9" +
    "\001\002\000\050\003\100\015\052\016\023\017\077\021" +
    "\060\023\047\024\067\026\062\027\105\030\106\031\075" +
    "\032\101\034\110\035\074\043\102\044\050\045\057\105" +
    "\063\117\u0137\001\002\000\004\117\uffab\001\002\000\016" +
    "\013\114\014\121\106\115\107\125\112\117\113\116\001" +
    "\002\000\006\064\uff51\111\uff51\001\002\000\006\064\u013c" +
    "\111\u013b\001\002\000\050\003\uff53\015\uff53\016\uff53\017" +
    "\uff53\021\uff53\023\uff53\024\uff53\026\uff53\027\uff53\030\uff53" +
    "\031\uff53\032\uff53\034\uff53\035\uff53\043\uff53\044\uff53\045" +
    "\uff53\105\uff53\117\uff53\001\002\000\016\013\114\014\121" +
    "\106\115\107\125\112\117\113\116\001\002\000\006\064" +
    "\uff52\111\uff52\001\002\000\014\006\021\007\017\010\020" +
    "\011\032\012\016\001\002\000\006\104\u0142\105\u0140\001" +
    "\002\000\074\003\uffea\006\uffea\007\uffea\010\uffea\011\uffea" +
    "\012\uffea\015\uffea\016\uffea\017\uffea\021\uffea\023\uffea\024" +
    "\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\034\uffea" +
    "\035\uffea\043\uffea\044\uffea\045\uffea\046\uffea\075\uffea\100" +
    "\uffea\105\uffea\114\uffea\116\uffea\117\uffea\001\002\000\070" +
    "\003\uffba\006\uffba\007\uffba\010\uffba\011\uffba\012\uffba\015" +
    "\uffba\016\uffba\017\uffba\021\uffba\023\uffba\024\uffba\026\uffba" +
    "\027\uffba\030\uffba\031\uffba\032\uffba\034\uffba\035\uffba\043" +
    "\uffba\044\uffba\045\uffba\046\uffba\100\u0144\105\uffba\114\u014d" +
    "\117\uffba\001\002\000\004\105\u0140\001\002\000\006\075" +
    "\145\100\u0144\001\002\000\004\105\u014b\001\002\000\070" +
    "\003\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\015" +
    "\uffc8\016\uffc8\017\uffc8\021\uffc8\023\uffc8\024\uffc8\026\uffc8" +
    "\027\uffc8\030\uffc8\031\uffc8\032\uffc8\034\uffc8\035\uffc8\043" +
    "\uffc8\044\uffc8\045\uffc8\046\uffc8\075\145\105\uffc8\114\u0147" +
    "\117\uffc8\001\002\000\064\003\uffca\006\uffca\007\uffca\010" +
    "\uffca\011\uffca\012\uffca\015\uffca\016\uffca\017\uffca\021\uffca" +
    "\023\uffca\024\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032" +
    "\uffca\034\uffca\035\uffca\043\uffca\044\uffca\045\uffca\046\uffca" +
    "\105\uffca\117\uffca\001\002\000\004\101\u0148\001\002\000" +
    "\034\013\114\014\121\035\074\043\102\044\050\065\124" +
    "\101\341\105\123\106\115\107\125\110\113\112\117\113" +
    "\116\001\002\000\006\100\344\102\u014a\001\002\000\064" +
    "\003\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\015" +
    "\uffc7\016\uffc7\017\uffc7\021\uffc7\023\uffc7\024\uffc7\026\uffc7" +
    "\027\uffc7\030\uffc7\031\uffc7\032\uffc7\034\uffc7\035\uffc7\043" +
    "\uffc7\044\uffc7\045\uffc7\046\uffc7\105\uffc7\117\uffc7\001\002" +
    "\000\074\003\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012" +
    "\uffeb\015\uffeb\016\uffeb\017\uffeb\021\uffeb\023\uffeb\024\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\034\uffeb\035" +
    "\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\075\uffeb\100\uffeb" +
    "\105\uffeb\114\uffeb\116\uffeb\117\uffeb\001\002\000\064\003" +
    "\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\015\uffcc" +
    "\016\uffcc\017\uffcc\021\uffcc\023\uffcc\024\uffcc\026\uffcc\027" +
    "\uffcc\030\uffcc\031\uffcc\032\uffcc\034\uffcc\035\uffcc\043\uffcc" +
    "\044\uffcc\045\uffcc\046\uffcc\105\uffcc\117\uffcc\001\002\000" +
    "\036\013\114\014\121\035\074\043\102\044\050\055\251" +
    "\063\243\065\253\105\247\106\115\107\125\110\246\112" +
    "\117\113\116\001\002\000\126\003\uffb9\006\uffb9\007\uffb9" +
    "\010\uffb9\011\uffb9\012\uffb9\015\uffb9\016\uffb9\017\uffb9\021" +
    "\uffb9\023\uffb9\024\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9" +
    "\032\uffb9\034\uffb9\035\uffb9\043\uffb9\044\uffb9\045\uffb9\046" +
    "\uffb9\047\270\050\271\051\266\052\260\053\273\054\255" +
    "\056\256\057\267\060\275\061\257\062\274\064\261\065" +
    "\272\066\264\067\265\070\263\071\262\105\uffb9\117\uffb9" +
    "\001\002\000\010\101\336\105\334\106\u0150\001\002\000" +
    "\004\111\uff60\001\002\000\004\111\uff5f\001\002\000\004" +
    "\111\u0153\001\002\000\140\003\uff66\006\uff66\007\uff66\010" +
    "\uff66\011\uff66\012\uff66\015\uff66\016\uff66\017\uff66\021\uff66" +
    "\023\uff66\024\uff66\026\uff66\027\uff66\030\uff66\031\uff66\032" +
    "\uff66\034\uff66\035\uff66\043\uff66\044\uff66\045\uff66\046\uff66" +
    "\047\uff66\050\uff66\051\uff66\052\uff66\053\uff66\054\uff66\056" +
    "\uff66\057\uff66\060\uff66\061\uff66\062\uff66\064\uff66\065\uff66" +
    "\066\uff66\067\uff66\070\uff66\071\uff66\076\uff66\100\uff66\102" +
    "\uff66\105\uff66\111\uff66\117\uff66\121\uff66\001\002\000\004" +
    "\110\u0164\001\002\000\004\105\u015d\001\002\000\004\110" +
    "\u0157\001\002\000\016\006\021\007\017\010\020\011\032" +
    "\012\016\111\ufff2\001\002\000\004\111\u0159\001\002\000" +
    "\004\116\u015a\001\002\000\050\003\uffe9\015\uffe9\016\uffe9" +
    "\017\uffe9\021\uffe9\023\uffe9\024\uffe9\026\uffe9\027\uffe9\030" +
    "\uffe9\031\uffe9\032\uffe9\034\uffe9\035\uffe9\043\uffe9\044\uffe9" +
    "\045\uffe9\105\uffe9\117\uffe9\001\002\000\050\003\100\015" +
    "\052\016\023\017\077\021\060\023\047\024\067\026\062" +
    "\027\105\030\106\031\075\032\101\034\110\035\074\043" +
    "\102\044\050\045\057\105\063\117\u015c\001\002\000\026" +
    "\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\015\ufff4\016" +
    "\ufff4\046\ufff4\105\ufff4\117\ufff4\001\002\000\004\110\u015e" +
    "\001\002\000\016\006\021\007\017\010\020\011\032\012" +
    "\016\111\ufff2\001\002\000\004\111\u0160\001\002\000\004" +
    "\116\u0161\001\002\000\050\003\uffe9\015\uffe9\016\uffe9\017" +
    "\uffe9\021\uffe9\023\uffe9\024\uffe9\026\uffe9\027\uffe9\030\uffe9" +
    "\031\uffe9\032\uffe9\034\uffe9\035\uffe9\043\uffe9\044\uffe9\045" +
    "\uffe9\105\uffe9\117\uffe9\001\002\000\050\003\100\015\052" +
    "\016\023\017\077\021\060\023\047\024\067\026\062\027" +
    "\105\030\106\031\075\032\101\034\110\035\074\043\102" +
    "\044\050\045\057\105\063\117\u0163\001\002\000\026\006" +
    "\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\015\ufff8\016\ufff8" +
    "\046\ufff8\105\ufff8\117\ufff8\001\002\000\016\006\021\007" +
    "\017\010\020\011\032\012\016\111\ufff2\001\002\000\004" +
    "\111\u0166\001\002\000\004\116\u0167\001\002\000\050\003" +
    "\uffe9\015\uffe9\016\uffe9\017\uffe9\021\uffe9\023\uffe9\024\uffe9" +
    "\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\034\uffe9\035" +
    "\uffe9\043\uffe9\044\uffe9\045\uffe9\105\uffe9\117\uffe9\001\002" +
    "\000\050\003\100\015\052\016\023\017\077\021\060\023" +
    "\047\024\067\026\062\027\105\030\106\031\075\032\101" +
    "\034\110\035\074\043\102\044\050\045\057\105\063\117" +
    "\u0169\001\002\000\026\006\ufff5\007\ufff5\010\ufff5\011\ufff5" +
    "\012\ufff5\015\ufff5\016\ufff5\046\ufff5\105\ufff5\117\ufff5\001" +
    "\002\000\004\110\u016b\001\002\000\016\006\021\007\017" +
    "\010\020\011\032\012\016\111\ufff2\001\002\000\004\111" +
    "\u016d\001\002\000\004\116\u016e\001\002\000\050\003\uffe9" +
    "\015\uffe9\016\uffe9\017\uffe9\021\uffe9\023\uffe9\024\uffe9\026" +
    "\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\034\uffe9\035\uffe9" +
    "\043\uffe9\044\uffe9\045\uffe9\105\uffe9\117\uffe9\001\002\000" +
    "\050\003\100\015\052\016\023\017\077\021\060\023\047" +
    "\024\067\026\062\027\105\030\106\031\075\032\101\034" +
    "\110\035\074\043\102\044\050\045\057\105\063\117\u0170" +
    "\001\002\000\026\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\015\ufff7\016\ufff7\046\ufff7\105\ufff7\117\ufff7\001\002" +
    "\000\016\006\021\007\017\010\020\011\032\012\016\111" +
    "\ufff2\001\002\000\004\111\u0173\001\002\000\004\116\u0174" +
    "\001\002\000\050\003\uffe9\015\uffe9\016\uffe9\017\uffe9\021" +
    "\uffe9\023\uffe9\024\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9" +
    "\032\uffe9\034\uffe9\035\uffe9\043\uffe9\044\uffe9\045\uffe9\105" +
    "\uffe9\117\uffe9\001\002\000\050\003\100\015\052\016\023" +
    "\017\077\021\060\023\047\024\067\026\062\027\105\030" +
    "\106\031\075\032\101\034\110\035\074\043\102\044\050" +
    "\045\057\105\063\117\u0176\001\002\000\026\006\ufff6\007" +
    "\ufff6\010\ufff6\011\ufff6\012\ufff6\015\ufff6\016\ufff6\046\ufff6" +
    "\105\ufff6\117\ufff6\001\002\000\006\002\ufffd\004\ufffd\001" +
    "\002\000\026\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc" +
    "\015\ufffc\016\ufffc\046\ufffc\105\ufffc\117\ufffc\001\002\000" +
    "\006\104\u017b\105\u0140\001\002\000\070\003\uffba\006\uffba" +
    "\007\uffba\010\uffba\011\uffba\012\uffba\015\uffba\016\uffba\017" +
    "\uffba\021\uffba\023\uffba\024\uffba\026\uffba\027\uffba\030\uffba" +
    "\031\uffba\032\uffba\034\uffba\035\uffba\043\uffba\044\uffba\045" +
    "\uffba\046\uffba\100\u0144\105\uffba\114\u014d\117\uffba\001\002" +
    "\000\004\105\u0140\001\002\000\006\075\145\100\u0144\001" +
    "\002\000\070\003\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8" +
    "\012\uffc8\015\uffc8\016\uffc8\017\uffc8\021\uffc8\023\uffc8\024" +
    "\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\034\uffc8" +
    "\035\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\075\145\105" +
    "\uffc8\114\u0147\117\uffc8\001\002\000\064\003\uffc9\006\uffc9" +
    "\007\uffc9\010\uffc9\011\uffc9\012\uffc9\015\uffc9\016\uffc9\017" +
    "\uffc9\021\uffc9\023\uffc9\024\uffc9\026\uffc9\027\uffc9\030\uffc9" +
    "\031\uffc9\032\uffc9\034\uffc9\035\uffc9\043\uffc9\044\uffc9\045" +
    "\uffc9\046\uffc9\105\uffc9\117\uffc9\001\002\000\064\003\uffcb" +
    "\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\015\uffcb\016" +
    "\uffcb\017\uffcb\021\uffcb\023\uffcb\024\uffcb\026\uffcb\027\uffcb" +
    "\030\uffcb\031\uffcb\032\uffcb\034\uffcb\035\uffcb\043\uffcb\044" +
    "\uffcb\045\uffcb\046\uffcb\105\uffcb\117\uffcb\001\002\000\006" +
    "\100\u0144\116\uffec\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u017e\000\010\002\006\014\003\015\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\013\001\001\000\004\017\u017f\001\001\000\002" +
    "\001\001\000\014\006\023\007\021\025\026\040\024\041" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\u0178\001\001\000\002\001\001\000\012\006\023\007\u0177" +
    "\025\026\041\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\u0154\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\025\036\042\037\043" +
    "\035\046\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\025\036\043" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\045\001\001\000\042\003\106\005" +
    "\053\006\070\013\102\026\063\031\050\033\055\034\052" +
    "\035\072\036\065\037\060\044\067\056\103\062\071\063" +
    "\075\064\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\051\u0109\052\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\044\247\056\251\065" +
    "\374\066\243\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\020" +
    "\121\044\111\056\125\066\117\001\001\000\002\001\001" +
    "\000\012\020\234\044\111\056\125\066\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\051\145\052\146\001\001\000\012\020\126" +
    "\044\111\056\125\066\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\020\142\044\111" +
    "\056\125\066\117\001\001\000\012\020\141\044\111\056" +
    "\125\066\117\001\001\000\012\020\140\044\111\056\125" +
    "\066\117\001\001\000\012\020\137\044\111\056\125\066" +
    "\117\001\001\000\012\020\136\044\111\056\125\066\117" +
    "\001\001\000\012\020\135\044\111\056\125\066\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\010\152\011\155\012\157\020\153\044\111\050\161" +
    "\056\125\066\117\001\001\000\012\020\150\044\111\056" +
    "\125\066\117\001\001\000\004\052\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\010\227" +
    "\020\230\044\111\056\125\066\117\001\001\000\002\001" +
    "\001\000\014\010\165\020\166\044\111\056\125\066\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\010\152\020\153\044\111" +
    "\050\164\056\125\066\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\020\224\044\111" +
    "\056\125\066\117\001\001\000\012\020\223\044\111\056" +
    "\125\066\117\001\001\000\012\020\222\044\111\056\125" +
    "\066\117\001\001\000\014\010\220\020\221\044\111\056" +
    "\125\066\117\001\001\000\014\010\177\020\200\044\111" +
    "\056\125\066\117\001\001\000\012\020\176\044\111\056" +
    "\125\066\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\010\217\020" +
    "\211\044\111\056\125\066\117\001\001\000\012\020\216" +
    "\044\111\056\125\066\117\001\001\000\014\010\215\020" +
    "\211\044\111\056\125\066\117\001\001\000\012\020\214" +
    "\044\111\056\125\066\117\001\001\000\014\010\213\020" +
    "\211\044\111\056\125\066\117\001\001\000\014\010\212" +
    "\020\211\044\111\056\125\066\117\001\001\000\014\010" +
    "\210\020\211\044\111\056\125\066\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\020\232\044\111\056\125\066\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\236\001\001\000\042\003\106\005\053\006\070" +
    "\013\102\026\063\031\050\033\055\034\052\035\072\036" +
    "\065\037\060\044\067\056\103\062\071\063\075\064\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\044" +
    "\247\056\251\065\244\066\243\001\001\000\012\044\247" +
    "\056\251\065\323\066\243\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\044\247\056\251\065\320\066\243" +
    "\001\001\000\006\051\317\052\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\044\247" +
    "\056\251\065\253\066\243\001\001\000\002\001\001\000" +
    "\012\044\247\056\251\065\315\066\243\001\001\000\012" +
    "\044\247\056\251\065\314\066\243\001\001\000\012\044" +
    "\247\056\251\065\313\066\243\001\001\000\012\044\247" +
    "\056\251\065\312\066\243\001\001\000\012\044\247\056" +
    "\251\065\311\066\243\001\001\000\012\044\247\056\251" +
    "\065\310\066\243\001\001\000\012\044\247\056\251\065" +
    "\307\066\243\001\001\000\012\044\247\056\251\065\306" +
    "\066\243\001\001\000\012\044\247\056\251\065\305\066" +
    "\243\001\001\000\012\044\247\056\251\065\304\066\243" +
    "\001\001\000\012\044\247\056\251\065\303\066\243\001" +
    "\001\000\012\044\247\056\251\065\302\066\243\001\001" +
    "\000\012\044\247\056\251\065\301\066\243\001\001\000" +
    "\012\044\247\056\251\065\300\066\243\001\001\000\012" +
    "\044\247\056\251\065\277\066\243\001\001\000\012\044" +
    "\247\056\251\065\276\066\243\001\001\000\012\044\247" +
    "\056\251\065\275\066\243\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\052\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\044\247\056\251\065\325\066\243\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\330\001\001\000\042" +
    "\003\106\005\053\006\070\013\102\026\063\031\050\033" +
    "\055\034\052\035\072\036\065\037\060\044\067\056\103" +
    "\062\071\063\075\064\064\001\001\000\002\001\001\000" +
    "\004\061\334\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\020\336\044\111\053\337\054\341\056\125\066" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\020\336\044\111\053\342\054\341\056\125\066\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\020\336" +
    "\044\111\054\345\056\125\066\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\020\353\044" +
    "\111\056\125\066\117\001\001\000\002\001\001\000\012" +
    "\020\355\044\111\056\125\066\117\001\001\000\002\001" +
    "\001\000\012\020\357\044\111\056\125\066\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\044\247\056" +
    "\251\065\362\066\243\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\365\001\001\000\042\003\106\005" +
    "\053\006\070\013\102\026\063\031\050\033\055\034\052" +
    "\035\072\036\065\037\060\044\067\056\103\062\071\063" +
    "\075\064\064\001\001\000\002\001\001\000\004\003\370" +
    "\001\001\000\002\001\001\000\004\004\372\001\001\000" +
    "\042\003\106\005\053\006\070\013\102\026\063\031\050" +
    "\033\055\034\052\035\072\036\065\037\060\044\067\056" +
    "\103\062\071\063\075\064\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\061\376\001\001\000\002\001" +
    "\001\000\004\057\u0105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\020\u010f" +
    "\044\111\056\125\066\117\001\001\000\002\001\001\000" +
    "\004\052\147\001\001\000\002\001\001\000\012\044\247" +
    "\056\251\065\u010c\066\243\001\001\000\002\001\001\000" +
    "\012\044\247\056\251\065\u010e\066\243\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\u0112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\044" +
    "\247\056\251\065\u0118\066\243\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\u011d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\u0120\001\001\000\042\003\106\005\053\006" +
    "\070\013\102\026\063\031\050\033\055\034\052\035\072" +
    "\036\065\037\060\044\067\056\103\062\071\063\075\064" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\022\u0127\023\u0128\024" +
    "\u0129\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\u012f\024\u0131\001\001\000\002\001\001\000\004\066" +
    "\u012b\001\001\000\002\001\001\000\004\004\u012d\001\001" +
    "\000\042\003\106\005\053\006\070\013\102\026\063\031" +
    "\050\033\055\034\052\035\072\036\065\037\060\044\067" +
    "\056\103\062\071\063\075\064\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\u0135\001" +
    "\001\000\042\003\106\005\053\006\070\013\102\026\063" +
    "\031\050\033\055\034\052\035\072\036\065\037\060\044" +
    "\067\056\103\062\071\063\075\064\064\001\001\000\002" +
    "\001\001\000\006\045\u0139\066\u0138\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\066\u013c" +
    "\001\001\000\002\001\001\000\004\025\u013e\001\001\000" +
    "\004\017\u0140\001\001\000\002\001\001\000\004\027\u014b" +
    "\001\001\000\004\017\u0142\001\001\000\006\051\u0144\052" +
    "\146\001\001\000\002\001\001\000\006\052\147\055\u0145" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\020" +
    "\336\044\111\053\u0148\054\341\056\125\066\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\044\247\056\251\065\u014d\066\243" +
    "\001\001\000\002\001\001\000\006\060\u0151\061\u0150\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\025\036\042\037\043\035\046\u0157" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\u015a\001\001\000\042\003\106\005\053\006\070\013\102" +
    "\026\063\031\050\033\055\034\052\035\072\036\065\037" +
    "\060\044\067\056\103\062\071\063\075\064\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\025\036\042" +
    "\037\043\035\046\u015e\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\u0161\001\001\000\042\003\106\005" +
    "\053\006\070\013\102\026\063\031\050\033\055\034\052" +
    "\035\072\036\065\037\060\044\067\056\103\062\071\063" +
    "\075\064\064\001\001\000\002\001\001\000\012\025\036" +
    "\042\037\043\035\046\u0164\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\u0167\001\001\000\042\003\106" +
    "\005\053\006\070\013\102\026\063\031\050\033\055\034" +
    "\052\035\072\036\065\037\060\044\067\056\103\062\071" +
    "\063\075\064\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\025\036\042\037\043\035\046\u016b\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\u016e\001" +
    "\001\000\042\003\106\005\053\006\070\013\102\026\063" +
    "\031\050\033\055\034\052\035\072\036\065\037\060\044" +
    "\067\056\103\062\071\063\075\064\064\001\001\000\002" +
    "\001\001\000\012\025\036\042\037\043\035\046\u0171\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\u0174" +
    "\001\001\000\042\003\106\005\053\006\070\013\102\026" +
    "\063\031\050\033\055\034\052\035\072\036\065\037\060" +
    "\044\067\056\103\062\071\063\075\064\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\u0179\001\001\000\004\027\u017e\001\001\000\004\017" +
    "\u017b\001\001\000\006\051\u017c\052\146\001\001\000\006" +
    "\052\147\055\u017d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public Expresion sumando;

    public void syntax_error(Symbol cur_token) {
        System.out.println(" Se esperaban: ");
        String esperados = "";
        for (int i = 0; i < expected_token_ids().size(); i++){
            esperados += symbl_name_from_id(expected_token_ids().get(i))+"-";
        }
        System.out.print(esperados+", pero se encontro "+cur_token.value+" en la linea"+cur_token.right+" y en la columna"+cur_token.left);
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal "+message+info);
    }
    
    public void report_fatal_error(Symbol cur) {
        System.out.println("unrecovered_syntax_error");
    }

    public void imp(String texto){
        System.out.println(texto);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= pistas 
            {
              Object RESULT =null;
		 imp("todo bien carnalin"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // pistas ::= pistas pista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pistas",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // pistas ::= pista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pistas",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // pista ::= PISTA ID extiende INDENT lista_declaracion DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pista",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_declaracion ::= lista_declaracion declaraciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_declaracion ::= declaraciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaraciones ::= metodo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // metodo ::= KEEP tipo ID PAR_A param PAR_C INDENT instrucciones DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // metodo ::= tipo ID PAR_A param PAR_C INDENT instrucciones DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // metodo ::= ID PAR_A param PAR_C INDENT instrucciones DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // metodo ::= KEEP ID PAR_A param PAR_C INDENT instrucciones DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // metodo ::= KEEP PRINCIPAL PAR_A param PAR_C INDENT instrucciones DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // metodo ::= PRINCIPAL PAR_A param PAR_C INDENT instrucciones DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // param ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // param ::= parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parametros ::= parametros COMA parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // parametro ::= tipo ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // extiende ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extiende",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // extiende ::= EXT ids 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extiende",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ids ::= ids COMA ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ids ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instrucciones ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instrucciones ::= instrucciones instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion ::= metodos_retorno 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion ::= suma_simplificada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccion ::= incremento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruccion ::= decremento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruccion ::= llamada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instruccion ::= asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instruccion ::= CONT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instruccion ::= SALIR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruccion ::= RETORNA expresion2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccion ::= para 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccion ::= si 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccion ::= mientras 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccion ::= hacer 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccion ::= switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion ::= reproducir 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccion ::= esperar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccion ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccion ::= mensaje 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // suma_simplificada ::= ID SUMA_S expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("suma_simplificada",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // incremento ::= ID INC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("incremento",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // decremento ::= ID DEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decremento",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipo_retorno ::= condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_retorno",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipo_retorno ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_retorno",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // si ::= SI PAR_A expresion2 PAR_C INDENT instrucciones DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // si ::= SI PAR_A expresion2 PAR_C INDENT instrucciones DEDENT SINO INDENT instrucciones DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // si ::= SI PAR_A expresion2 PAR_C INDENT instrucciones DEDENT SINO si 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // declaracion ::= KEEP VAR tipo ids asignar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declaracion ::= VAR tipo ids asignar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declaracion ::= KEEP VAR tipo ARREGLO ids dimensiones asignar_arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declaracion ::= VAR tipo ARREGLO ids dimensiones asignar_arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // asignar_arreglo ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar_arreglo",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // asignar_arreglo ::= ASIGNAR LLAVE_A items LLAVE_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar_arreglo",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // items ::= items COMA item 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // items ::= item 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // item ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("item",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // item ::= LLAVE_A items LLAVE_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("item",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // dimensiones ::= dimensiones dimension 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimensiones",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // dimensiones ::= dimension 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimensiones",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // dimension ::= COR_A expresion COR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimension",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // para ::= PARA PAR_A asigna PUNTOC expresion2 PUNTOC NUMERO paso PAR_C INDENT instrucciones DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("para",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // paso ::= INC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paso",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // paso ::= DEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paso",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // asigna ::= ENTERO ID ASIGNAR NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asigna",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // asigna ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asigna",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // asignar ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // asignar ::= ASIGNAR expresion2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // asignacion ::= ID ASIGNAR expresion2 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 sumando = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // asignacion ::= ID dimensiones ASIGNAR expresion2 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 sumando = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // tipo ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // tipo ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // tipo ::= CADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // tipo ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // tipo ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // switch ::= SWITCH PAR_A ID PAR_C INDENT casos DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // switch ::= SWITCH PAR_A ID PAR_C INDENT casos default DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // switch ::= SWITCH PAR_A ID PAR_C INDENT default DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // casos ::= casos caso 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // casos ::= caso 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // caso ::= CASO valor_puntual INDENT instrucciones DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // default ::= DEFAULT INDENT instrucciones DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // valor_puntual ::= NUMERO 
            {
              Primitivo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Primitivo("numero",(java_cup.runtime.Symbol) CUP$parser$stack.peek(),Integer.parseInt(e1.toString())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_puntual",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // valor_puntual ::= STRING 
            {
              Primitivo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Primitivo("string",(java_cup.runtime.Symbol) CUP$parser$stack.peek(),e1.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_puntual",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // valor_puntual ::= CARACTER 
            {
              Primitivo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Primitivo("caracter",(java_cup.runtime.Symbol) CUP$parser$stack.peek(),e1.toString().charAt(0)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_puntual",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // valor_puntual ::= TRUE 
            {
              Primitivo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Primitivo("boolean",(java_cup.runtime.Symbol) CUP$parser$stack.peek(),true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_puntual",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // valor_puntual ::= FALSE 
            {
              Primitivo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Primitivo("boolean",(java_cup.runtime.Symbol) CUP$parser$stack.peek(),false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_puntual",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // valor_puntual ::= NUMERO_D 
            {
              Primitivo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Primitivo("decimal",(java_cup.runtime.Symbol) CUP$parser$stack.peek(),Double.parseDouble(e1.toString())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_puntual",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // condicion ::= PAR_A condicion PAR_C 
            {
              Object RESULT =null;
		 imp("Encuentra parentesis"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // condicion ::= expresion MAYOR expresion 
            {
              Object RESULT =null;
		 imp("Encuentra mayor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // condicion ::= expresion MENOR expresion 
            {
              Object RESULT =null;
		 imp("Encuentra menor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // condicion ::= expresion MENOR_I expresion 
            {
              Object RESULT =null;
		 imp("Encuentra menor igual"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // condicion ::= expresion MAYOR_I expresion 
            {
              Object RESULT =null;
		 imp("Encuentra mayor igual"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // condicion ::= expresion IGUAL expresion 
            {
              Object RESULT =null;
		 imp("Encuentra igual"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // condicion ::= expresion DIFF expresion 
            {
              Object RESULT =null;
		 imp("Encuentra diferente"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // condicion ::= expresion IGUAL condicion 
            {
              Object RESULT =null;
		 imp("Encuentra igual"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // condicion ::= expresion DIFF condicion 
            {
              Object RESULT =null;
		 imp("Encuentra diferente"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // condicion ::= condicion DIFF expresion 
            {
              Object RESULT =null;
		 imp("Encuentra diferente"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // condicion ::= condicion IGUAL expresion 
            {
              Object RESULT =null;
		 imp("Encuentra diferente"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // condicion ::= NOT condicion 
            {
              Object RESULT =null;
		 imp("Encuentra not"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // condicion ::= NOT expresion 
            {
              Object RESULT =null;
		 imp("NOT expresion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // condicion ::= NULO ID 
            {
              Object RESULT =null;
		 imp("Encuentra nulo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // condicion ::= condicion AND condicion 
            {
              Object RESULT =null;
		 imp("Encuentra and"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // condicion ::= condicion OR condicion 
            {
              Object RESULT =null;
		 imp("Encuentra or"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // condicion ::= condicion XOR condicion 
            {
              Object RESULT =null;
		 imp("Encuentra xor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // condicion ::= condicion NAND condicion 
            {
              Object RESULT =null;
		 imp("Encuentra nand"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // condicion ::= condicion NOR condicion 
            {
              Object RESULT =null;
		 imp("Encuentra nor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // booleano ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleano",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // booleano ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleano",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expresion ::= expresion SUMA expresion 
            {
              Object RESULT =null;
		 imp("Encuentra suma"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expresion ::= expresion RESTA expresion 
            {
              Object RESULT =null;
		 imp("Encuentra menos"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expresion ::= expresion POR expresion 
            {
              Object RESULT =null;
		 imp("Encuentra por"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expresion ::= expresion ENTRE expresion 
            {
              Object RESULT =null;
		 imp("Encuentra division"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expresion ::= expresion POT expresion 
            {
              Object RESULT =null;
		 imp("Encuentra potencia"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expresion ::= expresion MOD expresion 
            {
              Object RESULT =null;
		 imp("Encuentra modulo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expresion ::= RESTA expresion 
            {
              Object RESULT =null;
		 imp("Encuentra simbolo menos"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expresion ::= valor_puntual 
            {
              Object RESULT =null;
		 imp("Encuentra valor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expresion ::= PAR_A expresion PAR_C 
            {
              Object RESULT =null;
		 imp("Encuentra parentesis"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expresion ::= ID 
            {
              Object RESULT =null;
		 imp("Encuentra variable"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expresion ::= llamada 
            {
              Object RESULT =null;
		 imp("Encuentra llamada"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expresion ::= ID dimensiones 
            {
              Object RESULT =null;
		 imp("Encuentra valor de arreglo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expresion ::= metodos_retorno 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expresion2 ::= expresion2 SUMA expresion2 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Expresion(e1,e2,Expresion.Tipo_operacion.SUMA);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expresion2 ::= expresion2 RESTA expresion2 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            imp("Encuentra menos"); 
            RESULT = new Expresion(e1,e2,Expresion.Tipo_operacion.RESTA);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expresion2 ::= expresion2 POR expresion2 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra por");
            RESULT = new Expresion(e1,e2,Expresion.Tipo_operacion.POR);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expresion2 ::= expresion2 ENTRE expresion2 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra division"); 
            RESULT = new Expresion(e1,e2,Expresion.Tipo_operacion.ENTRE);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expresion2 ::= expresion2 POT expresion2 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra potencia"); 
            RESULT = new Expresion(e1,e2,Expresion.Tipo_operacion.POT);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expresion2 ::= expresion2 MOD expresion2 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra modulo"); 
            RESULT = new Expresion(e1,e2,Expresion.Tipo_operacion.MOD);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expresion2 ::= RESTA expresion2 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra negativo"); 
            RESULT = new Expresion(e1,Expresion.Tipo_operacion.NEGATIVO);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expresion2 ::= expresion2 MAYOR expresion2 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra mayor"); 
            RESULT = new Expresion(e1,e2,Expresion.Tipo_operacion.MAYOR);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expresion2 ::= expresion2 MENOR expresion2 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra menor"); 
            RESULT = new Expresion(e1,e2,Expresion.Tipo_operacion.MENOR);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expresion2 ::= expresion2 MENOR_I expresion2 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra menor igual"); 
            RESULT = new Expresion(e1,e2,Expresion.Tipo_operacion.MENOR_I);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expresion2 ::= expresion2 MAYOR_I expresion2 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra mayor igual"); 
            RESULT = new Expresion(e1,e2,Expresion.Tipo_operacion.MAYOR_I);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expresion2 ::= expresion2 IGUAL expresion2 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra igual"); 
            RESULT = new Expresion(e1,e2,Expresion.Tipo_operacion.IGUAL);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expresion2 ::= expresion2 DIFF expresion2 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra diferente"); 
            RESULT = new Expresion(e1,e2,Expresion.Tipo_operacion.DIFF);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expresion2 ::= expresion2 AND expresion2 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra and"); 
            RESULT = new Expresion(e1,e2,Expresion.Tipo_operacion.AND);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expresion2 ::= expresion2 OR expresion2 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra or"); 
            RESULT = new Expresion(e1,e2,Expresion.Tipo_operacion.OR);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expresion2 ::= expresion2 XOR expresion2 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra xor"); 
            RESULT = new Expresion(e1,e2,Expresion.Tipo_operacion.XOR);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expresion2 ::= expresion2 NAND expresion2 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra nand"); 
            RESULT = new Expresion(e1,e2,Expresion.Tipo_operacion.NAND);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expresion2 ::= expresion2 NOR expresion2 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra nor"); 
            RESULT = new Expresion(e1,e2,Expresion.Tipo_operacion.NOR);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expresion2 ::= valor_puntual 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Primitivo e1 = (Primitivo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra valor"); 
            RESULT = new Expresion(e1,Expresion.Tipo_operacion.PRIMITIVO);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // expresion2 ::= PAR_A expresion2 PAR_C 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            imp("Encuentra parentesis"); 
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // expresion2 ::= ID 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra identificador"); 
            RESULT = new Expresion(new Variable(e1.toString(),null,null,null,e1right),Expresion.Tipo_operacion.VARIABLE);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // expresion2 ::= llamada 
            {
              Expresion RESULT =null;
		 
            imp("Encuentra llamada"); 
            RESULT = new Expresion(new Variable("Llamada",null,null,null,-1),Expresion.Tipo_operacion.LLAMADA);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // expresion2 ::= ID dimensiones 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            imp("Encuentra arreglo"); 
            RESULT = new Expresion(new Variable(e1.toString(),null,null,null,e1right),Expresion.Tipo_operacion.VARIABLE);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // expresion2 ::= NOT expresion2 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra not"); 
            RESULT = new Expresion(e1,Expresion.Tipo_operacion.NOT);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // expresion2 ::= NULO ID 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra nulo"); 
            RESULT = new Expresion(new Variable(e1.toString(),null,null,null,e1right),Expresion.Tipo_operacion.NULO);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // expresion2 ::= metodos_retorno 
            {
              Expresion RESULT =null;
		 
            imp("Encuentra metodo retorno"); 
            RESULT = new Expresion(new Variable("Metodo retorno",null,null,null,-1),Expresion.Tipo_operacion.METODO_RETORNO);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // metodos_retorno ::= ORDENAR PAR_A arreglo_ordenar COMA forma_ordenar PAR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodos_retorno",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // metodos_retorno ::= SUMARIZAR PAR_A arreglo_ordenar PAR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodos_retorno",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // metodos_retorno ::= LONG PAR_A arreglo_cadena PAR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodos_retorno",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // forma_ordenar ::= ASC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forma_ordenar",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // forma_ordenar ::= DESC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forma_ordenar",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // forma_ordenar ::= PAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forma_ordenar",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // forma_ordenar ::= IMPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forma_ordenar",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // forma_ordenar ::= PRIMOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forma_ordenar",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // arreglo_cadena ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo_cadena",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // arreglo_cadena ::= arreglo_ordenar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo_cadena",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // arreglo_ordenar ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo_ordenar",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // arreglo_ordenar ::= LLAVE_A items LLAVE_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo_ordenar",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // llamada ::= ID PAR_A param2 PAR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // param2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // param2 ::= parametros2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // parametros2 ::= parametros2 COMA tipo_retorno 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // parametros2 ::= tipo_retorno 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // mientras ::= MIENTRAS PAR_A expresion2 PAR_C INDENT instrucciones DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mientras",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // hacer ::= HACER INDENT instrucciones DEDENT MIENTRAS PAR_A expresion2 PAR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("hacer",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // reproducir ::= REPRODUCIR PAR_A NOTAS COMA expresion COMA expresion COMA expresion PAR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reproducir",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // esperar ::= ESPERAR PAR_A expresion COMA expresion PAR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("esperar",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // mensaje ::= MSG PAR_A texto PAR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // texto ::= texto SUMA valor_puntual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // texto ::= valor_puntual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // condicional ::= condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // condicional ::= booleano 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
