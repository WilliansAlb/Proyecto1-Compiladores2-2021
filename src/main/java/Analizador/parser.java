
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import Interprete.*;
import Interprete.Metodos_Nativos.*;
import java.util.LinkedList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\004\000\002\002\003\000\002\020" +
    "\004\000\002\020\003\000\002\021\010\000\002\040\002" +
    "\000\002\040\004\000\002\037\005\000\002\037\003\000" +
    "\002\005\004\000\002\005\003\000\002\003\003\000\002" +
    "\003\003\000\002\024\013\000\002\024\012\000\002\024" +
    "\011\000\002\024\012\000\002\024\011\000\002\024\010" +
    "\000\002\052\002\000\002\052\003\000\002\051\005\000" +
    "\002\051\003\000\002\050\004\000\002\035\004\000\002" +
    "\035\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\004\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\022\006\000\002" +
    "\023\007\000\002\023\006\000\002\007\005\000\002\042" +
    "\005\000\002\042\003\000\002\006\003\000\002\006\003" +
    "\000\002\026\002\000\002\026\004\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\004\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\003\000\002" +
    "\025\005\000\002\025\003\000\002\025\004\000\002\025" +
    "\004\000\002\025\004\000\002\045\011\000\002\045\015" +
    "\000\002\045\013\000\002\063\005\000\002\063\006\000" +
    "\002\057\012\000\002\056\011\000\002\054\014\000\002" +
    "\055\010\000\002\062\011\000\002\062\012\000\002\062" +
    "\011\000\002\043\004\000\002\043\003\000\002\044\007" +
    "\000\002\034\006\000\002\053\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\346\000\004\004\005\001\002\000\006\002\ufffe\004" +
    "\ufffe\001\002\000\004\105\012\001\002\000\006\002\000" +
    "\004\005\001\002\000\004\002\010\001\002\000\004\002" +
    "\001\001\002\000\006\002\uffff\004\uffff\001\002\000\006" +
    "\005\013\116\ufffc\001\002\000\004\105\157\001\002\000" +
    "\004\116\015\001\002\000\024\006\020\007\017\010\021" +
    "\011\032\012\016\015\030\016\023\046\033\105\025\001" +
    "\002\000\004\105\uffd0\001\002\000\004\105\uffd1\001\002" +
    "\000\004\105\uffd2\001\002\000\004\105\uffcf\001\002\000" +
    "\026\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\015\ufff7" +
    "\016\ufff7\046\ufff7\105\ufff7\117\ufff7\001\002\000\014\006" +
    "\020\007\017\010\021\011\032\012\016\001\002\000\026" +
    "\006\020\007\017\010\021\011\032\012\016\015\030\016" +
    "\023\046\033\105\025\117\343\001\002\000\004\110\335" +
    "\001\002\000\004\105\326\001\002\000\026\006\ufff5\007" +
    "\ufff5\010\ufff5\011\ufff5\012\ufff5\015\ufff5\016\ufff5\046\ufff5" +
    "\105\ufff5\117\ufff5\001\002\000\022\006\020\007\017\010" +
    "\021\011\032\012\016\016\267\046\272\105\270\001\002" +
    "\000\026\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\015" +
    "\ufff6\016\ufff6\046\ufff6\105\ufff6\117\ufff6\001\002\000\004" +
    "\105\uffce\001\002\000\004\110\034\001\002\000\004\111" +
    "\035\001\002\000\004\116\036\001\002\000\030\003\056" +
    "\016\063\017\054\021\043\027\060\030\061\031\053\032" +
    "\055\034\064\045\042\105\046\001\002\000\032\003\056" +
    "\016\063\017\054\021\043\027\060\030\061\031\053\032" +
    "\055\034\064\045\042\105\046\117\266\001\002\000\032" +
    "\003\uffe2\016\uffe2\017\uffe2\021\uffe2\027\uffe2\030\uffe2\031" +
    "\uffe2\032\uffe2\034\uffe2\045\uffe2\105\uffe2\117\uffe2\001\002" +
    "\000\032\003\uffe8\016\uffe8\017\uffe8\021\uffe8\027\uffe8\030" +
    "\uffe8\031\uffe8\032\uffe8\034\uffe8\045\uffe8\105\uffe8\117\uffe8" +
    "\001\002\000\004\110\263\001\002\000\004\110\236\001" +
    "\002\000\032\003\uffe3\016\uffe3\017\uffe3\021\uffe3\027\uffe3" +
    "\030\uffe3\031\uffe3\032\uffe3\034\uffe3\045\uffe3\105\uffe3\117" +
    "\uffe3\001\002\000\032\003\uffe6\016\uffe6\017\uffe6\021\uffe6" +
    "\027\uffe6\030\uffe6\031\uffe6\032\uffe6\034\uffe6\045\uffe6\105" +
    "\uffe6\117\uffe6\001\002\000\004\114\232\001\002\000\032" +
    "\003\uffde\016\uffde\017\uffde\021\uffde\027\uffde\030\uffde\031" +
    "\uffde\032\uffde\034\uffde\045\uffde\105\uffde\117\uffde\001\002" +
    "\000\032\003\uffe0\016\uffe0\017\uffe0\021\uffe0\027\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\034\uffe0\045\uffe0\105\uffe0\117\uffe0" +
    "\001\002\000\032\003\uffe7\016\uffe7\017\uffe7\021\uffe7\027" +
    "\uffe7\030\uffe7\031\uffe7\032\uffe7\034\uffe7\045\uffe7\105\uffe7" +
    "\117\uffe7\001\002\000\032\003\uffe1\016\uffe1\017\uffe1\021" +
    "\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\034\uffe1\045\uffe1" +
    "\105\uffe1\117\uffe1\001\002\000\030\013\070\014\075\055" +
    "\067\063\100\065\101\105\077\106\072\107\102\110\066" +
    "\112\073\113\071\001\002\000\004\110\215\001\002\000" +
    "\004\110\204\001\002\000\032\003\uffdd\016\uffdd\017\uffdd" +
    "\021\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\034\uffdd\045" +
    "\uffdd\105\uffdd\117\uffdd\001\002\000\032\003\uffdf\016\uffdf" +
    "\017\uffdf\021\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\034" +
    "\uffdf\045\uffdf\105\uffdf\117\uffdf\001\002\000\004\110\176" +
    "\001\002\000\004\116\166\001\002\000\032\003\uffe4\016" +
    "\uffe4\017\uffe4\021\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4" +
    "\034\uffe4\045\uffe4\105\uffe4\117\uffe4\001\002\000\014\006" +
    "\020\007\017\010\021\011\032\012\016\001\002\000\004" +
    "\110\065\001\002\000\030\013\070\014\075\055\067\063" +
    "\100\065\101\105\077\106\072\107\102\110\066\112\073" +
    "\113\071\001\002\000\030\013\070\014\075\055\067\063" +
    "\100\065\101\105\077\106\072\107\102\110\066\112\073" +
    "\113\071\001\002\000\004\105\153\001\002\000\120\003" +
    "\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca\015\uffca" +
    "\016\uffca\017\uffca\021\uffca\027\uffca\030\uffca\031\uffca\032" +
    "\uffca\034\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca" +
    "\052\uffca\053\uffca\054\uffca\056\uffca\057\uffca\060\uffca\061" +
    "\uffca\062\uffca\064\uffca\065\uffca\066\uffca\067\uffca\070\uffca" +
    "\071\uffca\100\uffca\105\uffca\111\uffca\116\uffca\117\uffca\001" +
    "\002\000\120\003\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8" +
    "\012\uffc8\015\uffc8\016\uffc8\017\uffc8\021\uffc8\027\uffc8\030" +
    "\uffc8\031\uffc8\032\uffc8\034\uffc8\045\uffc8\046\uffc8\047\uffc8" +
    "\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\056\uffc8\057" +
    "\uffc8\060\uffc8\061\uffc8\062\uffc8\064\uffc8\065\uffc8\066\uffc8" +
    "\067\uffc8\070\uffc8\071\uffc8\100\uffc8\105\uffc8\111\uffc8\116" +
    "\uffc8\117\uffc8\001\002\000\120\003\uffcc\006\uffcc\007\uffcc" +
    "\010\uffcc\011\uffcc\012\uffcc\015\uffcc\016\uffcc\017\uffcc\021" +
    "\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\034\uffcc\045\uffcc" +
    "\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054" +
    "\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\064\uffcc" +
    "\065\uffcc\066\uffcc\067\uffcc\070\uffcc\071\uffcc\100\uffcc\105" +
    "\uffcc\111\uffcc\116\uffcc\117\uffcc\001\002\000\120\003\uffcd" +
    "\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\015\uffcd\016" +
    "\uffcd\017\uffcd\021\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd" +
    "\034\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052" +
    "\uffcd\053\uffcd\054\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd" +
    "\062\uffcd\064\uffcd\065\uffcd\066\uffcd\067\uffcd\070\uffcd\071" +
    "\uffcd\100\uffcd\105\uffcd\111\uffcd\116\uffcd\117\uffcd\001\002" +
    "\000\116\003\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012" +
    "\uffb5\015\uffb5\016\uffb5\017\uffb5\021\uffb5\027\uffb5\030\uffb5" +
    "\031\uffb5\032\uffb5\034\uffb5\045\uffb5\046\uffb5\047\uffb5\050" +
    "\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\056\uffb5\057\uffb5" +
    "\060\uffb5\061\uffb5\062\uffb5\064\uffb5\065\uffb5\066\uffb5\067" +
    "\uffb5\070\uffb5\071\uffb5\100\uffb5\105\uffb5\111\uffb5\117\uffb5" +
    "\001\002\000\120\003\uffc9\006\uffc9\007\uffc9\010\uffc9\011" +
    "\uffc9\012\uffc9\015\uffc9\016\uffc9\017\uffc9\021\uffc9\027\uffc9" +
    "\030\uffc9\031\uffc9\032\uffc9\034\uffc9\045\uffc9\046\uffc9\047" +
    "\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\056\uffc9" +
    "\057\uffc9\060\uffc9\061\uffc9\062\uffc9\064\uffc9\065\uffc9\066" +
    "\uffc9\067\uffc9\070\uffc9\071\uffc9\100\uffc9\105\uffc9\111\uffc9" +
    "\116\uffc9\117\uffc9\001\002\000\046\047\117\050\120\051" +
    "\115\052\107\053\122\054\105\056\104\057\116\060\124" +
    "\061\106\062\123\064\110\065\121\066\113\067\114\070" +
    "\112\071\111\100\150\001\002\000\116\003\uffb3\006\uffb3" +
    "\007\uffb3\010\uffb3\011\uffb3\012\uffb3\015\uffb3\016\uffb3\017" +
    "\uffb3\021\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\034\uffb3" +
    "\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053" +
    "\uffb3\054\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3" +
    "\064\uffb3\065\uffb3\066\uffb3\067\uffb3\070\uffb3\071\uffb3\100" +
    "\uffb3\105\uffb3\111\uffb3\117\uffb3\001\002\000\030\013\070" +
    "\014\075\055\067\063\100\065\101\105\077\106\072\107" +
    "\102\110\066\112\073\113\071\001\002\000\030\013\070" +
    "\014\075\055\067\063\100\065\101\105\077\106\072\107" +
    "\102\110\066\112\073\113\071\001\002\000\120\003\uffcb" +
    "\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\015\uffcb\016" +
    "\uffcb\017\uffcb\021\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb" +
    "\034\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052" +
    "\uffcb\053\uffcb\054\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb" +
    "\062\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb\070\uffcb\071" +
    "\uffcb\100\uffcb\105\uffcb\111\uffcb\116\uffcb\117\uffcb\001\002" +
    "\000\116\003\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012" +
    "\uffc1\015\uffc1\016\uffc1\017\uffc1\021\uffc1\027\uffc1\030\uffc1" +
    "\031\uffc1\032\uffc1\034\uffc1\045\uffc1\046\uffc1\047\117\050" +
    "\120\051\115\052\107\053\122\054\105\056\104\057\116" +
    "\060\124\061\106\062\123\064\uffc1\065\uffc1\066\uffc1\067" +
    "\uffc1\070\uffc1\071\uffc1\100\uffc1\105\uffc1\111\uffc1\117\uffc1" +
    "\001\002\000\030\013\070\014\075\055\067\063\100\065" +
    "\101\105\077\106\072\107\102\110\066\112\073\113\071" +
    "\001\002\000\030\013\070\014\075\055\067\063\100\065" +
    "\101\105\077\106\072\107\102\110\066\112\073\113\071" +
    "\001\002\000\030\013\070\014\075\055\067\063\100\065" +
    "\101\105\077\106\072\107\102\110\066\112\073\113\071" +
    "\001\002\000\030\013\070\014\075\055\067\063\100\065" +
    "\101\105\077\106\072\107\102\110\066\112\073\113\071" +
    "\001\002\000\030\013\070\014\075\055\067\063\100\065" +
    "\101\105\077\106\072\107\102\110\066\112\073\113\071" +
    "\001\002\000\030\013\070\014\075\055\067\063\100\065" +
    "\101\105\077\106\072\107\102\110\066\112\073\113\071" +
    "\001\002\000\030\013\070\014\075\055\067\063\100\065" +
    "\101\105\077\106\072\107\102\110\066\112\073\113\071" +
    "\001\002\000\030\013\070\014\075\055\067\063\100\065" +
    "\101\105\077\106\072\107\102\110\066\112\073\113\071" +
    "\001\002\000\030\013\070\014\075\055\067\063\100\065" +
    "\101\105\077\106\072\107\102\110\066\112\073\113\071" +
    "\001\002\000\030\013\070\014\075\055\067\063\100\065" +
    "\101\105\077\106\072\107\102\110\066\112\073\113\071" +
    "\001\002\000\030\013\070\014\075\055\067\063\100\065" +
    "\101\105\077\106\072\107\102\110\066\112\073\113\071" +
    "\001\002\000\030\013\070\014\075\055\067\063\100\065" +
    "\101\105\077\106\072\107\102\110\066\112\073\113\071" +
    "\001\002\000\030\013\070\014\075\055\067\063\100\065" +
    "\101\105\077\106\072\107\102\110\066\112\073\113\071" +
    "\001\002\000\030\013\070\014\075\055\067\063\100\065" +
    "\101\105\077\106\072\107\102\110\066\112\073\113\071" +
    "\001\002\000\030\013\070\014\075\055\067\063\100\065" +
    "\101\105\077\106\072\107\102\110\066\112\073\113\071" +
    "\001\002\000\030\013\070\014\075\055\067\063\100\065" +
    "\101\105\077\106\072\107\102\110\066\112\073\113\071" +
    "\001\002\000\030\013\070\014\075\055\067\063\100\065" +
    "\101\105\077\106\072\107\102\110\066\112\073\113\071" +
    "\001\002\000\116\003\uffb9\006\uffb9\007\uffb9\010\uffb9\011" +
    "\uffb9\012\uffb9\015\uffb9\016\uffb9\017\uffb9\021\uffb9\027\uffb9" +
    "\030\uffb9\031\uffb9\032\uffb9\034\uffb9\045\uffb9\046\uffb9\047" +
    "\117\050\120\051\115\052\107\053\122\054\105\056\104" +
    "\057\116\060\uffb9\061\uffb9\062\uffb9\064\uffb9\065\uffb9\066" +
    "\uffb9\067\uffb9\070\uffb9\071\uffb9\100\uffb9\105\uffb9\111\uffb9" +
    "\117\uffb9\001\002\000\116\003\uffb6\006\uffb6\007\uffb6\010" +
    "\uffb6\011\uffb6\012\uffb6\015\uffb6\016\uffb6\017\uffb6\021\uffb6" +
    "\027\uffb6\030\uffb6\031\uffb6\032\uffb6\034\uffb6\045\uffb6\046" +
    "\uffb6\047\117\050\120\051\115\052\107\053\122\054\105" +
    "\056\104\057\116\060\uffb6\061\uffb6\062\uffb6\064\uffb6\065" +
    "\uffb6\066\uffb6\067\uffb6\070\uffb6\071\uffb6\100\uffb6\105\uffb6" +
    "\111\uffb6\117\uffb6\001\002\000\116\003\uffbd\006\uffbd\007" +
    "\uffbd\010\uffbd\011\uffbd\012\uffbd\015\uffbd\016\uffbd\017\uffbd" +
    "\021\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\034\uffbd\045" +
    "\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd" +
    "\054\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\064" +
    "\uffbd\065\uffbd\066\uffbd\067\uffbd\070\uffbd\071\uffbd\100\uffbd" +
    "\105\uffbd\111\uffbd\117\uffbd\001\002\000\116\003\uffc6\006" +
    "\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\015\uffc6\016\uffc6" +
    "\017\uffc6\021\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\034" +
    "\uffc6\045\uffc6\046\uffc6\047\117\050\120\051\115\052\107" +
    "\053\122\054\105\056\104\057\116\060\124\061\106\062" +
    "\123\064\uffc6\065\uffc6\066\113\067\114\070\112\071\111" +
    "\100\uffc6\105\uffc6\111\uffc6\117\uffc6\001\002\000\116\003" +
    "\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\015\uffbb" +
    "\016\uffbb\017\uffbb\021\uffbb\027\uffbb\030\uffbb\031\uffbb\032" +
    "\uffbb\034\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb" +
    "\052\uffbb\053\uffbb\054\uffbb\056\uffbb\057\uffbb\060\uffbb\061" +
    "\uffbb\062\uffbb\064\uffbb\065\uffbb\066\uffbb\067\uffbb\070\uffbb" +
    "\071\uffbb\100\uffbb\105\uffbb\111\uffbb\117\uffbb\001\002\000" +
    "\116\003\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc" +
    "\015\uffbc\016\uffbc\017\uffbc\021\uffbc\027\uffbc\030\uffbc\031" +
    "\uffbc\032\uffbc\034\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc" +
    "\051\uffbc\052\uffbc\053\uffbc\054\uffbc\056\uffbc\057\uffbc\060" +
    "\uffbc\061\uffbc\062\uffbc\064\uffbc\065\uffbc\066\uffbc\067\uffbc" +
    "\070\uffbc\071\uffbc\100\uffbc\105\uffbc\111\uffbc\117\uffbc\001" +
    "\002\000\116\003\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7" +
    "\012\uffb7\015\uffb7\016\uffb7\017\uffb7\021\uffb7\027\uffb7\030" +
    "\uffb7\031\uffb7\032\uffb7\034\uffb7\045\uffb7\046\uffb7\047\117" +
    "\050\120\051\115\052\107\053\122\054\105\056\uffb7\057" +
    "\uffb7\060\uffb7\061\uffb7\062\uffb7\064\uffb7\065\uffb7\066\uffb7" +
    "\067\uffb7\070\uffb7\071\uffb7\100\uffb7\105\uffb7\111\uffb7\117" +
    "\uffb7\001\002\000\116\003\uffc0\006\uffc0\007\uffc0\010\uffc0" +
    "\011\uffc0\012\uffc0\015\uffc0\016\uffc0\017\uffc0\021\uffc0\027" +
    "\uffc0\030\uffc0\031\uffc0\032\uffc0\034\uffc0\045\uffc0\046\uffc0" +
    "\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\056" +
    "\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\064\uffc0\065\uffc0" +
    "\066\uffc0\067\uffc0\070\uffc0\071\uffc0\100\uffc0\105\uffc0\111" +
    "\uffc0\117\uffc0\001\002\000\116\003\uffc4\006\uffc4\007\uffc4" +
    "\010\uffc4\011\uffc4\012\uffc4\015\uffc4\016\uffc4\017\uffc4\021" +
    "\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\034\uffc4\045\uffc4" +
    "\046\uffc4\047\117\050\120\051\115\052\107\053\122\054" +
    "\105\056\104\057\116\060\124\061\106\062\123\064\uffc4" +
    "\065\uffc4\066\uffc4\067\uffc4\070\uffc4\071\111\100\uffc4\105" +
    "\uffc4\111\uffc4\117\uffc4\001\002\000\116\003\uffc5\006\uffc5" +
    "\007\uffc5\010\uffc5\011\uffc5\012\uffc5\015\uffc5\016\uffc5\017" +
    "\uffc5\021\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\034\uffc5" +
    "\045\uffc5\046\uffc5\047\117\050\120\051\115\052\107\053" +
    "\122\054\105\056\104\057\116\060\124\061\106\062\123" +
    "\064\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\071\111\100" +
    "\uffc5\105\uffc5\111\uffc5\117\uffc5\001\002\000\116\003\uffc2" +
    "\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\015\uffc2\016" +
    "\uffc2\017\uffc2\021\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2" +
    "\034\uffc2\045\uffc2\046\uffc2\047\117\050\120\051\115\052" +
    "\107\053\122\054\105\056\104\057\116\060\124\061\106" +
    "\062\123\064\uffc2\065\uffc2\066\uffc2\067\uffc2\070\uffc2\071" +
    "\111\100\uffc2\105\uffc2\111\uffc2\117\uffc2\001\002\000\116" +
    "\003\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\015" +
    "\uffc3\016\uffc3\017\uffc3\021\uffc3\027\uffc3\030\uffc3\031\uffc3" +
    "\032\uffc3\034\uffc3\045\uffc3\046\uffc3\047\117\050\120\051" +
    "\115\052\107\053\122\054\105\056\104\057\116\060\124" +
    "\061\106\062\123\064\uffc3\065\uffc3\066\uffc3\067\uffc3\070" +
    "\uffc3\071\uffc3\100\uffc3\105\uffc3\111\uffc3\117\uffc3\001\002" +
    "\000\116\003\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012" +
    "\uffc7\015\uffc7\016\uffc7\017\uffc7\021\uffc7\027\uffc7\030\uffc7" +
    "\031\uffc7\032\uffc7\034\uffc7\045\uffc7\046\uffc7\047\117\050" +
    "\120\051\115\052\107\053\122\054\105\056\104\057\116" +
    "\060\124\061\106\062\123\064\uffc7\065\uffc7\066\113\067" +
    "\114\070\112\071\111\100\uffc7\105\uffc7\111\uffc7\117\uffc7" +
    "\001\002\000\116\003\uffbf\006\uffbf\007\uffbf\010\uffbf\011" +
    "\uffbf\012\uffbf\015\uffbf\016\uffbf\017\uffbf\021\uffbf\027\uffbf" +
    "\030\uffbf\031\uffbf\032\uffbf\034\uffbf\045\uffbf\046\uffbf\047" +
    "\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\056\uffbf" +
    "\057\uffbf\060\uffbf\061\uffbf\062\uffbf\064\uffbf\065\uffbf\066" +
    "\uffbf\067\uffbf\070\uffbf\071\uffbf\100\uffbf\105\uffbf\111\uffbf" +
    "\117\uffbf\001\002\000\116\003\uffb8\006\uffb8\007\uffb8\010" +
    "\uffb8\011\uffb8\012\uffb8\015\uffb8\016\uffb8\017\uffb8\021\uffb8" +
    "\027\uffb8\030\uffb8\031\uffb8\032\uffb8\034\uffb8\045\uffb8\046" +
    "\uffb8\047\117\050\120\051\115\052\107\053\122\054\105" +
    "\056\104\057\116\060\uffb8\061\uffb8\062\uffb8\064\uffb8\065" +
    "\uffb8\066\uffb8\067\uffb8\070\uffb8\071\uffb8\100\uffb8\105\uffb8" +
    "\111\uffb8\117\uffb8\001\002\000\116\003\uffbe\006\uffbe\007" +
    "\uffbe\010\uffbe\011\uffbe\012\uffbe\015\uffbe\016\uffbe\017\uffbe" +
    "\021\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\034\uffbe\045" +
    "\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe" +
    "\054\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe\064" +
    "\uffbe\065\uffbe\066\uffbe\067\uffbe\070\uffbe\071\uffbe\100\uffbe" +
    "\105\uffbe\111\uffbe\117\uffbe\001\002\000\116\003\uffba\006" +
    "\uffba\007\uffba\010\uffba\011\uffba\012\uffba\015\uffba\016\uffba" +
    "\017\uffba\021\uffba\027\uffba\030\uffba\031\uffba\032\uffba\034" +
    "\uffba\045\uffba\046\uffba\047\117\050\120\051\115\052\107" +
    "\053\122\054\105\056\uffba\057\uffba\060\uffba\061\uffba\062" +
    "\uffba\064\uffba\065\uffba\066\uffba\067\uffba\070\uffba\071\uffba" +
    "\100\uffba\105\uffba\111\uffba\117\uffba\001\002\000\116\003" +
    "\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\015\uffb1" +
    "\016\uffb1\017\uffb1\021\uffb1\027\uffb1\030\uffb1\031\uffb1\032" +
    "\uffb1\034\uffb1\045\uffb1\046\uffb1\047\117\050\120\051\115" +
    "\052\107\053\122\054\105\056\uffb1\057\uffb1\060\uffb1\061" +
    "\uffb1\062\uffb1\064\uffb1\065\uffb1\066\uffb1\067\uffb1\070\uffb1" +
    "\071\uffb1\100\uffb1\105\uffb1\111\uffb1\117\uffb1\001\002\000" +
    "\116\003\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2" +
    "\015\uffb2\016\uffb2\017\uffb2\021\uffb2\027\uffb2\030\uffb2\031" +
    "\uffb2\032\uffb2\034\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2" +
    "\051\uffb2\052\uffb2\053\uffb2\054\uffb2\056\uffb2\057\uffb2\060" +
    "\uffb2\061\uffb2\062\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2" +
    "\070\uffb2\071\uffb2\100\uffb2\105\uffb2\111\uffb2\117\uffb2\001" +
    "\002\000\030\013\070\014\075\055\067\063\100\065\101" +
    "\105\077\106\072\107\102\110\066\112\073\113\071\001" +
    "\002\000\046\047\117\050\120\051\115\052\107\053\122" +
    "\054\105\056\104\057\116\060\124\061\106\062\123\064" +
    "\110\065\121\066\113\067\114\070\112\071\111\111\152" +
    "\001\002\000\032\003\uffa7\016\uffa7\017\uffa7\021\uffa7\027" +
    "\uffa7\030\uffa7\031\uffa7\032\uffa7\034\uffa7\045\uffa7\105\uffa7" +
    "\117\uffa7\001\002\000\116\003\uffb0\006\uffb0\007\uffb0\010" +
    "\uffb0\011\uffb0\012\uffb0\015\uffb0\016\uffb0\017\uffb0\021\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\032\uffb0\034\uffb0\045\uffb0\046" +
    "\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0" +
    "\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\064\uffb0\065" +
    "\uffb0\066\uffb0\067\uffb0\070\uffb0\071\uffb0\100\uffb0\105\uffb0" +
    "\111\uffb0\117\uffb0\001\002\000\046\047\117\050\120\051" +
    "\115\052\107\053\122\054\105\056\104\057\116\060\124" +
    "\061\106\062\123\064\110\065\121\066\113\067\114\070" +
    "\112\071\111\111\155\001\002\000\116\003\uffb4\006\uffb4" +
    "\007\uffb4\010\uffb4\011\uffb4\012\uffb4\015\uffb4\016\uffb4\017" +
    "\uffb4\021\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\034\uffb4" +
    "\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053" +
    "\uffb4\054\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4" +
    "\064\uffb4\065\uffb4\066\uffb4\067\uffb4\070\uffb4\071\uffb4\100" +
    "\uffb4\105\uffb4\111\uffb4\117\uffb4\001\002\000\004\105\157" +
    "\001\002\000\056\003\ufff9\006\ufff9\007\ufff9\010\ufff9\011" +
    "\ufff9\012\ufff9\015\ufff9\016\ufff9\017\ufff9\021\ufff9\027\ufff9" +
    "\030\ufff9\031\ufff9\032\ufff9\034\ufff9\045\ufff9\046\ufff9\100" +
    "\ufff9\105\ufff9\114\ufff9\116\ufff9\117\ufff9\001\002\000\036" +
    "\003\uffd4\016\uffd4\017\uffd4\021\uffd4\027\uffd4\030\uffd4\031" +
    "\uffd4\032\uffd4\034\uffd4\045\uffd4\100\161\105\uffd4\114\163" +
    "\117\uffd4\001\002\000\004\105\165\001\002\000\032\003" +
    "\uffdc\016\uffdc\017\uffdc\021\uffdc\027\uffdc\030\uffdc\031\uffdc" +
    "\032\uffdc\034\uffdc\045\uffdc\105\uffdc\117\uffdc\001\002\000" +
    "\030\013\070\014\075\055\067\063\100\065\101\105\077" +
    "\106\072\107\102\110\066\112\073\113\071\001\002\000" +
    "\112\003\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3" +
    "\015\uffd3\016\uffd3\017\uffd3\021\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\032\uffd3\034\uffd3\045\uffd3\046\uffd3\047\117\050\120" +
    "\051\115\052\107\053\122\054\105\056\104\057\116\060" +
    "\124\061\106\062\123\064\110\065\121\066\113\067\114" +
    "\070\112\071\111\105\uffd3\117\uffd3\001\002\000\056\003" +
    "\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\015\ufffa" +
    "\016\ufffa\017\ufffa\021\ufffa\027\ufffa\030\ufffa\031\ufffa\032" +
    "\ufffa\034\ufffa\045\ufffa\046\ufffa\100\ufffa\105\ufffa\114\ufffa" +
    "\116\ufffa\117\ufffa\001\002\000\030\003\056\016\063\017" +
    "\054\021\043\027\060\030\061\031\053\032\055\034\064" +
    "\045\042\105\046\001\002\000\032\003\056\016\063\017" +
    "\054\021\043\027\060\030\061\031\053\032\055\034\064" +
    "\045\042\105\046\117\171\001\002\000\032\003\uffe9\016" +
    "\uffe9\017\uffe9\021\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9" +
    "\034\uffe9\045\uffe9\105\uffe9\117\uffe9\001\002\000\004\027" +
    "\172\001\002\000\004\110\173\001\002\000\030\013\070" +
    "\014\075\055\067\063\100\065\101\105\077\106\072\107" +
    "\102\110\066\112\073\113\071\001\002\000\046\047\117" +
    "\050\120\051\115\052\107\053\122\054\105\056\104\057" +
    "\116\060\124\061\106\062\123\064\110\065\121\066\113" +
    "\067\114\070\112\071\111\111\175\001\002\000\032\003" +
    "\uffaa\016\uffaa\017\uffaa\021\uffaa\027\uffaa\030\uffaa\031\uffaa" +
    "\032\uffaa\034\uffaa\045\uffaa\105\uffaa\117\uffaa\001\002\000" +
    "\030\013\070\014\075\055\067\063\100\065\101\105\077" +
    "\106\072\107\102\110\066\112\073\113\071\001\002\000" +
    "\046\047\117\050\120\051\115\052\107\053\122\054\105" +
    "\056\104\057\116\060\124\061\106\062\123\064\110\065" +
    "\121\066\113\067\114\070\112\071\111\111\200\001\002" +
    "\000\004\116\201\001\002\000\030\003\056\016\063\017" +
    "\054\021\043\027\060\030\061\031\053\032\055\034\064" +
    "\045\042\105\046\001\002\000\032\003\056\016\063\017" +
    "\054\021\043\027\060\030\061\031\053\032\055\034\064" +
    "\045\042\105\046\117\203\001\002\000\032\003\uffa9\016" +
    "\uffa9\017\uffa9\021\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9" +
    "\034\uffa9\045\uffa9\105\uffa9\117\uffa9\001\002\000\004\033" +
    "\205\001\002\000\004\100\206\001\002\000\030\013\070" +
    "\014\075\055\067\063\100\065\101\105\077\106\072\107" +
    "\102\110\066\112\073\113\071\001\002\000\046\047\117" +
    "\050\120\051\115\052\107\053\122\054\105\056\104\057" +
    "\116\060\124\061\106\062\123\064\110\065\121\066\113" +
    "\067\114\070\112\071\111\100\210\001\002\000\030\013" +
    "\070\014\075\055\067\063\100\065\101\105\077\106\072" +
    "\107\102\110\066\112\073\113\071\001\002\000\046\047" +
    "\117\050\120\051\115\052\107\053\122\054\105\056\104" +
    "\057\116\060\124\061\106\062\123\064\110\065\121\066" +
    "\113\067\114\070\112\071\111\100\212\001\002\000\030" +
    "\013\070\014\075\055\067\063\100\065\101\105\077\106" +
    "\072\107\102\110\066\112\073\113\071\001\002\000\046" +
    "\047\117\050\120\051\115\052\107\053\122\054\105\056" +
    "\104\057\116\060\124\061\106\062\123\064\110\065\121" +
    "\066\113\067\114\070\112\071\111\111\214\001\002\000" +
    "\032\003\uffa8\016\uffa8\017\uffa8\021\uffa8\027\uffa8\030\uffa8" +
    "\031\uffa8\032\uffa8\034\uffa8\045\uffa8\105\uffa8\117\uffa8\001" +
    "\002\000\030\013\070\014\075\055\067\063\100\065\101" +
    "\105\077\106\072\107\102\110\066\112\073\113\071\001" +
    "\002\000\046\047\117\050\120\051\115\052\107\053\122" +
    "\054\105\056\104\057\116\060\124\061\106\062\123\064" +
    "\110\065\121\066\113\067\114\070\112\071\111\111\217" +
    "\001\002\000\004\116\220\001\002\000\030\003\056\016" +
    "\063\017\054\021\043\027\060\030\061\031\053\032\055" +
    "\034\064\045\042\105\046\001\002\000\032\003\056\016" +
    "\063\017\054\021\043\027\060\030\061\031\053\032\055" +
    "\034\064\045\042\105\046\117\222\001\002\000\034\003" +
    "\uffaf\016\uffaf\017\uffaf\020\223\021\uffaf\027\uffaf\030\uffaf" +
    "\031\uffaf\032\uffaf\034\uffaf\045\uffaf\105\uffaf\117\uffaf\001" +
    "\002\000\006\017\054\116\225\001\002\000\032\003\uffad" +
    "\016\uffad\017\uffad\021\uffad\027\uffad\030\uffad\031\uffad\032" +
    "\uffad\034\uffad\045\uffad\105\uffad\117\uffad\001\002\000\030" +
    "\003\056\016\063\017\054\021\043\027\060\030\061\031" +
    "\053\032\055\034\064\045\042\105\046\001\002\000\032" +
    "\003\056\016\063\017\054\021\043\027\060\030\061\031" +
    "\053\032\055\034\064\045\042\105\046\117\227\001\002" +
    "\000\032\003\uffae\016\uffae\017\uffae\021\uffae\027\uffae\030" +
    "\uffae\031\uffae\032\uffae\034\uffae\045\uffae\105\uffae\117\uffae" +
    "\001\002\000\074\003\uffe5\016\uffe5\017\uffe5\021\uffe5\027" +
    "\uffe5\030\uffe5\031\uffe5\032\uffe5\034\uffe5\045\uffe5\047\117" +
    "\050\120\051\115\052\107\053\122\054\105\056\104\057" +
    "\116\060\124\061\106\062\123\064\110\065\121\066\113" +
    "\067\114\070\112\071\111\105\uffe5\117\uffe5\001\002\000" +
    "\004\114\234\001\002\000\030\013\070\014\075\055\067" +
    "\063\100\065\101\105\077\106\072\107\102\110\066\112" +
    "\073\113\071\001\002\000\074\003\uffac\016\uffac\017\uffac" +
    "\021\uffac\027\uffac\030\uffac\031\uffac\032\uffac\034\uffac\045" +
    "\uffac\047\117\050\120\051\115\052\107\053\122\054\105" +
    "\056\104\057\116\060\124\061\106\062\123\064\110\065" +
    "\121\066\113\067\114\070\112\071\111\105\uffac\117\uffac" +
    "\001\002\000\030\013\070\014\075\055\067\063\100\065" +
    "\101\105\077\106\072\107\102\110\066\112\073\113\071" +
    "\001\002\000\074\003\uffab\016\uffab\017\uffab\021\uffab\027" +
    "\uffab\030\uffab\031\uffab\032\uffab\034\uffab\045\uffab\047\117" +
    "\050\120\051\115\052\107\053\122\054\105\056\104\057" +
    "\116\060\124\061\106\062\123\064\110\065\121\066\113" +
    "\067\114\070\112\071\111\105\uffab\117\uffab\001\002\000" +
    "\004\105\237\001\002\000\004\111\240\001\002\000\004" +
    "\116\241\001\002\000\006\022\246\025\242\001\002\000" +
    "\004\116\260\001\002\000\004\117\257\001\002\000\010" +
    "\022\246\025\242\117\254\001\002\000\010\022\uffa2\025" +
    "\uffa2\117\uffa2\001\002\000\016\013\070\014\075\106\072" +
    "\107\102\112\073\113\071\001\002\000\004\116\250\001" +
    "\002\000\030\003\056\016\063\017\054\021\043\027\060" +
    "\030\061\031\053\032\055\034\064\045\042\105\046\001" +
    "\002\000\032\003\056\016\063\017\054\021\043\027\060" +
    "\030\061\031\053\032\055\034\064\045\042\105\046\117" +
    "\252\001\002\000\010\022\uffa1\025\uffa1\117\uffa1\001\002" +
    "\000\004\117\256\001\002\000\032\003\uffa6\016\uffa6\017" +
    "\uffa6\021\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\034\uffa6" +
    "\045\uffa6\105\uffa6\117\uffa6\001\002\000\010\022\uffa3\025" +
    "\uffa3\117\uffa3\001\002\000\032\003\uffa5\016\uffa5\017\uffa5" +
    "\021\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\034\uffa5\045" +
    "\uffa5\105\uffa5\117\uffa5\001\002\000\032\003\uffa4\016\uffa4" +
    "\017\uffa4\021\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\034" +
    "\uffa4\045\uffa4\105\uffa4\117\uffa4\001\002\000\030\003\056" +
    "\016\063\017\054\021\043\027\060\030\061\031\053\032" +
    "\055\034\064\045\042\105\046\001\002\000\032\003\056" +
    "\016\063\017\054\021\043\027\060\030\061\031\053\032" +
    "\055\034\064\045\042\105\046\117\262\001\002\000\004" +
    "\117\uffa0\001\002\000\030\013\070\014\075\055\067\063" +
    "\100\065\101\105\077\106\072\107\102\110\066\112\073" +
    "\113\071\001\002\000\046\047\117\050\120\051\115\052" +
    "\107\053\122\054\105\056\104\057\116\060\124\061\106" +
    "\062\123\064\110\065\121\066\113\067\114\070\112\071" +
    "\111\111\265\001\002\000\032\003\uff9f\016\uff9f\017\uff9f" +
    "\021\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\034\uff9f\045" +
    "\uff9f\105\uff9f\117\uff9f\001\002\000\026\006\uffef\007\uffef" +
    "\010\uffef\011\uffef\012\uffef\015\uffef\016\uffef\046\uffef\105" +
    "\uffef\117\uffef\001\002\000\014\006\020\007\017\010\021" +
    "\011\032\012\016\001\002\000\004\110\315\001\002\000" +
    "\004\105\300\001\002\000\004\110\273\001\002\000\004" +
    "\111\274\001\002\000\004\116\275\001\002\000\030\003" +
    "\056\016\063\017\054\021\043\027\060\030\061\031\053" +
    "\032\055\034\064\045\042\105\046\001\002\000\032\003" +
    "\056\016\063\017\054\021\043\027\060\030\061\031\053" +
    "\032\055\034\064\045\042\105\046\117\277\001\002\000" +
    "\026\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\015\ufff0" +
    "\016\ufff0\046\ufff0\105\ufff0\117\ufff0\001\002\000\004\110" +
    "\301\001\002\000\016\006\020\007\017\010\021\011\032" +
    "\012\016\111\uffee\001\002\000\004\111\311\001\002\000" +
    "\006\100\uffeb\111\uffeb\001\002\000\004\105\310\001\002" +
    "\000\006\100\306\111\uffed\001\002\000\014\006\020\007" +
    "\017\010\021\011\032\012\016\001\002\000\006\100\uffec" +
    "\111\uffec\001\002\000\006\100\uffea\111\uffea\001\002\000" +
    "\004\116\312\001\002\000\030\003\056\016\063\017\054" +
    "\021\043\027\060\030\061\031\053\032\055\034\064\045" +
    "\042\105\046\001\002\000\032\003\056\016\063\017\054" +
    "\021\043\027\060\030\061\031\053\032\055\034\064\045" +
    "\042\105\046\117\314\001\002\000\026\006\ufff4\007\ufff4" +
    "\010\ufff4\011\ufff4\012\ufff4\015\ufff4\016\ufff4\046\ufff4\105" +
    "\ufff4\117\ufff4\001\002\000\016\006\020\007\017\010\021" +
    "\011\032\012\016\111\uffee\001\002\000\004\111\317\001" +
    "\002\000\004\116\320\001\002\000\030\003\056\016\063" +
    "\017\054\021\043\027\060\030\061\031\053\032\055\034" +
    "\064\045\042\105\046\001\002\000\032\003\056\016\063" +
    "\017\054\021\043\027\060\030\061\031\053\032\055\034" +
    "\064\045\042\105\046\117\322\001\002\000\026\006\ufff1" +
    "\007\ufff1\010\ufff1\011\ufff1\012\ufff1\015\ufff1\016\ufff1\046" +
    "\ufff1\105\ufff1\117\ufff1\001\002\000\004\105\157\001\002" +
    "\000\032\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\015" +
    "\uffd4\016\uffd4\046\uffd4\100\161\105\uffd4\114\163\117\uffd4" +
    "\001\002\000\026\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012" +
    "\uffdb\015\uffdb\016\uffdb\046\uffdb\105\uffdb\117\uffdb\001\002" +
    "\000\004\110\327\001\002\000\016\006\020\007\017\010" +
    "\021\011\032\012\016\111\uffee\001\002\000\004\111\331" +
    "\001\002\000\004\116\332\001\002\000\030\003\056\016" +
    "\063\017\054\021\043\027\060\030\061\031\053\032\055" +
    "\034\064\045\042\105\046\001\002\000\032\003\056\016" +
    "\063\017\054\021\043\027\060\030\061\031\053\032\055" +
    "\034\064\045\042\105\046\117\334\001\002\000\026\006" +
    "\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\015\ufff3\016\ufff3" +
    "\046\ufff3\105\ufff3\117\ufff3\001\002\000\016\006\020\007" +
    "\017\010\021\011\032\012\016\111\uffee\001\002\000\004" +
    "\111\337\001\002\000\004\116\340\001\002\000\030\003" +
    "\056\016\063\017\054\021\043\027\060\030\061\031\053" +
    "\032\055\034\064\045\042\105\046\001\002\000\032\003" +
    "\056\016\063\017\054\021\043\027\060\030\061\031\053" +
    "\032\055\034\064\045\042\105\046\117\342\001\002\000" +
    "\026\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\015\ufff2" +
    "\016\ufff2\046\ufff2\105\ufff2\117\ufff2\001\002\000\006\002" +
    "\ufffd\004\ufffd\001\002\000\026\006\ufff8\007\ufff8\010\ufff8" +
    "\011\ufff8\012\ufff8\015\ufff8\016\ufff8\046\ufff8\105\ufff8\117" +
    "\ufff8\001\002\000\004\105\157\001\002\000\032\006\uffd4" +
    "\007\uffd4\010\uffd4\011\uffd4\012\uffd4\015\uffd4\016\uffd4\046" +
    "\uffd4\100\161\105\uffd4\114\163\117\uffd4\001\002\000\026" +
    "\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\015\uffda\016" +
    "\uffda\046\uffda\105\uffda\117\uffda\001\002\000\006\100\161" +
    "\116\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\346\000\010\002\006\020\005\021\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\013\001\001\000\004\037\347\001\001\000\002" +
    "\001\001\000\014\003\021\005\023\023\030\024\026\041" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\344\001\001\000\012\003\343\023\030\024\026\041\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\041\270\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\022\050\030\040\035\036\045\061\053\046" +
    "\054\051\055\047\056\037\057\043\062\056\063\044\001" +
    "\001\000\026\022\050\030\167\045\061\053\046\054\051" +
    "\055\047\056\037\057\043\062\056\063\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\230\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\025\227\036\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\041\155\001\001\000\002\001\001" +
    "\000\006\025\075\036\073\001\001\000\006\025\153\036" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\146" +
    "\001\001\000\006\025\145\036\073\001\001\000\006\025" +
    "\102\036\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\025\144\036\073\001\001\000\006\025\143\036" +
    "\073\001\001\000\006\025\142\036\073\001\001\000\006" +
    "\025\141\036\073\001\001\000\006\025\140\036\073\001" +
    "\001\000\006\025\137\036\073\001\001\000\006\025\136" +
    "\036\073\001\001\000\006\025\135\036\073\001\001\000" +
    "\006\025\134\036\073\001\001\000\006\025\133\036\073" +
    "\001\001\000\006\025\132\036\073\001\001\000\006\025" +
    "\131\036\073\001\001\000\006\025\130\036\073\001\001" +
    "\000\006\025\127\036\073\001\001\000\006\025\126\036" +
    "\073\001\001\000\006\025\125\036\073\001\001\000\006" +
    "\025\124\036\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\150\036\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\157\001\001\000" +
    "\002\001\001\000\004\026\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\163\036\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\022\050\030\040" +
    "\035\166\045\061\053\046\054\051\055\047\056\037\057" +
    "\043\062\056\063\044\001\001\000\026\022\050\030\167" +
    "\045\061\053\046\054\051\055\047\056\037\057\043\062" +
    "\056\063\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\173\036\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\025\176\036\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\022" +
    "\050\030\040\035\201\045\061\053\046\054\051\055\047" +
    "\056\037\057\043\062\056\063\044\001\001\000\026\022" +
    "\050\030\167\045\061\053\046\054\051\055\047\056\037" +
    "\057\043\062\056\063\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\025\206\036\073" +
    "\001\001\000\002\001\001\000\006\025\210\036\073\001" +
    "\001\000\002\001\001\000\006\025\212\036\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\025\215\036" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\022\050\030\040\035\220\045\061\053\046\054\051\055" +
    "\047\056\037\057\043\062\056\063\044\001\001\000\026" +
    "\022\050\030\167\045\061\053\046\054\051\055\047\056" +
    "\037\057\043\062\056\063\044\001\001\000\002\001\001" +
    "\000\004\045\223\001\001\000\002\001\001\000\030\022" +
    "\050\030\040\035\225\045\061\053\046\054\051\055\047" +
    "\056\037\057\043\062\056\063\044\001\001\000\026\022" +
    "\050\030\167\045\061\053\046\054\051\055\047\056\037" +
    "\057\043\062\056\063\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\025\232\036\073" +
    "\001\001\000\002\001\001\000\006\025\234\036\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\034\242\043\243\044\244\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\034\252" +
    "\044\254\001\001\000\002\001\001\000\004\036\246\001" +
    "\001\000\002\001\001\000\030\022\050\030\040\035\250" +
    "\045\061\053\046\054\051\055\047\056\037\057\043\062" +
    "\056\063\044\001\001\000\026\022\050\030\167\045\061" +
    "\053\046\054\051\055\047\056\037\057\043\062\056\063" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\022\050\030\040\035\260\045\061\053\046" +
    "\054\051\055\047\056\037\057\043\062\056\063\044\001" +
    "\001\000\026\022\050\030\167\045\061\053\046\054\051" +
    "\055\047\056\037\057\043\062\056\063\044\001\001\000" +
    "\002\001\001\000\006\025\263\036\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\322\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\022" +
    "\050\030\040\035\275\045\061\053\046\054\051\055\047" +
    "\056\037\057\043\062\056\063\044\001\001\000\026\022" +
    "\050\030\167\045\061\053\046\054\051\055\047\056\037" +
    "\057\043\062\056\063\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\041\303\050\302\051\304\052\301" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\041\303\050\306\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\022\050\030\040\035\312\045\061\053\046\054\051" +
    "\055\047\056\037\057\043\062\056\063\044\001\001\000" +
    "\026\022\050\030\167\045\061\053\046\054\051\055\047" +
    "\056\037\057\043\062\056\063\044\001\001\000\002\001" +
    "\001\000\012\041\303\050\302\051\304\052\315\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\022\050\030" +
    "\040\035\320\045\061\053\046\054\051\055\047\056\037" +
    "\057\043\062\056\063\044\001\001\000\026\022\050\030" +
    "\167\045\061\053\046\054\051\055\047\056\037\057\043" +
    "\062\056\063\044\001\001\000\002\001\001\000\004\037" +
    "\323\001\001\000\004\026\324\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\041\303\050\302\051\304\052" +
    "\327\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\022\050\030\040\035\332\045\061\053\046\054\051\055" +
    "\047\056\037\057\043\062\056\063\044\001\001\000\026" +
    "\022\050\030\167\045\061\053\046\054\051\055\047\056" +
    "\037\057\043\062\056\063\044\001\001\000\002\001\001" +
    "\000\012\041\303\050\302\051\304\052\335\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\022\050\030\040" +
    "\035\340\045\061\053\046\054\051\055\047\056\037\057" +
    "\043\062\056\063\044\001\001\000\026\022\050\030\167" +
    "\045\061\053\046\054\051\055\047\056\037\057\043\062" +
    "\056\063\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\345\001\001\000\004\026" +
    "\346\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public Expresion sumando;

    public List<Expresion> lista_expresiones;
    public List<Errores> errores = new LinkedList<Errores>();
    public Programa programa = new Programa();
    public List<Metodo> lista_metodos = new LinkedList<>();
    public List<Declaracion> lista_declaraciones = new LinkedList<>();

    public void syntax_error(Symbol cur_token) {
        System.out.println(" Se esperaban: ");
        String esperados = "";
        for (int i = 0; i < expected_token_ids().size(); i++){
            esperados += symbl_name_from_id(expected_token_ids().get(i))+"-";
        }
        System.out.print(esperados+", pero se encontro "+cur_token.value+" en la linea"+cur_token.right+" y en la columna"+cur_token.left);
        errores.add(new Errores(cur_token.right,cur_token.left,"SINTACTICO","Se esperaba "+esperados+" y se encontro "+symbl_name_from_id(cur_token.sym)));
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal "+message+info);
    }
    
    public void report_fatal_error(Symbol cur) {
        System.out.println("unrecovered_syntax_error");
    }

    public void imp(String texto){
        System.out.println(texto);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= pistas 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Pista> e1 = (List<Pista>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            programa = new Programa(e1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // pistas ::= pistas pista 
            {
              List<Pista> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Pista> e1 = (List<Pista>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pista e2 = (Pista)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
            RESULT.add(e2);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pistas",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // pistas ::= pista 
            {
              List<Pista> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pista e1 = (Pista)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new LinkedList<>();
            RESULT.add(e1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pistas",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // pista ::= PISTA ID extiende INDENT lista_declaracion DEDENT 
            {
              Pista RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<String> e3 = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            RESULT = new Pista(lista_metodos,lista_declaraciones,e3,e2.toString());
            lista_metodos = new LinkedList<>();
            lista_declaraciones = new LinkedList<>();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pista",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // extiende ::= 
            {
              List<String> RESULT =null;
		
            RESULT = null;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extiende",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // extiende ::= EXT ids 
            {
              List<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<String> e1 = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extiende",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ids ::= ids COMA ID 
            {
              List<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<String> e1 = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            e1.add(e2.toString()); 
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ids ::= ID 
            {
              List<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new LinkedList<>();
            RESULT.add(e1.toString()); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lista_declaracion ::= lista_declaracion declaraciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lista_declaracion ::= declaraciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaraciones ::= declaracion_global 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaracion e1 = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            lista_declaraciones.add(e1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaraciones ::= metodo 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Metodo e1 = (Metodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            lista_metodos.add(e1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // metodo ::= KEEP tipo ID PAR_A param PAR_C INDENT instrucciones DEDENT 
            {
              Metodo RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Parametro> e3 = (List<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e4 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Metodo(e1.toString(),e2,e3,e4,true,true,false);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // metodo ::= tipo ID PAR_A param PAR_C INDENT instrucciones DEDENT 
            {
              Metodo RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Parametro> e3 = (List<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e4 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Metodo(e1.toString(),e2,e3,e4,true,false,false);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // metodo ::= ID PAR_A param PAR_C INDENT instrucciones DEDENT 
            {
              Metodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Parametro> e2 = (List<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e3 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Metodo(e1.toString(),"void",e2,e3,false,false,false);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // metodo ::= KEEP ID PAR_A param PAR_C INDENT instrucciones DEDENT 
            {
              Metodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Parametro> e2 = (List<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e3 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Metodo(e1.toString(),"void",e2,e3,false,true,false);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // metodo ::= KEEP PRINCIPAL PAR_A PAR_C INDENT instrucciones DEDENT 
            {
              Metodo RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e4 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Metodo("Principal","void",null,e4,false,true,true);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // metodo ::= PRINCIPAL PAR_A PAR_C INDENT instrucciones DEDENT 
            {
              Metodo RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e4 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Metodo("Principal","void",null,e4,false,false,true);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // param ::= 
            {
              List<Parametro> RESULT =null;
		
            RESULT = new LinkedList<>();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // param ::= parametros 
            {
              List<Parametro> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Parametro> e1 = (List<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parametros ::= parametros COMA parametro 
            {
              List<Parametro> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Parametro> e1 = (List<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parametro e2 = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
            RESULT.add(e2);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parametros ::= parametro 
            {
              List<Parametro> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parametro e1 = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new LinkedList<>();
            RESULT.add(e1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parametro ::= tipo ID 
            {
              Parametro RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Parametro(e1.toString(),e2.toString());
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instrucciones ::= instrucciones instruccion 
            {
              List<Instruccion> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e1 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
            RESULT.add(e2);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instrucciones ::= instruccion 
            {
              List<Instruccion> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new LinkedList<>();
            RESULT.add(e1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= declaracion 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaracion e1 = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion ::= asignacion 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Asignacion e1 = (Asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion ::= RETORNA expresion 
            {
              Instruccion RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Retorno(e1,e2right,e2left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccion ::= si 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Si e1 = (Si)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruccion ::= hacer 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Hacer e1 = (Hacer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruccion ::= mientras 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Mientras e1 = (Mientras)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instruccion ::= reproducir 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Reproducir e1 = (Reproducir)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instruccion ::= esperar 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Esperar e1 = (Esperar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instruccion ::= switch 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Switch e1 = (Switch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruccion ::= mensaje 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Mensaje e1 = (Mensaje)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccion ::= error 
            {
              Instruccion RESULT =null;
		
            RESULT = null;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracion ::= VAR tipo ids asignar 
            {
              Declaracion RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<String> e2 = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e3 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            List<Expresion> nueva = new LinkedList<Expresion>();
            nueva.add(e3);
            RESULT = new Declaracion(e2,e1, null,nueva, false, e4right, e4left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracion_global ::= KEEP VAR tipo ids asignar 
            {
              Declaracion RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<String> e2 = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e3 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if (e3!=null){
                List<Expresion> nueva = new LinkedList<Expresion>();
                nueva.add(e3);
                RESULT = new Declaracion(e2,e1, null,nueva, true, e4right, e4left);
            } else {
                RESULT = new Declaracion(e2,e1, null,null, true, e4right, e4left);
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_global",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracion_global ::= VAR tipo ids asignar 
            {
              Declaracion RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<String> e2 = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e3 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if (e3!=null){
                List<Expresion> nueva = new LinkedList<Expresion>();
                nueva.add(e3);
                RESULT = new Declaracion(e2,e1, null,nueva, false, e4right, e4left);
            } else {
                RESULT = new Declaracion(e2,e1, null,null, false, e4right, e4left);
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_global",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // arreglo ::= COR_A items COR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // items ::= items COMA item 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // items ::= item 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // item ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("item",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // item ::= arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("item",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // asignar ::= 
            {
              Expresion RESULT =null;
		
            RESULT = null;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // asignar ::= ASIGNAR expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = e1; 
            sumando = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipo ::= ENTERO 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = "numero";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipo ::= DECIMAL 
            {
              String RESULT =null;
		
            RESULT = "decimal";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipo ::= CADENA 
            {
              String RESULT =null;
		
            RESULT = "string";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipo ::= BOOLEAN 
            {
              String RESULT =null;
		
            RESULT = "boolean";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipo ::= CHAR 
            {
              String RESULT =null;
		
            RESULT = "caracter";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // valor_puntual ::= NUMERO 
            {
              Primitivo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Primitivo("numero",(java_cup.runtime.Symbol) CUP$parser$stack.peek(),Integer.parseInt(e1.toString())); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_puntual",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // valor_puntual ::= STRING 
            {
              Primitivo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Primitivo("string",(java_cup.runtime.Symbol) CUP$parser$stack.peek(),e1.toString()); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_puntual",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // valor_puntual ::= CARACTER 
            {
              Primitivo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Primitivo("caracter",(java_cup.runtime.Symbol) CUP$parser$stack.peek(),e1.toString().charAt(0)); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_puntual",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // valor_puntual ::= TRUE 
            {
              Primitivo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Primitivo("boolean",(java_cup.runtime.Symbol) CUP$parser$stack.peek(),true);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_puntual",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // valor_puntual ::= FALSE 
            {
              Primitivo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Primitivo("boolean",(java_cup.runtime.Symbol) CUP$parser$stack.peek(),false);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_puntual",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // valor_puntual ::= NUMERO_D 
            {
              Primitivo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Primitivo("decimal",(java_cup.runtime.Symbol) CUP$parser$stack.peek(),Double.parseDouble(e1.toString())); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_puntual",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= expresion SUMA expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.SUMA);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= expresion RESTA expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            imp("Encuentra menos"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.RESTA);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= expresion POR expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra por");
            RESULT = new Expresion(e1,e2,Expresion.Operacion.POR);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= expresion ENTRE expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra division"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.ENTRE);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= expresion POT expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra potencia"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.POT);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= expresion MOD expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra modulo"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.MOD);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= RESTA expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra negativo"); 
            RESULT = new Expresion(e1,Expresion.Operacion.NEGATIVO);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= expresion MAYOR expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra mayor"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.MAYOR);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= expresion MENOR expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra menor"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.MENOR);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= expresion MENOR_I expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra menor igual"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.MENOR_I);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= expresion MAYOR_I expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra mayor igual"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.MAYOR_I);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= expresion IGUAL expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra igual"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.IGUAL);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= expresion DIFF expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra diferente"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.DIFF);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= expresion AND expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra and"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.AND);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion ::= expresion OR expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra or"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.OR);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= expresion XOR expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra xor"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.XOR);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= expresion NAND expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra nand"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.NAND);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= expresion NOR expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra nor"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.NOR);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= valor_puntual 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Primitivo e1 = (Primitivo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra valor"); 
            RESULT = new Expresion(e1,Expresion.Operacion.PRIMITIVO);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= PAR_A expresion PAR_C 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            imp("Encuentra parentesis"); 
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= ID 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra arreglo"); 
            RESULT = new Expresion(new Identificador(e1.toString(),null,false,e1left,e1right),Expresion.Operacion.IDENTIFICADOR);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= ID dimensiones 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Expresion> e2 = (List<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra arreglo"); 
            RESULT = new Expresion(new Identificador(e1.toString(),e2,true,e1left,e1right),Expresion.Operacion.IDENTIFICADOR);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= NOT expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra not"); 
            RESULT = new Expresion(e1,Expresion.Operacion.NOT);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= NULO ID 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra arreglo"); 
            RESULT = new Expresion(new Identificador(e1.toString(),null,false,e1left,e1right),Expresion.Operacion.NULO);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // si ::= SI PAR_A expresion PAR_C INDENT instrucciones DEDENT 
            {
              Si RESULT =null;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e2 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Si(e1, e2, null, null, e5right, e5left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // si ::= SI PAR_A expresion PAR_C INDENT instrucciones DEDENT SINO INDENT instrucciones DEDENT 
            {
              Si RESULT =null;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<Instruccion> e2 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e3 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Si(e1, e2, e3, null, e5right, e5left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // si ::= SI PAR_A expresion PAR_C INDENT instrucciones DEDENT SINO si 
            {
              Si RESULT =null;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Instruccion> e2 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Si e3 = (Si)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Si(e1, e2, null, e3, e5right, e5left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // asignacion ::= ID ASIGNAR expresion 
            {
              Asignacion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            List<Expresion> exp = new LinkedList<>();
            exp.add(e2);
            RESULT = new Asignacion(e1.toString(),exp,null,e1right,e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // asignacion ::= ID dimensiones ASIGNAR expresion 
            {
              Asignacion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Expresion> e3 = (List<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            List<Expresion> exp = new LinkedList<>();
            exp.add(e2);
            RESULT = new Asignacion(e1.toString(),exp,e3,e1right,e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // hacer ::= HACER INDENT instrucciones DEDENT MIENTRAS PAR_A expresion PAR_C 
            {
              Hacer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<Instruccion> e3 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Hacer(e2, e3, e1right, e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("hacer",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // mientras ::= MIENTRAS PAR_A expresion PAR_C INDENT instrucciones DEDENT 
            {
              Mientras RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e3 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Mientras(e2, e3, e1right, e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mientras",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // reproducir ::= REPRODUCIR PAR_A NOTAS COMA expresion COMA expresion COMA expresion PAR_C 
            {
              Reproducir RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object e0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion e3 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e4 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Reproducir(e1.toString(),e2,e3,e4,e0right,e0left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reproducir",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // esperar ::= ESPERAR PAR_A expresion COMA expresion PAR_C 
            {
              Esperar RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Esperar(e1,e2,e1right,e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("esperar",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // switch ::= SWITCH PAR_A ID PAR_C INDENT casos DEDENT 
            {
              Switch RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Caso> e3 = (List<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Switch(e2.toString(), e3, null, e1right, e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // switch ::= SWITCH PAR_A ID PAR_C INDENT casos default DEDENT 
            {
              Switch RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Caso> e4 = (List<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e3 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Switch(e2.toString(), e4, e3, e1right, e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // switch ::= SWITCH PAR_A ID PAR_C INDENT default DEDENT 
            {
              Switch RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e3 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Switch(e2.toString(), null, e3, e1right, e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // casos ::= casos caso 
            {
              List<Caso> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Caso> e1 = (List<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caso e2 = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
            RESULT.add(e2);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // casos ::= caso 
            {
              List<Caso> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caso e1 = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new LinkedList<>();
            RESULT.add(e1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // caso ::= CASO valor_puntual INDENT instrucciones DEDENT 
            {
              Caso RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Primitivo e3 = (Primitivo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e2 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Caso(e3, e2, e1right, e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // default ::= DEFAULT INDENT instrucciones DEDENT 
            {
              List<Instruccion> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e1 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("default",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // mensaje ::= MSG PAR_A expresion PAR_C 
            {
              Mensaje RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Mensaje(e1,e1right,e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
