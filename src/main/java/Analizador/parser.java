
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import Interprete.*;
import Interprete.Metodos_Nativos.*;
import java.util.LinkedList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\216\000\002\002\004\000\002\002\003\000\002\014" +
    "\004\000\002\014\003\000\002\015\010\000\002\037\002" +
    "\000\002\037\004\000\002\036\005\000\002\036\003\000" +
    "\002\004\004\000\002\004\003\000\002\003\003\000\002" +
    "\003\003\000\002\020\013\000\002\020\012\000\002\020" +
    "\011\000\002\020\012\000\002\020\011\000\002\020\010" +
    "\000\002\056\002\000\002\056\003\000\002\055\005\000" +
    "\002\055\003\000\002\054\004\000\002\054\005\000\002" +
    "\033\004\000\002\033\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\004" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\064\015\000\002\052\004\000\002\052\004\000\002\052" +
    "\005\000\002\074\006\000\002\074\007\000\002\074\003" +
    "\000\002\074\005\000\002\034\004\000\002\034\003\000" +
    "\002\065\006\000\002\050\002\000\002\050\003\000\002" +
    "\047\005\000\002\047\003\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\005\000\002\042\003" +
    "\000\002\042\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\016\006\000\002\016\010\000\002\017\007\000\002" +
    "\017\006\000\002\017\011\000\002\017\010\000\002\026" +
    "\004\000\002\026\003\000\002\023\005\000\002\073\002" +
    "\000\002\073\006\000\002\071\005\000\002\070\005\000" +
    "\002\070\003\000\002\072\003\000\002\072\003\000\002" +
    "\022\002\000\002\022\004\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\004" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\003\000\002\021\005" +
    "\000\002\021\003\000\002\021\004\000\002\021\004\000" +
    "\002\021\003\000\002\021\004\000\002\046\011\000\002" +
    "\046\015\000\002\046\013\000\002\067\005\000\002\067" +
    "\006\000\002\063\012\000\002\062\011\000\002\066\011" +
    "\000\002\066\012\000\002\066\011\000\002\044\004\000" +
    "\002\044\003\000\002\045\007\000\002\032\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012e\000\004\004\005\001\002\000\006\002\ufffe\004" +
    "\ufffe\001\002\000\004\105\012\001\002\000\006\002\000" +
    "\004\005\001\002\000\004\002\010\001\002\000\004\002" +
    "\001\001\002\000\006\002\uffff\004\uffff\001\002\000\006" +
    "\005\013\116\ufffc\001\002\000\004\105\221\001\002\000" +
    "\004\116\015\001\002\000\024\006\020\007\017\010\021" +
    "\011\032\012\016\015\030\016\023\046\033\105\025\001" +
    "\002\000\006\104\uffa3\105\uffa3\001\002\000\006\104\uffa4" +
    "\105\uffa4\001\002\000\006\104\uffa5\105\uffa5\001\002\000" +
    "\006\104\uffa2\105\uffa2\001\002\000\026\006\ufff7\007\ufff7" +
    "\010\ufff7\011\ufff7\012\ufff7\015\ufff7\016\ufff7\046\ufff7\105" +
    "\ufff7\117\ufff7\001\002\000\014\006\020\007\017\010\021" +
    "\011\032\012\016\001\002\000\026\006\020\007\017\010" +
    "\021\011\032\012\016\015\030\016\023\046\033\105\025" +
    "\117\u0127\001\002\000\004\110\u0121\001\002\000\004\105" +
    "\u011a\001\002\000\026\006\ufff5\007\ufff5\010\ufff5\011\ufff5" +
    "\012\ufff5\015\ufff5\016\ufff5\046\ufff5\105\ufff5\117\ufff5\001" +
    "\002\000\022\006\020\007\017\010\021\011\032\012\016" +
    "\016\365\046\370\105\366\001\002\000\026\006\ufff6\007" +
    "\ufff6\010\ufff6\011\ufff6\012\ufff6\015\ufff6\016\ufff6\046\ufff6" +
    "\105\ufff6\117\ufff6\001\002\000\006\104\uffa1\105\uffa1\001" +
    "\002\000\004\110\034\001\002\000\004\111\035\001\002" +
    "\000\004\116\036\001\002\000\040\003\060\016\067\017" +
    "\057\021\046\026\051\027\064\030\065\031\056\032\061" +
    "\034\071\035\055\043\062\044\040\045\045\105\052\001" +
    "\002\000\042\003\060\016\067\017\057\021\046\026\051" +
    "\027\064\030\065\031\056\032\061\034\071\035\055\043" +
    "\062\044\040\045\045\105\052\117\364\001\002\000\004" +
    "\110\uffbd\001\002\000\046\003\uffe4\016\uffe4\017\uffe4\021" +
    "\uffe4\023\uffe4\024\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4" +
    "\032\uffe4\034\uffe4\035\uffe4\043\uffe4\044\uffe4\045\uffe4\105" +
    "\uffe4\117\uffe4\001\002\000\046\003\uffe5\016\uffe5\017\uffe5" +
    "\021\uffe5\023\uffe5\024\uffe5\026\uffe5\027\uffe5\030\uffe5\031" +
    "\uffe5\032\uffe5\034\uffe5\035\uffe5\043\uffe5\044\uffe5\045\uffe5" +
    "\105\uffe5\117\uffe5\001\002\000\046\003\uffdf\016\uffdf\017" +
    "\uffdf\021\uffdf\023\uffdf\024\uffdf\026\uffdf\027\uffdf\030\uffdf" +
    "\031\uffdf\032\uffdf\034\uffdf\035\uffdf\043\uffdf\044\uffdf\045" +
    "\uffdf\105\uffdf\117\uffdf\001\002\000\042\003\uffe7\016\uffe7" +
    "\017\uffe7\021\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032" +
    "\uffe7\034\uffe7\035\uffe7\043\uffe7\044\uffe7\045\uffe7\105\uffe7" +
    "\117\uffe7\001\002\000\004\110\uffc0\001\002\000\004\110" +
    "\336\001\002\000\046\003\uffe0\016\uffe0\017\uffe0\021\uffe0" +
    "\023\uffe0\024\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\034\uffe0\035\uffe0\043\uffe0\044\uffe0\045\uffe0\105\uffe0" +
    "\117\uffe0\001\002\000\046\003\uffe3\016\uffe3\017\uffe3\021" +
    "\uffe3\023\uffe3\024\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3" +
    "\032\uffe3\034\uffe3\035\uffe3\043\uffe3\044\uffe3\045\uffe3\105" +
    "\uffe3\117\uffe3\001\002\000\004\110\307\001\002\000\016" +
    "\072\301\073\277\074\276\075\205\110\uffc1\114\302\001" +
    "\002\000\046\003\uffde\016\uffde\017\uffde\021\uffde\023\uffde" +
    "\024\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\034" +
    "\uffde\035\uffde\043\uffde\044\uffde\045\uffde\105\uffde\117\uffde" +
    "\001\002\000\046\003\uffe6\016\uffe6\017\uffe6\021\uffe6\023" +
    "\uffe6\024\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6" +
    "\034\uffe6\035\uffe6\043\uffe6\044\uffe6\045\uffe6\105\uffe6\117" +
    "\uffe6\001\002\000\004\110\uffbf\001\002\000\044\013\104" +
    "\014\115\032\061\034\071\035\055\043\062\044\040\045" +
    "\045\055\123\063\101\065\125\105\106\106\111\107\110" +
    "\110\105\112\117\113\077\001\002\000\004\110\262\001" +
    "\002\000\046\003\uffdc\016\uffdc\017\uffdc\021\uffdc\023\uffdc" +
    "\024\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\034" +
    "\uffdc\035\uffdc\043\uffdc\044\uffdc\045\uffdc\105\uffdc\117\uffdc" +
    "\001\002\000\004\110\uffbc\001\002\000\004\110\uffbe\001" +
    "\002\000\046\003\uffdd\016\uffdd\017\uffdd\021\uffdd\023\uffdd" +
    "\024\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\034" +
    "\uffdd\035\uffdd\043\uffdd\044\uffdd\045\uffdd\105\uffdd\117\uffdd" +
    "\001\002\000\004\110\254\001\002\000\004\116\240\001" +
    "\002\000\046\003\uffe1\016\uffe1\017\uffe1\021\uffe1\023\uffe1" +
    "\024\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\034" +
    "\uffe1\035\uffe1\043\uffe1\044\uffe1\045\uffe1\105\uffe1\117\uffe1" +
    "\001\002\000\014\006\020\007\017\010\021\011\032\012" +
    "\016\001\002\000\004\110\072\001\002\000\004\110\uffbb" +
    "\001\002\000\066\013\104\014\115\017\114\032\061\033" +
    "\116\034\071\035\055\036\120\037\074\040\113\041\076" +
    "\042\124\043\062\044\040\045\045\055\123\063\101\065" +
    "\125\101\121\105\106\106\111\107\110\110\105\111\uffd0" +
    "\112\117\113\077\001\002\000\006\100\uffcd\111\uffcd\001" +
    "\002\000\006\100\uffc5\111\uffc5\001\002\000\006\100\uffcb" +
    "\111\uffcb\001\002\000\006\100\uffc3\111\uffc3\001\002\000" +
    "\142\003\uff9b\006\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b" +
    "\015\uff9b\016\uff9b\017\uff9b\021\uff9b\023\uff9b\024\uff9b\026" +
    "\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\034\uff9b\035\uff9b" +
    "\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b\051" +
    "\uff9b\052\uff9b\053\uff9b\054\uff9b\056\uff9b\057\uff9b\060\uff9b" +
    "\061\uff9b\062\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b\070" +
    "\uff9b\071\uff9b\076\uff9b\100\uff9b\102\uff9b\105\uff9b\111\uff9b" +
    "\116\uff9b\117\uff9b\121\uff9b\001\002\000\050\047\141\050" +
    "\143\051\140\052\132\053\144\054\130\056\127\057\142" +
    "\060\147\061\131\062\146\064\133\065\145\066\136\067" +
    "\137\070\135\071\134\100\uffcc\111\uffcc\001\002\000\044" +
    "\013\104\014\115\032\061\034\071\035\055\043\062\044" +
    "\040\045\045\055\123\063\101\065\125\105\106\106\111" +
    "\107\110\110\105\112\117\113\077\001\002\000\140\003" +
    "\uff88\006\uff88\007\uff88\010\uff88\011\uff88\012\uff88\015\uff88" +
    "\016\uff88\017\uff88\021\uff88\023\uff88\024\uff88\026\uff88\027" +
    "\uff88\030\uff88\031\uff88\032\uff88\034\uff88\035\uff88\043\uff88" +
    "\044\uff88\045\uff88\046\uff88\047\uff88\050\uff88\051\uff88\052" +
    "\uff88\053\uff88\054\uff88\056\uff88\057\uff88\060\uff88\061\uff88" +
    "\062\uff88\064\uff88\065\uff88\066\uff88\067\uff88\070\uff88\071" +
    "\uff88\076\uff88\100\uff88\102\uff88\105\uff88\111\uff88\117\uff88" +
    "\121\uff88\001\002\000\006\100\215\111\uffcf\001\002\000" +
    "\142\003\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d" +
    "\015\uff9d\016\uff9d\017\uff9d\021\uff9d\023\uff9d\024\uff9d\026" +
    "\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\034\uff9d\035\uff9d" +
    "\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d\051" +
    "\uff9d\052\uff9d\053\uff9d\054\uff9d\056\uff9d\057\uff9d\060\uff9d" +
    "\061\uff9d\062\uff9d\064\uff9d\065\uff9d\066\uff9d\067\uff9d\070" +
    "\uff9d\071\uff9d\076\uff9d\100\uff9d\102\uff9d\105\uff9d\111\uff9d" +
    "\116\uff9d\117\uff9d\121\uff9d\001\002\000\044\013\104\014" +
    "\115\032\061\034\071\035\055\043\062\044\040\045\045" +
    "\055\123\063\101\065\125\105\106\106\111\107\110\110" +
    "\105\112\117\113\077\001\002\000\144\003\uff86\006\uff86" +
    "\007\uff86\010\uff86\011\uff86\012\uff86\015\uff86\016\uff86\017" +
    "\uff86\021\uff86\023\uff86\024\uff86\026\uff86\027\uff86\030\uff86" +
    "\031\uff86\032\uff86\034\uff86\035\uff86\043\uff86\044\uff86\045" +
    "\uff86\046\uff86\047\uff86\050\uff86\051\uff86\052\uff86\053\uff86" +
    "\054\uff86\056\uff86\057\uff86\060\uff86\061\uff86\062\uff86\064" +
    "\uff86\065\uff86\066\uff86\067\uff86\070\uff86\071\uff86\075\205" +
    "\076\uff86\100\uff86\102\uff86\105\uff86\110\uffc1\111\uff86\117" +
    "\uff86\121\uff86\001\002\000\140\003\uff83\006\uff83\007\uff83" +
    "\010\uff83\011\uff83\012\uff83\015\uff83\016\uff83\017\uff83\021" +
    "\uff83\023\uff83\024\uff83\026\uff83\027\uff83\030\uff83\031\uff83" +
    "\032\uff83\034\uff83\035\uff83\043\uff83\044\uff83\045\uff83\046" +
    "\uff83\047\uff83\050\uff83\051\uff83\052\uff83\053\uff83\054\uff83" +
    "\056\uff83\057\uff83\060\uff83\061\uff83\062\uff83\064\uff83\065" +
    "\uff83\066\uff83\067\uff83\070\uff83\071\uff83\076\uff83\100\uff83" +
    "\102\uff83\105\uff83\111\uff83\117\uff83\121\uff83\001\002\000" +
    "\142\003\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e" +
    "\015\uff9e\016\uff9e\017\uff9e\021\uff9e\023\uff9e\024\uff9e\026" +
    "\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\034\uff9e\035\uff9e" +
    "\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e\051" +
    "\uff9e\052\uff9e\053\uff9e\054\uff9e\056\uff9e\057\uff9e\060\uff9e" +
    "\061\uff9e\062\uff9e\064\uff9e\065\uff9e\066\uff9e\067\uff9e\070" +
    "\uff9e\071\uff9e\076\uff9e\100\uff9e\102\uff9e\105\uff9e\111\uff9e" +
    "\116\uff9e\117\uff9e\121\uff9e\001\002\000\142\003\uff9f\006" +
    "\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\015\uff9f\016\uff9f" +
    "\017\uff9f\021\uff9f\023\uff9f\024\uff9f\026\uff9f\027\uff9f\030" +
    "\uff9f\031\uff9f\032\uff9f\034\uff9f\035\uff9f\043\uff9f\044\uff9f" +
    "\045\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053" +
    "\uff9f\054\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f" +
    "\064\uff9f\065\uff9f\066\uff9f\067\uff9f\070\uff9f\071\uff9f\076" +
    "\uff9f\100\uff9f\102\uff9f\105\uff9f\111\uff9f\116\uff9f\117\uff9f" +
    "\121\uff9f\001\002\000\004\111\204\001\002\000\006\100" +
    "\uffc4\111\uffc4\001\002\000\006\100\uffc7\111\uffc7\001\002" +
    "\000\142\003\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012" +
    "\uff9c\015\uff9c\016\uff9c\017\uff9c\021\uff9c\023\uff9c\024\uff9c" +
    "\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\034\uff9c\035" +
    "\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c" +
    "\051\uff9c\052\uff9c\053\uff9c\054\uff9c\056\uff9c\057\uff9c\060" +
    "\uff9c\061\uff9c\062\uff9c\064\uff9c\065\uff9c\066\uff9c\067\uff9c" +
    "\070\uff9c\071\uff9c\076\uff9c\100\uff9c\102\uff9c\105\uff9c\111" +
    "\uff9c\116\uff9c\117\uff9c\121\uff9c\001\002\000\006\100\uffc8" +
    "\111\uffc8\001\002\000\142\003\uffa0\006\uffa0\007\uffa0\010" +
    "\uffa0\011\uffa0\012\uffa0\015\uffa0\016\uffa0\017\uffa0\021\uffa0" +
    "\023\uffa0\024\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032" +
    "\uffa0\034\uffa0\035\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0" +
    "\047\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0\056" +
    "\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\064\uffa0\065\uffa0" +
    "\066\uffa0\067\uffa0\070\uffa0\071\uffa0\076\uffa0\100\uffa0\102" +
    "\uffa0\105\uffa0\111\uffa0\116\uffa0\117\uffa0\121\uffa0\001\002" +
    "\000\006\100\uffc6\111\uffc6\001\002\000\046\013\104\014" +
    "\115\032\061\034\071\035\055\043\062\044\040\045\045" +
    "\055\123\063\101\065\125\101\175\105\106\106\111\107" +
    "\110\110\105\112\117\113\077\001\002\000\006\100\uffca" +
    "\111\uffca\001\002\000\004\105\171\001\002\000\006\100" +
    "\uffc2\111\uffc2\001\002\000\044\013\104\014\115\032\061" +
    "\034\071\035\055\043\062\044\040\045\045\055\123\063" +
    "\101\065\125\105\106\106\111\107\110\110\105\112\117" +
    "\113\077\001\002\000\140\003\uff94\006\uff94\007\uff94\010" +
    "\uff94\011\uff94\012\uff94\015\uff94\016\uff94\017\uff94\021\uff94" +
    "\023\uff94\024\uff94\026\uff94\027\uff94\030\uff94\031\uff94\032" +
    "\uff94\034\uff94\035\uff94\043\uff94\044\uff94\045\uff94\046\uff94" +
    "\047\141\050\143\051\140\052\132\053\144\054\130\056" +
    "\127\057\142\060\147\061\131\062\146\064\uff94\065\uff94" +
    "\066\uff94\067\uff94\070\uff94\071\uff94\076\uff94\100\uff94\102" +
    "\uff94\105\uff94\111\uff94\117\uff94\121\uff94\001\002\000\044" +
    "\013\104\014\115\032\061\034\071\035\055\043\062\044" +
    "\040\045\045\055\123\063\101\065\125\105\106\106\111" +
    "\107\110\110\105\112\117\113\077\001\002\000\044\013" +
    "\104\014\115\032\061\034\071\035\055\043\062\044\040" +
    "\045\045\055\123\063\101\065\125\105\106\106\111\107" +
    "\110\110\105\112\117\113\077\001\002\000\044\013\104" +
    "\014\115\032\061\034\071\035\055\043\062\044\040\045" +
    "\045\055\123\063\101\065\125\105\106\106\111\107\110" +
    "\110\105\112\117\113\077\001\002\000\044\013\104\014" +
    "\115\032\061\034\071\035\055\043\062\044\040\045\045" +
    "\055\123\063\101\065\125\105\106\106\111\107\110\110" +
    "\105\112\117\113\077\001\002\000\044\013\104\014\115" +
    "\032\061\034\071\035\055\043\062\044\040\045\045\055" +
    "\123\063\101\065\125\105\106\106\111\107\110\110\105" +
    "\112\117\113\077\001\002\000\044\013\104\014\115\032" +
    "\061\034\071\035\055\043\062\044\040\045\045\055\123" +
    "\063\101\065\125\105\106\106\111\107\110\110\105\112" +
    "\117\113\077\001\002\000\044\013\104\014\115\032\061" +
    "\034\071\035\055\043\062\044\040\045\045\055\123\063" +
    "\101\065\125\105\106\106\111\107\110\110\105\112\117" +
    "\113\077\001\002\000\044\013\104\014\115\032\061\034" +
    "\071\035\055\043\062\044\040\045\045\055\123\063\101" +
    "\065\125\105\106\106\111\107\110\110\105\112\117\113" +
    "\077\001\002\000\044\013\104\014\115\032\061\034\071" +
    "\035\055\043\062\044\040\045\045\055\123\063\101\065" +
    "\125\105\106\106\111\107\110\110\105\112\117\113\077" +
    "\001\002\000\044\013\104\014\115\032\061\034\071\035" +
    "\055\043\062\044\040\045\045\055\123\063\101\065\125" +
    "\105\106\106\111\107\110\110\105\112\117\113\077\001" +
    "\002\000\044\013\104\014\115\032\061\034\071\035\055" +
    "\043\062\044\040\045\045\055\123\063\101\065\125\105" +
    "\106\106\111\107\110\110\105\112\117\113\077\001\002" +
    "\000\044\013\104\014\115\032\061\034\071\035\055\043" +
    "\062\044\040\045\045\055\123\063\101\065\125\105\106" +
    "\106\111\107\110\110\105\112\117\113\077\001\002\000" +
    "\044\013\104\014\115\032\061\034\071\035\055\043\062" +
    "\044\040\045\045\055\123\063\101\065\125\105\106\106" +
    "\111\107\110\110\105\112\117\113\077\001\002\000\044" +
    "\013\104\014\115\032\061\034\071\035\055\043\062\044" +
    "\040\045\045\055\123\063\101\065\125\105\106\106\111" +
    "\107\110\110\105\112\117\113\077\001\002\000\044\013" +
    "\104\014\115\032\061\034\071\035\055\043\062\044\040" +
    "\045\045\055\123\063\101\065\125\105\106\106\111\107" +
    "\110\110\105\112\117\113\077\001\002\000\044\013\104" +
    "\014\115\032\061\034\071\035\055\043\062\044\040\045" +
    "\045\055\123\063\101\065\125\105\106\106\111\107\110" +
    "\110\105\112\117\113\077\001\002\000\044\013\104\014" +
    "\115\032\061\034\071\035\055\043\062\044\040\045\045" +
    "\055\123\063\101\065\125\105\106\106\111\107\110\110" +
    "\105\112\117\113\077\001\002\000\140\003\uff8c\006\uff8c" +
    "\007\uff8c\010\uff8c\011\uff8c\012\uff8c\015\uff8c\016\uff8c\017" +
    "\uff8c\021\uff8c\023\uff8c\024\uff8c\026\uff8c\027\uff8c\030\uff8c" +
    "\031\uff8c\032\uff8c\034\uff8c\035\uff8c\043\uff8c\044\uff8c\045" +
    "\uff8c\046\uff8c\047\141\050\143\051\140\052\132\053\144" +
    "\054\130\056\127\057\142\060\uff8c\061\uff8c\062\uff8c\064" +
    "\uff8c\065\uff8c\066\uff8c\067\uff8c\070\uff8c\071\uff8c\076\uff8c" +
    "\100\uff8c\102\uff8c\105\uff8c\111\uff8c\117\uff8c\121\uff8c\001" +
    "\002\000\140\003\uff89\006\uff89\007\uff89\010\uff89\011\uff89" +
    "\012\uff89\015\uff89\016\uff89\017\uff89\021\uff89\023\uff89\024" +
    "\uff89\026\uff89\027\uff89\030\uff89\031\uff89\032\uff89\034\uff89" +
    "\035\uff89\043\uff89\044\uff89\045\uff89\046\uff89\047\141\050" +
    "\143\051\140\052\132\053\144\054\130\056\127\057\142" +
    "\060\uff89\061\uff89\062\uff89\064\uff89\065\uff89\066\uff89\067" +
    "\uff89\070\uff89\071\uff89\076\uff89\100\uff89\102\uff89\105\uff89" +
    "\111\uff89\117\uff89\121\uff89\001\002\000\140\003\uff99\006" +
    "\uff99\007\uff99\010\uff99\011\uff99\012\uff99\015\uff99\016\uff99" +
    "\017\uff99\021\uff99\023\uff99\024\uff99\026\uff99\027\uff99\030" +
    "\uff99\031\uff99\032\uff99\034\uff99\035\uff99\043\uff99\044\uff99" +
    "\045\uff99\046\uff99\047\141\050\143\051\140\052\132\053" +
    "\144\054\130\056\127\057\142\060\147\061\131\062\146" +
    "\064\uff99\065\uff99\066\136\067\137\070\135\071\134\076" +
    "\uff99\100\uff99\102\uff99\105\uff99\111\uff99\117\uff99\121\uff99" +
    "\001\002\000\140\003\uff90\006\uff90\007\uff90\010\uff90\011" +
    "\uff90\012\uff90\015\uff90\016\uff90\017\uff90\021\uff90\023\uff90" +
    "\024\uff90\026\uff90\027\uff90\030\uff90\031\uff90\032\uff90\034" +
    "\uff90\035\uff90\043\uff90\044\uff90\045\uff90\046\uff90\047\uff90" +
    "\050\uff90\051\uff90\052\uff90\053\uff90\054\uff90\056\uff90\057" +
    "\uff90\060\uff90\061\uff90\062\uff90\064\uff90\065\uff90\066\uff90" +
    "\067\uff90\070\uff90\071\uff90\076\uff90\100\uff90\102\uff90\105" +
    "\uff90\111\uff90\117\uff90\121\uff90\001\002\000\140\003\uff8e" +
    "\006\uff8e\007\uff8e\010\uff8e\011\uff8e\012\uff8e\015\uff8e\016" +
    "\uff8e\017\uff8e\021\uff8e\023\uff8e\024\uff8e\026\uff8e\027\uff8e" +
    "\030\uff8e\031\uff8e\032\uff8e\034\uff8e\035\uff8e\043\uff8e\044" +
    "\uff8e\045\uff8e\046\uff8e\047\uff8e\050\uff8e\051\uff8e\052\uff8e" +
    "\053\uff8e\054\uff8e\056\uff8e\057\uff8e\060\uff8e\061\uff8e\062" +
    "\uff8e\064\uff8e\065\uff8e\066\uff8e\067\uff8e\070\uff8e\071\uff8e" +
    "\076\uff8e\100\uff8e\102\uff8e\105\uff8e\111\uff8e\117\uff8e\121" +
    "\uff8e\001\002\000\140\003\uff8a\006\uff8a\007\uff8a\010\uff8a" +
    "\011\uff8a\012\uff8a\015\uff8a\016\uff8a\017\uff8a\021\uff8a\023" +
    "\uff8a\024\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a" +
    "\034\uff8a\035\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a\047" +
    "\141\050\143\051\140\052\132\053\144\054\130\056\uff8a" +
    "\057\uff8a\060\uff8a\061\uff8a\062\uff8a\064\uff8a\065\uff8a\066" +
    "\uff8a\067\uff8a\070\uff8a\071\uff8a\076\uff8a\100\uff8a\102\uff8a" +
    "\105\uff8a\111\uff8a\117\uff8a\121\uff8a\001\002\000\140\003" +
    "\uff8f\006\uff8f\007\uff8f\010\uff8f\011\uff8f\012\uff8f\015\uff8f" +
    "\016\uff8f\017\uff8f\021\uff8f\023\uff8f\024\uff8f\026\uff8f\027" +
    "\uff8f\030\uff8f\031\uff8f\032\uff8f\034\uff8f\035\uff8f\043\uff8f" +
    "\044\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f\051\uff8f\052" +
    "\uff8f\053\uff8f\054\uff8f\056\uff8f\057\uff8f\060\uff8f\061\uff8f" +
    "\062\uff8f\064\uff8f\065\uff8f\066\uff8f\067\uff8f\070\uff8f\071" +
    "\uff8f\076\uff8f\100\uff8f\102\uff8f\105\uff8f\111\uff8f\117\uff8f" +
    "\121\uff8f\001\002\000\140\003\uff93\006\uff93\007\uff93\010" +
    "\uff93\011\uff93\012\uff93\015\uff93\016\uff93\017\uff93\021\uff93" +
    "\023\uff93\024\uff93\026\uff93\027\uff93\030\uff93\031\uff93\032" +
    "\uff93\034\uff93\035\uff93\043\uff93\044\uff93\045\uff93\046\uff93" +
    "\047\uff93\050\uff93\051\uff93\052\uff93\053\uff93\054\uff93\056" +
    "\uff93\057\uff93\060\uff93\061\uff93\062\uff93\064\uff93\065\uff93" +
    "\066\uff93\067\uff93\070\uff93\071\uff93\076\uff93\100\uff93\102" +
    "\uff93\105\uff93\111\uff93\117\uff93\121\uff93\001\002\000\140" +
    "\003\uff97\006\uff97\007\uff97\010\uff97\011\uff97\012\uff97\015" +
    "\uff97\016\uff97\017\uff97\021\uff97\023\uff97\024\uff97\026\uff97" +
    "\027\uff97\030\uff97\031\uff97\032\uff97\034\uff97\035\uff97\043" +
    "\uff97\044\uff97\045\uff97\046\uff97\047\141\050\143\051\140" +
    "\052\132\053\144\054\130\056\127\057\142\060\147\061" +
    "\131\062\146\064\uff97\065\uff97\066\uff97\067\uff97\070\uff97" +
    "\071\134\076\uff97\100\uff97\102\uff97\105\uff97\111\uff97\117" +
    "\uff97\121\uff97\001\002\000\140\003\uff98\006\uff98\007\uff98" +
    "\010\uff98\011\uff98\012\uff98\015\uff98\016\uff98\017\uff98\021" +
    "\uff98\023\uff98\024\uff98\026\uff98\027\uff98\030\uff98\031\uff98" +
    "\032\uff98\034\uff98\035\uff98\043\uff98\044\uff98\045\uff98\046" +
    "\uff98\047\141\050\143\051\140\052\132\053\144\054\130" +
    "\056\127\057\142\060\147\061\131\062\146\064\uff98\065" +
    "\uff98\066\uff98\067\uff98\070\uff98\071\134\076\uff98\100\uff98" +
    "\102\uff98\105\uff98\111\uff98\117\uff98\121\uff98\001\002\000" +
    "\140\003\uff95\006\uff95\007\uff95\010\uff95\011\uff95\012\uff95" +
    "\015\uff95\016\uff95\017\uff95\021\uff95\023\uff95\024\uff95\026" +
    "\uff95\027\uff95\030\uff95\031\uff95\032\uff95\034\uff95\035\uff95" +
    "\043\uff95\044\uff95\045\uff95\046\uff95\047\141\050\143\051" +
    "\140\052\132\053\144\054\130\056\127\057\142\060\147" +
    "\061\131\062\146\064\uff95\065\uff95\066\uff95\067\uff95\070" +
    "\uff95\071\134\076\uff95\100\uff95\102\uff95\105\uff95\111\uff95" +
    "\117\uff95\121\uff95\001\002\000\140\003\uff96\006\uff96\007" +
    "\uff96\010\uff96\011\uff96\012\uff96\015\uff96\016\uff96\017\uff96" +
    "\021\uff96\023\uff96\024\uff96\026\uff96\027\uff96\030\uff96\031" +
    "\uff96\032\uff96\034\uff96\035\uff96\043\uff96\044\uff96\045\uff96" +
    "\046\uff96\047\141\050\143\051\140\052\132\053\144\054" +
    "\130\056\127\057\142\060\147\061\131\062\146\064\uff96" +
    "\065\uff96\066\uff96\067\uff96\070\uff96\071\uff96\076\uff96\100" +
    "\uff96\102\uff96\105\uff96\111\uff96\117\uff96\121\uff96\001\002" +
    "\000\140\003\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012" +
    "\uff9a\015\uff9a\016\uff9a\017\uff9a\021\uff9a\023\uff9a\024\uff9a" +
    "\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\034\uff9a\035" +
    "\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047\141\050\143" +
    "\051\140\052\132\053\144\054\130\056\127\057\142\060" +
    "\147\061\131\062\146\064\uff9a\065\uff9a\066\136\067\137" +
    "\070\135\071\134\076\uff9a\100\uff9a\102\uff9a\105\uff9a\111" +
    "\uff9a\117\uff9a\121\uff9a\001\002\000\140\003\uff92\006\uff92" +
    "\007\uff92\010\uff92\011\uff92\012\uff92\015\uff92\016\uff92\017" +
    "\uff92\021\uff92\023\uff92\024\uff92\026\uff92\027\uff92\030\uff92" +
    "\031\uff92\032\uff92\034\uff92\035\uff92\043\uff92\044\uff92\045" +
    "\uff92\046\uff92\047\uff92\050\uff92\051\uff92\052\uff92\053\uff92" +
    "\054\uff92\056\uff92\057\uff92\060\uff92\061\uff92\062\uff92\064" +
    "\uff92\065\uff92\066\uff92\067\uff92\070\uff92\071\uff92\076\uff92" +
    "\100\uff92\102\uff92\105\uff92\111\uff92\117\uff92\121\uff92\001" +
    "\002\000\140\003\uff8b\006\uff8b\007\uff8b\010\uff8b\011\uff8b" +
    "\012\uff8b\015\uff8b\016\uff8b\017\uff8b\021\uff8b\023\uff8b\024" +
    "\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b\034\uff8b" +
    "\035\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b\047\141\050" +
    "\143\051\140\052\132\053\144\054\130\056\127\057\142" +
    "\060\uff8b\061\uff8b\062\uff8b\064\uff8b\065\uff8b\066\uff8b\067" +
    "\uff8b\070\uff8b\071\uff8b\076\uff8b\100\uff8b\102\uff8b\105\uff8b" +
    "\111\uff8b\117\uff8b\121\uff8b\001\002\000\140\003\uff91\006" +
    "\uff91\007\uff91\010\uff91\011\uff91\012\uff91\015\uff91\016\uff91" +
    "\017\uff91\021\uff91\023\uff91\024\uff91\026\uff91\027\uff91\030" +
    "\uff91\031\uff91\032\uff91\034\uff91\035\uff91\043\uff91\044\uff91" +
    "\045\uff91\046\uff91\047\uff91\050\uff91\051\uff91\052\uff91\053" +
    "\uff91\054\uff91\056\uff91\057\uff91\060\uff91\061\uff91\062\uff91" +
    "\064\uff91\065\uff91\066\uff91\067\uff91\070\uff91\071\uff91\076" +
    "\uff91\100\uff91\102\uff91\105\uff91\111\uff91\117\uff91\121\uff91" +
    "\001\002\000\140\003\uff8d\006\uff8d\007\uff8d\010\uff8d\011" +
    "\uff8d\012\uff8d\015\uff8d\016\uff8d\017\uff8d\021\uff8d\023\uff8d" +
    "\024\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d\034" +
    "\uff8d\035\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047\141" +
    "\050\143\051\140\052\132\053\144\054\130\056\uff8d\057" +
    "\uff8d\060\uff8d\061\uff8d\062\uff8d\064\uff8d\065\uff8d\066\uff8d" +
    "\067\uff8d\070\uff8d\071\uff8d\076\uff8d\100\uff8d\102\uff8d\105" +
    "\uff8d\111\uff8d\117\uff8d\121\uff8d\001\002\000\140\003\uff82" +
    "\006\uff82\007\uff82\010\uff82\011\uff82\012\uff82\015\uff82\016" +
    "\uff82\017\uff82\021\uff82\023\uff82\024\uff82\026\uff82\027\uff82" +
    "\030\uff82\031\uff82\032\uff82\034\uff82\035\uff82\043\uff82\044" +
    "\uff82\045\uff82\046\uff82\047\uff82\050\uff82\051\uff82\052\uff82" +
    "\053\uff82\054\uff82\056\uff82\057\uff82\060\uff82\061\uff82\062" +
    "\uff82\064\uff82\065\uff82\066\uff82\067\uff82\070\uff82\071\uff82" +
    "\076\uff82\100\uff82\102\uff82\105\uff82\111\uff82\117\uff82\121" +
    "\uff82\001\002\000\050\047\141\050\143\051\140\052\132" +
    "\053\144\054\130\056\127\057\142\060\147\061\131\062" +
    "\146\064\133\065\145\066\136\067\137\070\135\071\134" +
    "\100\uffa8\102\uffa8\001\002\000\006\100\uffa9\102\uffa9\001" +
    "\002\000\006\100\200\102\203\001\002\000\046\013\104" +
    "\014\115\032\061\034\071\035\055\043\062\044\040\045" +
    "\045\055\123\063\101\065\125\101\175\105\106\106\111" +
    "\107\110\110\105\112\117\113\077\001\002\000\006\100" +
    "\uffaa\102\uffaa\001\002\000\006\100\200\102\201\001\002" +
    "\000\046\013\104\014\115\032\061\034\071\035\055\043" +
    "\062\044\040\045\045\055\123\063\101\065\125\101\175" +
    "\105\106\106\111\107\110\110\105\112\117\113\077\001" +
    "\002\000\006\100\uffac\102\uffac\001\002\000\006\100\uffab" +
    "\102\uffab\001\002\000\006\100\uffc9\111\uffc9\001\002\000" +
    "\140\003\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1" +
    "\015\uffd1\016\uffd1\017\uffd1\021\uffd1\023\uffd1\024\uffd1\026" +
    "\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\034\uffd1\035\uffd1" +
    "\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051" +
    "\uffd1\052\uffd1\053\uffd1\054\uffd1\056\uffd1\057\uffd1\060\uffd1" +
    "\061\uffd1\062\uffd1\064\uffd1\065\uffd1\066\uffd1\067\uffd1\070" +
    "\uffd1\071\uffd1\076\uffd1\100\uffd1\102\uffd1\105\uffd1\111\uffd1" +
    "\117\uffd1\121\uffd1\001\002\000\044\013\104\014\115\032" +
    "\061\034\071\035\055\043\062\044\040\045\045\055\123" +
    "\063\101\065\125\105\106\106\111\107\110\110\105\112" +
    "\117\113\077\001\002\000\142\003\uff85\006\uff85\007\uff85" +
    "\010\uff85\011\uff85\012\uff85\015\uff85\016\uff85\017\uff85\021" +
    "\uff85\023\uff85\024\uff85\026\uff85\027\uff85\030\uff85\031\uff85" +
    "\032\uff85\034\uff85\035\uff85\043\uff85\044\uff85\045\uff85\046" +
    "\uff85\047\uff85\050\uff85\051\uff85\052\uff85\053\uff85\054\uff85" +
    "\056\uff85\057\uff85\060\uff85\061\uff85\062\uff85\064\uff85\065" +
    "\uff85\066\uff85\067\uff85\070\uff85\071\uff85\075\205\076\uff85" +
    "\100\uff85\102\uff85\105\uff85\111\uff85\117\uff85\121\uff85\001" +
    "\002\000\144\003\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0" +
    "\012\uffb0\015\uffb0\016\uffb0\017\uffb0\021\uffb0\023\uffb0\024" +
    "\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\034\uffb0" +
    "\035\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050" +
    "\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\056\uffb0\057\uffb0" +
    "\060\uffb0\061\uffb0\062\uffb0\064\uffb0\065\uffb0\066\uffb0\067" +
    "\uffb0\070\uffb0\071\uffb0\075\uffb0\076\uffb0\100\uffb0\102\uffb0" +
    "\105\uffb0\111\uffb0\114\uffb0\117\uffb0\121\uffb0\001\002\000" +
    "\144\003\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1" +
    "\015\uffb1\016\uffb1\017\uffb1\021\uffb1\023\uffb1\024\uffb1\026" +
    "\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\034\uffb1\035\uffb1" +
    "\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051" +
    "\uffb1\052\uffb1\053\uffb1\054\uffb1\056\uffb1\057\uffb1\060\uffb1" +
    "\061\uffb1\062\uffb1\064\uffb1\065\uffb1\066\uffb1\067\uffb1\070" +
    "\uffb1\071\uffb1\075\uffb1\076\uffb1\100\uffb1\102\uffb1\105\uffb1" +
    "\111\uffb1\114\uffb1\117\uffb1\121\uffb1\001\002\000\046\047" +
    "\141\050\143\051\140\052\132\053\144\054\130\056\127" +
    "\057\142\060\147\061\131\062\146\064\133\065\145\066" +
    "\136\067\137\070\135\071\134\076\212\001\002\000\144" +
    "\003\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\015" +
    "\uffaf\016\uffaf\017\uffaf\021\uffaf\023\uffaf\024\uffaf\026\uffaf" +
    "\027\uffaf\030\uffaf\031\uffaf\032\uffaf\034\uffaf\035\uffaf\043" +
    "\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf" +
    "\052\uffaf\053\uffaf\054\uffaf\056\uffaf\057\uffaf\060\uffaf\061" +
    "\uffaf\062\uffaf\064\uffaf\065\uffaf\066\uffaf\067\uffaf\070\uffaf" +
    "\071\uffaf\075\uffaf\076\uffaf\100\uffaf\102\uffaf\105\uffaf\111" +
    "\uffaf\114\uffaf\117\uffaf\121\uffaf\001\002\000\046\047\141" +
    "\050\143\051\140\052\132\053\144\054\130\056\127\057" +
    "\142\060\147\061\131\062\146\064\133\065\145\066\136" +
    "\067\137\070\135\071\134\111\214\001\002\000\140\003" +
    "\uff87\006\uff87\007\uff87\010\uff87\011\uff87\012\uff87\015\uff87" +
    "\016\uff87\017\uff87\021\uff87\023\uff87\024\uff87\026\uff87\027" +
    "\uff87\030\uff87\031\uff87\032\uff87\034\uff87\035\uff87\043\uff87" +
    "\044\uff87\045\uff87\046\uff87\047\uff87\050\uff87\051\uff87\052" +
    "\uff87\053\uff87\054\uff87\056\uff87\057\uff87\060\uff87\061\uff87" +
    "\062\uff87\064\uff87\065\uff87\066\uff87\067\uff87\070\uff87\071" +
    "\uff87\076\uff87\100\uff87\102\uff87\105\uff87\111\uff87\117\uff87" +
    "\121\uff87\001\002\000\064\013\104\014\115\017\114\032" +
    "\061\033\116\034\071\035\055\036\120\037\074\040\113" +
    "\041\076\042\124\043\062\044\040\045\045\055\123\063" +
    "\101\065\125\101\121\105\106\106\111\107\110\110\105" +
    "\112\117\113\077\001\002\000\006\100\uffce\111\uffce\001" +
    "\002\000\140\003\uff84\006\uff84\007\uff84\010\uff84\011\uff84" +
    "\012\uff84\015\uff84\016\uff84\017\uff84\021\uff84\023\uff84\024" +
    "\uff84\026\uff84\027\uff84\030\uff84\031\uff84\032\uff84\034\uff84" +
    "\035\uff84\043\uff84\044\uff84\045\uff84\046\uff84\047\141\050" +
    "\143\051\140\052\132\053\144\054\130\056\uff84\057\uff84" +
    "\060\uff84\061\uff84\062\uff84\064\uff84\065\uff84\066\uff84\067" +
    "\uff84\070\uff84\071\uff84\076\uff84\100\uff84\102\uff84\105\uff84" +
    "\111\uff84\117\uff84\121\uff84\001\002\000\006\104\223\105" +
    "\221\001\002\000\074\003\ufff9\006\ufff9\007\ufff9\010\ufff9" +
    "\011\ufff9\012\ufff9\015\ufff9\016\ufff9\017\ufff9\021\ufff9\023" +
    "\ufff9\024\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9" +
    "\034\ufff9\035\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\075" +
    "\ufff9\100\ufff9\105\ufff9\114\ufff9\116\ufff9\117\ufff9\001\002" +
    "\000\052\003\uffa7\016\uffa7\017\uffa7\021\uffa7\023\uffa7\024" +
    "\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\034\uffa7" +
    "\035\uffa7\043\uffa7\044\uffa7\045\uffa7\100\225\105\uffa7\114" +
    "\236\117\uffa7\001\002\000\004\105\221\001\002\000\006" +
    "\075\205\100\225\001\002\000\004\105\234\001\002\000" +
    "\052\003\uffae\016\uffae\017\uffae\021\uffae\023\uffae\024\uffae" +
    "\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae\034\uffae\035" +
    "\uffae\043\uffae\044\uffae\045\uffae\075\205\105\uffae\114\230" +
    "\117\uffae\001\002\000\046\003\uffb6\016\uffb6\017\uffb6\021" +
    "\uffb6\023\uffb6\024\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6" +
    "\032\uffb6\034\uffb6\035\uffb6\043\uffb6\044\uffb6\045\uffb6\105" +
    "\uffb6\117\uffb6\001\002\000\004\101\231\001\002\000\046" +
    "\013\104\014\115\032\061\034\071\035\055\043\062\044" +
    "\040\045\045\055\123\063\101\065\125\101\175\105\106" +
    "\106\111\107\110\110\105\112\117\113\077\001\002\000" +
    "\006\100\200\102\233\001\002\000\064\003\uffad\006\uffad" +
    "\007\uffad\010\uffad\011\uffad\012\uffad\015\uffad\016\uffad\017" +
    "\uffad\021\uffad\023\uffad\024\uffad\026\uffad\027\uffad\030\uffad" +
    "\031\uffad\032\uffad\034\uffad\035\uffad\043\uffad\044\uffad\045" +
    "\uffad\046\uffad\105\uffad\117\uffad\001\002\000\074\003\ufffa" +
    "\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\015\ufffa\016" +
    "\ufffa\017\ufffa\021\ufffa\023\ufffa\024\ufffa\026\ufffa\027\ufffa" +
    "\030\ufffa\031\ufffa\032\ufffa\034\ufffa\035\ufffa\043\ufffa\044" +
    "\ufffa\045\ufffa\046\ufffa\075\ufffa\100\ufffa\105\ufffa\114\ufffa" +
    "\116\ufffa\117\ufffa\001\002\000\046\003\uffb7\016\uffb7\017" +
    "\uffb7\021\uffb7\023\uffb7\024\uffb7\026\uffb7\027\uffb7\030\uffb7" +
    "\031\uffb7\032\uffb7\034\uffb7\035\uffb7\043\uffb7\044\uffb7\045" +
    "\uffb7\105\uffb7\117\uffb7\001\002\000\044\013\104\014\115" +
    "\032\061\034\071\035\055\043\062\044\040\045\045\055" +
    "\123\063\101\065\125\105\106\106\111\107\110\110\105" +
    "\112\117\113\077\001\002\000\126\003\uffa6\006\uffa6\007" +
    "\uffa6\010\uffa6\011\uffa6\012\uffa6\015\uffa6\016\uffa6\017\uffa6" +
    "\021\uffa6\023\uffa6\024\uffa6\026\uffa6\027\uffa6\030\uffa6\031" +
    "\uffa6\032\uffa6\034\uffa6\035\uffa6\043\uffa6\044\uffa6\045\uffa6" +
    "\046\uffa6\047\141\050\143\051\140\052\132\053\144\054" +
    "\130\056\127\057\142\060\147\061\131\062\146\064\133" +
    "\065\145\066\136\067\137\070\135\071\134\105\uffa6\117" +
    "\uffa6\001\002\000\044\003\060\016\067\017\057\021\046" +
    "\023\241\024\245\026\051\027\064\030\065\031\056\032" +
    "\061\034\071\035\055\043\062\044\040\045\045\105\052" +
    "\001\002\000\046\003\uffb9\016\uffb9\017\uffb9\021\uffb9\023" +
    "\uffb9\024\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9" +
    "\034\uffb9\035\uffb9\043\uffb9\044\uffb9\045\uffb9\105\uffb9\117" +
    "\uffb9\001\002\000\046\003\060\016\067\017\057\021\046" +
    "\023\241\024\245\026\051\027\064\030\065\031\056\032" +
    "\061\034\071\035\055\043\062\044\040\045\045\105\052" +
    "\117\247\001\002\000\046\003\uffd2\016\uffd2\017\uffd2\021" +
    "\uffd2\023\uffd2\024\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\034\uffd2\035\uffd2\043\uffd2\044\uffd2\045\uffd2\105" +
    "\uffd2\117\uffd2\001\002\000\046\003\uffba\016\uffba\017\uffba" +
    "\021\uffba\023\uffba\024\uffba\026\uffba\027\uffba\030\uffba\031" +
    "\uffba\032\uffba\034\uffba\035\uffba\043\uffba\044\uffba\045\uffba" +
    "\105\uffba\117\uffba\001\002\000\046\003\uffb8\016\uffb8\017" +
    "\uffb8\021\uffb8\023\uffb8\024\uffb8\026\uffb8\027\uffb8\030\uffb8" +
    "\031\uffb8\032\uffb8\034\uffb8\035\uffb8\043\uffb8\044\uffb8\045" +
    "\uffb8\105\uffb8\117\uffb8\001\002\000\046\003\uffd3\016\uffd3" +
    "\017\uffd3\021\uffd3\023\uffd3\024\uffd3\026\uffd3\027\uffd3\030" +
    "\uffd3\031\uffd3\032\uffd3\034\uffd3\035\uffd3\043\uffd3\044\uffd3" +
    "\045\uffd3\105\uffd3\117\uffd3\001\002\000\004\027\250\001" +
    "\002\000\004\110\251\001\002\000\044\013\104\014\115" +
    "\032\061\034\071\035\055\043\062\044\040\045\045\055" +
    "\123\063\101\065\125\105\106\106\111\107\110\110\105" +
    "\112\117\113\077\001\002\000\046\047\141\050\143\051" +
    "\140\052\132\053\144\054\130\056\127\057\142\060\147" +
    "\061\131\062\146\064\133\065\145\066\136\067\137\070" +
    "\135\071\134\111\253\001\002\000\046\003\uff7c\016\uff7c" +
    "\017\uff7c\021\uff7c\023\uff7c\024\uff7c\026\uff7c\027\uff7c\030" +
    "\uff7c\031\uff7c\032\uff7c\034\uff7c\035\uff7c\043\uff7c\044\uff7c" +
    "\045\uff7c\105\uff7c\117\uff7c\001\002\000\044\013\104\014" +
    "\115\032\061\034\071\035\055\043\062\044\040\045\045" +
    "\055\123\063\101\065\125\105\106\106\111\107\110\110" +
    "\105\112\117\113\077\001\002\000\046\047\141\050\143" +
    "\051\140\052\132\053\144\054\130\056\127\057\142\060" +
    "\147\061\131\062\146\064\133\065\145\066\136\067\137" +
    "\070\135\071\134\111\256\001\002\000\004\116\257\001" +
    "\002\000\044\003\060\016\067\017\057\021\046\023\241" +
    "\024\245\026\051\027\064\030\065\031\056\032\061\034" +
    "\071\035\055\043\062\044\040\045\045\105\052\001\002" +
    "\000\046\003\060\016\067\017\057\021\046\023\241\024" +
    "\245\026\051\027\064\030\065\031\056\032\061\034\071" +
    "\035\055\043\062\044\040\045\045\105\052\117\261\001" +
    "\002\000\046\003\uff7b\016\uff7b\017\uff7b\021\uff7b\023\uff7b" +
    "\024\uff7b\026\uff7b\027\uff7b\030\uff7b\031\uff7b\032\uff7b\034" +
    "\uff7b\035\uff7b\043\uff7b\044\uff7b\045\uff7b\105\uff7b\117\uff7b" +
    "\001\002\000\044\013\104\014\115\032\061\034\071\035" +
    "\055\043\062\044\040\045\045\055\123\063\101\065\125" +
    "\105\106\106\111\107\110\110\105\112\117\113\077\001" +
    "\002\000\046\047\141\050\143\051\140\052\132\053\144" +
    "\054\130\056\127\057\142\060\147\061\131\062\146\064" +
    "\133\065\145\066\136\067\137\070\135\071\134\111\264" +
    "\001\002\000\004\116\265\001\002\000\044\003\060\016" +
    "\067\017\057\021\046\023\241\024\245\026\051\027\064" +
    "\030\065\031\056\032\061\034\071\035\055\043\062\044" +
    "\040\045\045\105\052\001\002\000\046\003\060\016\067" +
    "\017\057\021\046\023\241\024\245\026\051\027\064\030" +
    "\065\031\056\032\061\034\071\035\055\043\062\044\040" +
    "\045\045\105\052\117\267\001\002\000\050\003\uff81\016" +
    "\uff81\017\uff81\020\270\021\uff81\023\uff81\024\uff81\026\uff81" +
    "\027\uff81\030\uff81\031\uff81\032\uff81\034\uff81\035\uff81\043" +
    "\uff81\044\uff81\045\uff81\105\uff81\117\uff81\001\002\000\006" +
    "\017\057\116\272\001\002\000\046\003\uff7f\016\uff7f\017" +
    "\uff7f\021\uff7f\023\uff7f\024\uff7f\026\uff7f\027\uff7f\030\uff7f" +
    "\031\uff7f\032\uff7f\034\uff7f\035\uff7f\043\uff7f\044\uff7f\045" +
    "\uff7f\105\uff7f\117\uff7f\001\002\000\044\003\060\016\067" +
    "\017\057\021\046\023\241\024\245\026\051\027\064\030" +
    "\065\031\056\032\061\034\071\035\055\043\062\044\040" +
    "\045\045\105\052\001\002\000\046\003\060\016\067\017" +
    "\057\021\046\023\241\024\245\026\051\027\064\030\065" +
    "\031\056\032\061\034\071\035\055\043\062\044\040\045" +
    "\045\105\052\117\274\001\002\000\046\003\uff80\016\uff80" +
    "\017\uff80\021\uff80\023\uff80\024\uff80\026\uff80\027\uff80\030" +
    "\uff80\031\uff80\032\uff80\034\uff80\035\uff80\043\uff80\044\uff80" +
    "\045\uff80\105\uff80\117\uff80\001\002\000\110\003\uffe2\016" +
    "\uffe2\017\uffe2\021\uffe2\023\uffe2\024\uffe2\026\uffe2\027\uffe2" +
    "\030\uffe2\031\uffe2\032\uffe2\034\uffe2\035\uffe2\043\uffe2\044" +
    "\uffe2\045\uffe2\047\141\050\143\051\140\052\132\053\144" +
    "\054\130\056\127\057\142\060\147\061\131\062\146\064" +
    "\133\065\145\066\136\067\137\070\135\071\134\105\uffe2" +
    "\117\uffe2\001\002\000\044\013\104\014\115\032\061\034" +
    "\071\035\055\043\062\044\040\045\045\055\123\063\101" +
    "\065\125\105\106\106\111\107\110\110\105\112\117\113" +
    "\077\001\002\000\050\003\uffda\016\uffda\017\uffda\021\uffda" +
    "\023\uffda\024\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032" +
    "\uffda\034\uffda\035\uffda\043\uffda\044\uffda\045\uffda\105\uffda" +
    "\111\uffda\117\uffda\001\002\000\006\075\205\114\304\001" +
    "\002\000\050\003\uffd9\016\uffd9\017\uffd9\021\uffd9\023\uffd9" +
    "\024\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\034" +
    "\uffd9\035\uffd9\043\uffd9\044\uffd9\045\uffd9\105\uffd9\111\uffd9" +
    "\117\uffd9\001\002\000\044\013\104\014\115\032\061\034" +
    "\071\035\055\043\062\044\040\045\045\055\123\063\101" +
    "\065\125\105\106\106\111\107\110\110\105\112\117\113" +
    "\077\001\002\000\110\003\uff7e\016\uff7e\017\uff7e\021\uff7e" +
    "\023\uff7e\024\uff7e\026\uff7e\027\uff7e\030\uff7e\031\uff7e\032" +
    "\uff7e\034\uff7e\035\uff7e\043\uff7e\044\uff7e\045\uff7e\047\141" +
    "\050\143\051\140\052\132\053\144\054\130\056\127\057" +
    "\142\060\147\061\131\062\146\064\133\065\145\066\136" +
    "\067\137\070\135\071\134\105\uff7e\117\uff7e\001\002\000" +
    "\044\013\104\014\115\032\061\034\071\035\055\043\062" +
    "\044\040\045\045\055\123\063\101\065\125\105\106\106" +
    "\111\107\110\110\105\112\117\113\077\001\002\000\110" +
    "\003\uff7d\016\uff7d\017\uff7d\021\uff7d\023\uff7d\024\uff7d\026" +
    "\uff7d\027\uff7d\030\uff7d\031\uff7d\032\uff7d\034\uff7d\035\uff7d" +
    "\043\uff7d\044\uff7d\045\uff7d\047\141\050\143\051\140\052" +
    "\132\053\144\054\130\056\127\057\142\060\147\061\131" +
    "\062\146\064\133\065\145\066\136\067\137\070\135\071" +
    "\134\105\uff7d\117\uff7d\001\002\000\112\003\uffd8\016\uffd8" +
    "\017\uffd8\021\uffd8\023\uffd8\024\uffd8\026\uffd8\027\uffd8\030" +
    "\uffd8\031\uffd8\032\uffd8\034\uffd8\035\uffd8\043\uffd8\044\uffd8" +
    "\045\uffd8\047\141\050\143\051\140\052\132\053\144\054" +
    "\130\056\127\057\142\060\147\061\131\062\146\064\133" +
    "\065\145\066\136\067\137\070\135\071\134\105\uffd8\111" +
    "\uffd8\117\uffd8\001\002\000\010\006\313\016\311\105\310" +
    "\001\002\000\006\114\334\121\uffd5\001\002\000\004\006" +
    "\330\001\002\000\004\121\317\001\002\000\004\105\314" +
    "\001\002\000\004\114\315\001\002\000\044\013\104\014" +
    "\115\032\061\034\071\035\055\043\062\044\040\045\045" +
    "\055\123\063\101\065\125\105\106\106\111\107\110\110" +
    "\105\112\117\113\077\001\002\000\046\047\141\050\143" +
    "\051\140\052\132\053\144\054\130\056\127\057\142\060" +
    "\147\061\131\062\146\064\133\065\145\066\136\067\137" +
    "\070\135\071\134\121\uffd7\001\002\000\044\013\104\014" +
    "\115\032\061\034\071\035\055\043\062\044\040\045\045" +
    "\055\123\063\101\065\125\105\106\106\111\107\110\110" +
    "\105\112\117\113\077\001\002\000\046\047\141\050\143" +
    "\051\140\052\132\053\144\054\130\056\127\057\142\060" +
    "\147\061\131\062\146\064\133\065\145\066\136\067\137" +
    "\070\135\071\134\121\321\001\002\000\004\105\322\001" +
    "\002\000\010\072\301\073\277\074\276\001\002\000\004" +
    "\111\324\001\002\000\004\116\325\001\002\000\044\003" +
    "\060\016\067\017\057\021\046\023\241\024\245\026\051" +
    "\027\064\030\065\031\056\032\061\034\071\035\055\043" +
    "\062\044\040\045\045\105\052\001\002\000\046\003\060" +
    "\016\067\017\057\021\046\023\241\024\245\026\051\027" +
    "\064\030\065\031\056\032\061\034\071\035\055\043\062" +
    "\044\040\045\045\105\052\117\327\001\002\000\046\003" +
    "\uffdb\016\uffdb\017\uffdb\021\uffdb\023\uffdb\024\uffdb\026\uffdb" +
    "\027\uffdb\030\uffdb\031\uffdb\032\uffdb\034\uffdb\035\uffdb\043" +
    "\uffdb\044\uffdb\045\uffdb\105\uffdb\117\uffdb\001\002\000\004" +
    "\105\331\001\002\000\004\114\332\001\002\000\044\013" +
    "\104\014\115\032\061\034\071\035\055\043\062\044\040" +
    "\045\045\055\123\063\101\065\125\105\106\106\111\107" +
    "\110\110\105\112\117\113\077\001\002\000\046\047\141" +
    "\050\143\051\140\052\132\053\144\054\130\056\127\057" +
    "\142\060\147\061\131\062\146\064\133\065\145\066\136" +
    "\067\137\070\135\071\134\121\uffd6\001\002\000\044\013" +
    "\104\014\115\032\061\034\071\035\055\043\062\044\040" +
    "\045\045\055\123\063\101\065\125\105\106\106\111\107" +
    "\110\110\105\112\117\113\077\001\002\000\046\047\141" +
    "\050\143\051\140\052\132\053\144\054\130\056\127\057" +
    "\142\060\147\061\131\062\146\064\133\065\145\066\136" +
    "\067\137\070\135\071\134\121\uffd4\001\002\000\004\105" +
    "\337\001\002\000\004\111\340\001\002\000\004\116\341" +
    "\001\002\000\006\022\346\025\342\001\002\000\004\116" +
    "\360\001\002\000\004\117\357\001\002\000\010\022\346" +
    "\025\342\117\354\001\002\000\010\022\uff76\025\uff76\117" +
    "\uff76\001\002\000\016\013\104\014\115\106\111\107\110" +
    "\112\117\113\077\001\002\000\004\116\350\001\002\000" +
    "\044\003\060\016\067\017\057\021\046\023\241\024\245" +
    "\026\051\027\064\030\065\031\056\032\061\034\071\035" +
    "\055\043\062\044\040\045\045\105\052\001\002\000\046" +
    "\003\060\016\067\017\057\021\046\023\241\024\245\026" +
    "\051\027\064\030\065\031\056\032\061\034\071\035\055" +
    "\043\062\044\040\045\045\105\052\117\352\001\002\000" +
    "\010\022\uff75\025\uff75\117\uff75\001\002\000\004\117\356" +
    "\001\002\000\046\003\uff7a\016\uff7a\017\uff7a\021\uff7a\023" +
    "\uff7a\024\uff7a\026\uff7a\027\uff7a\030\uff7a\031\uff7a\032\uff7a" +
    "\034\uff7a\035\uff7a\043\uff7a\044\uff7a\045\uff7a\105\uff7a\117" +
    "\uff7a\001\002\000\010\022\uff77\025\uff77\117\uff77\001\002" +
    "\000\046\003\uff79\016\uff79\017\uff79\021\uff79\023\uff79\024" +
    "\uff79\026\uff79\027\uff79\030\uff79\031\uff79\032\uff79\034\uff79" +
    "\035\uff79\043\uff79\044\uff79\045\uff79\105\uff79\117\uff79\001" +
    "\002\000\046\003\uff78\016\uff78\017\uff78\021\uff78\023\uff78" +
    "\024\uff78\026\uff78\027\uff78\030\uff78\031\uff78\032\uff78\034" +
    "\uff78\035\uff78\043\uff78\044\uff78\045\uff78\105\uff78\117\uff78" +
    "\001\002\000\044\003\060\016\067\017\057\021\046\023" +
    "\241\024\245\026\051\027\064\030\065\031\056\032\061" +
    "\034\071\035\055\043\062\044\040\045\045\105\052\001" +
    "\002\000\046\003\060\016\067\017\057\021\046\023\241" +
    "\024\245\026\051\027\064\030\065\031\056\032\061\034" +
    "\071\035\055\043\062\044\040\045\045\105\052\117\362" +
    "\001\002\000\004\117\uff74\001\002\000\042\003\uffe8\016" +
    "\uffe8\017\uffe8\021\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8" +
    "\032\uffe8\034\uffe8\035\uffe8\043\uffe8\044\uffe8\045\uffe8\105" +
    "\uffe8\117\uffe8\001\002\000\026\006\uffef\007\uffef\010\uffef" +
    "\011\uffef\012\uffef\015\uffef\016\uffef\046\uffef\105\uffef\117" +
    "\uffef\001\002\000\014\006\020\007\017\010\021\011\032" +
    "\012\016\001\002\000\004\110\u010d\001\002\000\004\105" +
    "\376\001\002\000\004\110\371\001\002\000\004\111\372" +
    "\001\002\000\004\116\373\001\002\000\040\003\060\016" +
    "\067\017\057\021\046\026\051\027\064\030\065\031\056" +
    "\032\061\034\071\035\055\043\062\044\040\045\045\105" +
    "\052\001\002\000\042\003\060\016\067\017\057\021\046" +
    "\026\051\027\064\030\065\031\056\032\061\034\071\035" +
    "\055\043\062\044\040\045\045\105\052\117\375\001\002" +
    "\000\026\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\015" +
    "\ufff0\016\ufff0\046\ufff0\105\ufff0\117\ufff0\001\002\000\004" +
    "\110\377\001\002\000\016\006\020\007\017\010\021\011" +
    "\032\012\016\111\uffee\001\002\000\004\111\u0109\001\002" +
    "\000\006\100\uffeb\111\uffeb\001\002\000\006\104\u0107\105" +
    "\u0106\001\002\000\006\100\u0104\111\uffed\001\002\000\014" +
    "\006\020\007\017\010\021\011\032\012\016\001\002\000" +
    "\006\100\uffec\111\uffec\001\002\000\006\100\uffea\111\uffea" +
    "\001\002\000\004\105\u0108\001\002\000\006\100\uffe9\111" +
    "\uffe9\001\002\000\004\116\u010a\001\002\000\040\003\060" +
    "\016\067\017\057\021\046\026\051\027\064\030\065\031" +
    "\056\032\061\034\071\035\055\043\062\044\040\045\045" +
    "\105\052\001\002\000\042\003\060\016\067\017\057\021" +
    "\046\026\051\027\064\030\065\031\056\032\061\034\071" +
    "\035\055\043\062\044\040\045\045\105\052\117\u010c\001" +
    "\002\000\026\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4" +
    "\015\ufff4\016\ufff4\046\ufff4\105\ufff4\117\ufff4\001\002\000" +
    "\016\006\020\007\017\010\021\011\032\012\016\111\uffee" +
    "\001\002\000\004\111\u010f\001\002\000\004\116\u0110\001" +
    "\002\000\040\003\060\016\067\017\057\021\046\026\051" +
    "\027\064\030\065\031\056\032\061\034\071\035\055\043" +
    "\062\044\040\045\045\105\052\001\002\000\042\003\060" +
    "\016\067\017\057\021\046\026\051\027\064\030\065\031" +
    "\056\032\061\034\071\035\055\043\062\044\040\045\045" +
    "\105\052\117\u0112\001\002\000\026\006\ufff1\007\ufff1\010" +
    "\ufff1\011\ufff1\012\ufff1\015\ufff1\016\ufff1\046\ufff1\105\ufff1" +
    "\117\ufff1\001\002\000\006\104\u0115\105\221\001\002\000" +
    "\032\006\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7\015\uffa7" +
    "\016\uffa7\046\uffa7\100\225\105\uffa7\114\236\117\uffa7\001" +
    "\002\000\004\105\221\001\002\000\006\075\205\100\225" +
    "\001\002\000\032\006\uffae\007\uffae\010\uffae\011\uffae\012" +
    "\uffae\015\uffae\016\uffae\046\uffae\075\205\105\uffae\114\230" +
    "\117\uffae\001\002\000\026\006\uffb3\007\uffb3\010\uffb3\011" +
    "\uffb3\012\uffb3\015\uffb3\016\uffb3\046\uffb3\105\uffb3\117\uffb3" +
    "\001\002\000\026\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012" +
    "\uffb5\015\uffb5\016\uffb5\046\uffb5\105\uffb5\117\uffb5\001\002" +
    "\000\004\110\u011b\001\002\000\016\006\020\007\017\010" +
    "\021\011\032\012\016\111\uffee\001\002\000\004\111\u011d" +
    "\001\002\000\004\116\u011e\001\002\000\040\003\060\016" +
    "\067\017\057\021\046\026\051\027\064\030\065\031\056" +
    "\032\061\034\071\035\055\043\062\044\040\045\045\105" +
    "\052\001\002\000\042\003\060\016\067\017\057\021\046" +
    "\026\051\027\064\030\065\031\056\032\061\034\071\035" +
    "\055\043\062\044\040\045\045\105\052\117\u0120\001\002" +
    "\000\026\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\015" +
    "\ufff3\016\ufff3\046\ufff3\105\ufff3\117\ufff3\001\002\000\016" +
    "\006\020\007\017\010\021\011\032\012\016\111\uffee\001" +
    "\002\000\004\111\u0123\001\002\000\004\116\u0124\001\002" +
    "\000\040\003\060\016\067\017\057\021\046\026\051\027" +
    "\064\030\065\031\056\032\061\034\071\035\055\043\062" +
    "\044\040\045\045\105\052\001\002\000\042\003\060\016" +
    "\067\017\057\021\046\026\051\027\064\030\065\031\056" +
    "\032\061\034\071\035\055\043\062\044\040\045\045\105" +
    "\052\117\u0126\001\002\000\026\006\ufff2\007\ufff2\010\ufff2" +
    "\011\ufff2\012\ufff2\015\ufff2\016\ufff2\046\ufff2\105\ufff2\117" +
    "\ufff2\001\002\000\006\002\ufffd\004\ufffd\001\002\000\026" +
    "\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\015\ufff8\016" +
    "\ufff8\046\ufff8\105\ufff8\117\ufff8\001\002\000\006\104\u012b" +
    "\105\221\001\002\000\032\006\uffa7\007\uffa7\010\uffa7\011" +
    "\uffa7\012\uffa7\015\uffa7\016\uffa7\046\uffa7\100\225\105\uffa7" +
    "\114\236\117\uffa7\001\002\000\004\105\221\001\002\000" +
    "\006\075\205\100\225\001\002\000\032\006\uffae\007\uffae" +
    "\010\uffae\011\uffae\012\uffae\015\uffae\016\uffae\046\uffae\075" +
    "\205\105\uffae\114\230\117\uffae\001\002\000\026\006\uffb2" +
    "\007\uffb2\010\uffb2\011\uffb2\012\uffb2\015\uffb2\016\uffb2\046" +
    "\uffb2\105\uffb2\117\uffb2\001\002\000\026\006\uffb4\007\uffb4" +
    "\010\uffb4\011\uffb4\012\uffb4\015\uffb4\016\uffb4\046\uffb4\105" +
    "\uffb4\117\uffb4\001\002\000\006\100\225\116\ufffb\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012e\000\010\002\006\014\005\015\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\013\001\001\000\004\036\u012f\001\001\000\002" +
    "\001\001\000\014\003\021\004\023\017\030\020\026\040" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\u0128\001\001\000\012\003\u0127\017\030\020\026\040\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\366\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\016\053\024\043\033\036\041\067\046\065" +
    "\052\041\062\042\063\046\064\040\065\052\066\062\067" +
    "\047\001\001\000\030\016\053\024\362\041\067\046\065" +
    "\052\041\062\042\063\046\064\040\065\052\066\062\067" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\206\026\277\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\021\274\035\101\041\067\065\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\217\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\021\077\035\101\041\067\042" +
    "\074\043\121\047\102\050\111\051\072\065\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\021\216\035\101\041\067\065\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\021\212" +
    "\035\101\041\067\065\106\001\001\000\006\023\206\026" +
    "\205\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\021\171\035\101\041\067\065" +
    "\106\070\173\071\172\072\175\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\021\125\035" +
    "\101\041\067\065\106\001\001\000\002\001\001\000\012" +
    "\021\167\035\101\041\067\065\106\001\001\000\012\021" +
    "\166\035\101\041\067\065\106\001\001\000\012\021\165" +
    "\035\101\041\067\065\106\001\001\000\012\021\164\035" +
    "\101\041\067\065\106\001\001\000\012\021\163\035\101" +
    "\041\067\065\106\001\001\000\012\021\162\035\101\041" +
    "\067\065\106\001\001\000\012\021\161\035\101\041\067" +
    "\065\106\001\001\000\012\021\160\035\101\041\067\065" +
    "\106\001\001\000\012\021\157\035\101\041\067\065\106" +
    "\001\001\000\012\021\156\035\101\041\067\065\106\001" +
    "\001\000\012\021\155\035\101\041\067\065\106\001\001" +
    "\000\012\021\154\035\101\041\067\065\106\001\001\000" +
    "\012\021\153\035\101\041\067\065\106\001\001\000\012" +
    "\021\152\035\101\041\067\065\106\001\001\000\012\021" +
    "\151\035\101\041\067\065\106\001\001\000\012\021\150" +
    "\035\101\041\067\065\106\001\001\000\012\021\147\035" +
    "\101\041\067\065\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\021\171\035\101\041\067\065\106\070\176\071" +
    "\172\072\175\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\021\171\035\101\041\067\065\106\071\172\072" +
    "\201\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\021\210\035\101\041" +
    "\067\065\106\001\001\000\004\023\207\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\021\077" +
    "\035\101\041\067\042\074\043\121\051\215\065\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\221" +
    "\001\001\000\002\001\001\000\004\022\234\001\001\000" +
    "\004\036\223\001\001\000\006\023\206\026\225\001\001" +
    "\000\002\001\001\000\006\023\207\073\226\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\021\171\035\101" +
    "\041\067\065\106\070\231\071\172\072\175\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\021\236\035\101\041\067\065\106\001" +
    "\001\000\002\001\001\000\034\016\053\024\243\025\242" +
    "\034\241\041\067\046\065\052\041\062\042\063\046\064" +
    "\040\065\052\066\062\067\047\001\001\000\002\001\001" +
    "\000\032\016\053\024\243\025\245\041\067\046\065\052" +
    "\041\062\042\063\046\064\040\065\052\066\062\067\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\021\251\035\101\041\067\065\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\021\254\035\101" +
    "\041\067\065\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\016\053\024\243\025\242\034\257\041\067" +
    "\046\065\052\041\062\042\063\046\064\040\065\052\066" +
    "\062\067\047\001\001\000\032\016\053\024\243\025\245" +
    "\041\067\046\065\052\041\062\042\063\046\064\040\065" +
    "\052\066\062\067\047\001\001\000\002\001\001\000\012" +
    "\021\262\035\101\041\067\065\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\016\053\024\243\025\242" +
    "\034\265\041\067\046\065\052\041\062\042\063\046\064" +
    "\040\065\052\066\062\067\047\001\001\000\032\016\053" +
    "\024\243\025\245\041\067\046\065\052\041\062\042\063" +
    "\046\064\040\065\052\066\062\067\047\001\001\000\002" +
    "\001\001\000\004\046\270\001\001\000\002\001\001\000" +
    "\034\016\053\024\243\025\242\034\272\041\067\046\065" +
    "\052\041\062\042\063\046\064\040\065\052\066\062\067" +
    "\047\001\001\000\032\016\053\024\243\025\245\041\067" +
    "\046\065\052\041\062\042\063\046\064\040\065\052\066" +
    "\062\067\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\021\305\035\101\041\067\065\106\001\001\000" +
    "\002\001\001\000\004\023\207\001\001\000\002\001\001" +
    "\000\012\021\302\035\101\041\067\065\106\001\001\000" +
    "\002\001\001\000\012\021\304\035\101\041\067\065\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\074" +
    "\311\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\021" +
    "\315\035\101\041\067\065\106\001\001\000\002\001\001" +
    "\000\012\021\317\035\101\041\067\065\106\001\001\000" +
    "\002\001\001\000\004\052\322\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\016\053\024" +
    "\243\025\242\034\325\041\067\046\065\052\041\062\042" +
    "\063\046\064\040\065\052\066\062\067\047\001\001\000" +
    "\032\016\053\024\243\025\245\041\067\046\065\052\041" +
    "\062\042\063\046\064\040\065\052\066\062\067\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\021\332\035\101\041\067\065\106\001\001\000" +
    "\002\001\001\000\012\021\334\035\101\041\067\065\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\032\342\044\343\045\344" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\032" +
    "\352\045\354\001\001\000\002\001\001\000\004\035\346" +
    "\001\001\000\002\001\001\000\034\016\053\024\243\025" +
    "\242\034\350\041\067\046\065\052\041\062\042\063\046" +
    "\064\040\065\052\066\062\067\047\001\001\000\032\016" +
    "\053\024\243\025\245\041\067\046\065\052\041\062\042" +
    "\063\046\064\040\065\052\066\062\067\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\016" +
    "\053\024\243\025\242\034\360\041\067\046\065\052\041" +
    "\062\042\063\046\064\040\065\052\066\062\067\047\001" +
    "\001\000\032\016\053\024\243\025\245\041\067\046\065" +
    "\052\041\062\042\063\046\064\040\065\052\066\062\067" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\u0112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\016\053\024\043\033\373\041\067\046" +
    "\065\052\041\062\042\063\046\064\040\065\052\066\062" +
    "\067\047\001\001\000\030\016\053\024\362\041\067\046" +
    "\065\052\041\062\042\063\046\064\040\065\052\066\062" +
    "\067\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\040\u0101\054\u0100\055\u0102\056\377\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\040\u0101\054\u0104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\016\053\024\043\033\u010a\041\067" +
    "\046\065\052\041\062\042\063\046\064\040\065\052\066" +
    "\062\067\047\001\001\000\030\016\053\024\362\041\067" +
    "\046\065\052\041\062\042\063\046\064\040\065\052\066" +
    "\062\067\047\001\001\000\002\001\001\000\012\040\u0101" +
    "\054\u0100\055\u0102\056\u010d\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\016\053\024\043\033\u0110\041\067" +
    "\046\065\052\041\062\042\063\046\064\040\065\052\066" +
    "\062\067\047\001\001\000\030\016\053\024\362\041\067" +
    "\046\065\052\041\062\042\063\046\064\040\065\052\066" +
    "\062\067\047\001\001\000\002\001\001\000\004\036\u0113" +
    "\001\001\000\004\022\u0118\001\001\000\004\036\u0115\001" +
    "\001\000\006\023\206\026\u0116\001\001\000\006\023\207" +
    "\073\u0117\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\040\u0101\054\u0100\055\u0102\056\u011b" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\016" +
    "\053\024\043\033\u011e\041\067\046\065\052\041\062\042" +
    "\063\046\064\040\065\052\066\062\067\047\001\001\000" +
    "\030\016\053\024\362\041\067\046\065\052\041\062\042" +
    "\063\046\064\040\065\052\066\062\067\047\001\001\000" +
    "\002\001\001\000\012\040\u0101\054\u0100\055\u0102\056\u0121" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\016" +
    "\053\024\043\033\u0124\041\067\046\065\052\041\062\042" +
    "\063\046\064\040\065\052\066\062\067\047\001\001\000" +
    "\030\016\053\024\362\041\067\046\065\052\041\062\042" +
    "\063\046\064\040\065\052\066\062\067\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\u0129\001\001\000\004\022\u012e\001\001\000\004\036" +
    "\u012b\001\001\000\006\023\206\026\u012c\001\001\000\006" +
    "\023\207\073\u012d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public Expresion sumando;

    public List<Expresion> lista_expresiones;
    public List<Errores> errores = new LinkedList<Errores>();
    public Programa programa = new Programa();
    public List<Metodo> lista_metodos = new LinkedList<>();
    public List<Declaracion> lista_declaraciones = new LinkedList<>();

    public void syntax_error(Symbol cur_token) {
        System.out.println(" Se esperaban: ");
        String esperados = "";
        for (int i = 0; i < expected_token_ids().size(); i++){
            esperados += symbl_name_from_id(expected_token_ids().get(i))+"-";
        }
        System.out.print(esperados+", pero se encontro "+cur_token.value+" en la linea"+cur_token.right+" y en la columna"+cur_token.left);
        errores.add(new Errores("SINTACTICO","Se esperaba "+esperados+" y se encontro "+symbl_name_from_id(cur_token.sym),cur_token.right,cur_token.left));
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal "+message+info);
    }
    
    public void report_fatal_error(Symbol cur) {
        System.out.println("unrecovered_syntax_error");
    }

    public void imp(String texto){
        System.out.println(texto);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= pistas 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Pista> e1 = (List<Pista>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            programa = new Programa(e1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // pistas ::= pistas pista 
            {
              List<Pista> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Pista> e1 = (List<Pista>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pista e2 = (Pista)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
            RESULT.add(e2);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pistas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // pistas ::= pista 
            {
              List<Pista> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pista e1 = (Pista)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new LinkedList<>();
            RESULT.add(e1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pistas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // pista ::= PISTA ID extiende INDENT lista_declaracion DEDENT 
            {
              Pista RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<String> e3 = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            RESULT = new Pista(lista_metodos,lista_declaraciones,e3,e2.toString());
            lista_metodos = new LinkedList<>();
            lista_declaraciones = new LinkedList<>();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pista",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // extiende ::= 
            {
              List<String> RESULT =null;
		
            RESULT = null;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extiende",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // extiende ::= EXT ids 
            {
              List<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<String> e1 = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extiende",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ids ::= ids COMA ID 
            {
              List<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<String> e1 = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            e1.add(e2.toString()); 
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ids ::= ID 
            {
              List<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new LinkedList<>();
            RESULT.add(e1.toString()); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lista_declaracion ::= lista_declaracion declaraciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lista_declaracion ::= declaraciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaraciones ::= declaracion_global 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaracion e1 = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            lista_declaraciones.add(e1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaraciones ::= metodo 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Metodo e1 = (Metodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            lista_metodos.add(e1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // metodo ::= KEEP tipo ID PAR_A param PAR_C INDENT instrucciones DEDENT 
            {
              Metodo RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Parametro> e3 = (List<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e4 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Metodo(e1.toString(),e2,e3,e4,true,true,false);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // metodo ::= tipo ID PAR_A param PAR_C INDENT instrucciones DEDENT 
            {
              Metodo RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Parametro> e3 = (List<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e4 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Metodo(e1.toString(),e2,e3,e4,true,false,false);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // metodo ::= ID PAR_A param PAR_C INDENT instrucciones DEDENT 
            {
              Metodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Parametro> e2 = (List<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e3 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Metodo(e1.toString(),"void",e2,e3,false,false,false);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // metodo ::= KEEP ID PAR_A param PAR_C INDENT instrucciones DEDENT 
            {
              Metodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Parametro> e2 = (List<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e3 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Metodo(e1.toString(),"void",e2,e3,false,true,false);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // metodo ::= KEEP PRINCIPAL PAR_A PAR_C INDENT instrucciones DEDENT 
            {
              Metodo RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e4 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Metodo("Principal","void",null,e4,false,true,true);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // metodo ::= PRINCIPAL PAR_A PAR_C INDENT instrucciones DEDENT 
            {
              Metodo RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e4 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Metodo("Principal","void",null,e4,false,false,true);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // param ::= 
            {
              List<Parametro> RESULT =null;
		
            RESULT = new LinkedList<>();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // param ::= parametros 
            {
              List<Parametro> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Parametro> e1 = (List<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parametros ::= parametros COMA parametro 
            {
              List<Parametro> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Parametro> e1 = (List<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parametro e2 = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
            RESULT.add(e2);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parametros ::= parametro 
            {
              List<Parametro> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parametro e1 = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new LinkedList<>();
            RESULT.add(e1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parametro ::= tipo ID 
            {
              Parametro RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Parametro(e2.toString(),e1.toString(), false, e2right, e2left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parametro ::= tipo ARREGLO ID 
            {
              Parametro RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Parametro(e2.toString(),e1.toString(), true, e2right, e2left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instrucciones ::= instrucciones instruccion 
            {
              List<Instruccion> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e1 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
            RESULT.add(e2);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instrucciones ::= instruccion 
            {
              List<Instruccion> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new LinkedList<>();
            RESULT.add(e1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion ::= declaracion 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaracion e1 = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion ::= paso 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Paso e1 = (Paso)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccion ::= para 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Para e1 = (Para)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruccion ::= asignacion 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Asignacion e1 = (Asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruccion ::= RETORNA expresion 
            {
              Instruccion RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Retorno(e1,e2right,e2left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instruccion ::= si 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Si e1 = (Si)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instruccion ::= hacer 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Hacer e1 = (Hacer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instruccion ::= mientras 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Mientras e1 = (Mientras)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruccion ::= llamada 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Llamada e1 = (Llamada)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccion ::= switch 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Switch e1 = (Switch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccion ::= error 
            {
              Instruccion RESULT =null;
		
            RESULT = null;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // para ::= PARA PAR_A asigna PUNTOC expresion PUNTOC paso PAR_C INDENT inst DEDENT 
            {
              Para RESULT =null;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Asigna e1 = (Asigna)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Paso e3 = (Paso)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e4 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Para(e1, e2, e3, e4, e5right, e5left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("para",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // paso ::= ID INC 
            {
              Paso RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Paso(e1.toString(),null,Paso.TIPO.INCREMENTO, e1right, e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paso",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // paso ::= ID DEC 
            {
              Paso RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Paso(e1.toString(),null,Paso.TIPO.DECREMENTO, e1right, e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paso",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // paso ::= ID SUMA_S expresion 
            {
              Paso RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Paso(e1.toString(),e2,Paso.TIPO.SIMPLIFICADA, e1right, e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paso",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // asigna ::= ENTERO ID ASIGNAR expresion 
            {
              Asigna RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Asigna(e1.toString(), e2, e1right, e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asigna",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // asigna ::= VAR ENTERO ID ASIGNAR expresion 
            {
              Asigna RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Asigna(e1.toString(), e2, e1right, e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asigna",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // asigna ::= ID 
            {
              Asigna RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Asigna(e1.toString(), null, e1right, e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asigna",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // asigna ::= ID ASIGNAR expresion 
            {
              Asigna RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Asigna(e1.toString(), e2, e1right, e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asigna",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // inst ::= inst instruc 
            {
              List<Instruccion> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e1 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = e1;
        RESULT.add(e2);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // inst ::= instruc 
            {
              List<Instruccion> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new LinkedList<>();
        RESULT.add(e1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // llamada ::= id_llamada PAR_A param_enviar PAR_C 
            {
              Llamada RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<ParametroEnviar> e2 = (List<ParametroEnviar>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Llamada(e1,e2, e3right, e3left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // param_enviar ::= 
            {
              List<ParametroEnviar> RESULT =null;
		
        RESULT = null;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_enviar",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // param_enviar ::= parametros_enviar 
            {
              List<ParametroEnviar> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<ParametroEnviar> e1 = (List<ParametroEnviar>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = e1;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_enviar",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parametros_enviar ::= parametros_enviar COMA parametro_enviar 
            {
              List<ParametroEnviar> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<ParametroEnviar> e1 = (List<ParametroEnviar>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParametroEnviar e2 = (ParametroEnviar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
            RESULT.add(e2);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_enviar",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parametros_enviar ::= parametro_enviar 
            {
              List<ParametroEnviar> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParametroEnviar e1 = (ParametroEnviar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new LinkedList<>();
            RESULT.add(e1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_enviar",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // parametro_enviar ::= expresion 
            {
              ParametroEnviar RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new ParametroEnviar(ParametroEnviar.Tipo.EXPRESION,null,null,null,e1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_enviar",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parametro_enviar ::= notas 
            {
              ParametroEnviar RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new ParametroEnviar(ParametroEnviar.Tipo.NOTA,null,null,e1,null);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_enviar",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parametro_enviar ::= orden 
            {
              ParametroEnviar RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new ParametroEnviar(ParametroEnviar.Tipo.ORDEN,null,null,e1,null);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_enviar",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parametro_enviar ::= LLAVE_A items LLAVE_C 
            {
              ParametroEnviar RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Item> e1 = (List<Item>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new ParametroEnviar(ParametroEnviar.Tipo.ARREGLO,new Item(e1,false,null),null,null,null);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_enviar",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // notas ::= NOTAS 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1.toString();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("notas",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // notas ::= SI 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1.toString();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("notas",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // orden ::= ASC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1.toString();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("orden",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // orden ::= DESC 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1.toString();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("orden",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // orden ::= PAR 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1.toString();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("orden",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // orden ::= IMPAR 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1.toString();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("orden",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // orden ::= PRIMOS 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1.toString();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("orden",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // id_llamada ::= ID 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1.toString();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_llamada",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // id_llamada ::= MSG 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1.toString();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_llamada",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // id_llamada ::= ORDENAR 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1.toString();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_llamada",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // id_llamada ::= SUMARIZAR 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1.toString();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_llamada",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // id_llamada ::= LONG 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1.toString();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_llamada",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // id_llamada ::= REPRODUCIR 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1.toString();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_llamada",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // id_llamada ::= ESPERAR 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1.toString();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_llamada",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // instruc ::= instruccion 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = e1;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruc",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // instruc ::= SALIR 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new ContinuarSalir(false,"salir",e1right,e1left);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruc",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // instruc ::= CONT 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new ContinuarSalir(true,"continuar",e1right,e1left);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruc",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // declaracion ::= VAR tipo ids asignar 
            {
              Declaracion RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<String> e2 = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e3 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Declaracion(e2, e1, null, e3, null, false, false, e4right, e4left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // declaracion ::= VAR tipo ARREGLO ids dimensiones asignar_arreglo 
            {
              Declaracion RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<String> e2 = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Expresion> e3 = (List<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Item e5 = (Item)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Declaracion(e2, e1, e3, null, e5, true, false, e4right, e4left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // declaracion_global ::= KEEP VAR tipo ids asignar 
            {
              Declaracion RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<String> e2 = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e3 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Declaracion(e2, e1, null, e3, null, false, true, e4right, e4left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_global",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // declaracion_global ::= VAR tipo ids asignar 
            {
              Declaracion RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<String> e2 = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e3 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Declaracion(e2, e1, null, e3, null, false, false, e4right, e4left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_global",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // declaracion_global ::= KEEP VAR tipo ARREGLO ids dimensiones asignar_arreglo 
            {
              Declaracion RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<String> e2 = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Expresion> e3 = (List<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Item e5 = (Item)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Declaracion(e2, e1, e3, null, e5, true, true, e4right, e4left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_global",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // declaracion_global ::= VAR tipo ARREGLO ids dimensiones asignar_arreglo 
            {
              Declaracion RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<String> e2 = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Expresion> e3 = (List<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Item e5 = (Item)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Declaracion(e2, e1, e3, null, e5, true, false, e4right, e4left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_global",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // dimensiones ::= dimensiones dimension 
            {
              List<Expresion> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Expresion> e1 = (List<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
            RESULT.add(e2);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimensiones",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // dimensiones ::= dimension 
            {
              List<Expresion> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new LinkedList<>();
            RESULT.add(e1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimensiones",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // dimension ::= COR_A expresion COR_C 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = e1;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimension",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // asignar_arreglo ::= 
            {
              Item RESULT =null;
		
            RESULT = null;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar_arreglo",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // asignar_arreglo ::= ASIGNAR LLAVE_A items LLAVE_C 
            {
              Item RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Item> e1 = (List<Item>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Item(e1,false,null);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar_arreglo",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // arreglo ::= LLAVE_A items LLAVE_C 
            {
              List<Item> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Item> e1 = (List<Item>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // items ::= items COMA item 
            {
              List<Item> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Item> e1 = (List<Item>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Item e2 = (Item)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
            RESULT.add(e2);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // items ::= item 
            {
              List<Item> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Item e1 = (Item)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new LinkedList<>();
            RESULT.add(e1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // item ::= arreglo 
            {
              Item RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Item> e1 = (List<Item>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Item(e1,false,null);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("item",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // item ::= expresion 
            {
              Item RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Item(null,true,e1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("item",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // asignar ::= 
            {
              Expresion RESULT =null;
		
            RESULT = null;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // asignar ::= ASIGNAR expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = e1; 
            sumando = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // tipo ::= ENTERO 
            {
              String RESULT =null;
		
            RESULT = "numero";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // tipo ::= DECIMAL 
            {
              String RESULT =null;
		
            RESULT = "decimal";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // tipo ::= CADENA 
            {
              String RESULT =null;
		
            RESULT = "string";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // tipo ::= BOOLEAN 
            {
              String RESULT =null;
		
            RESULT = "boolean";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // tipo ::= CHAR 
            {
              String RESULT =null;
		
            RESULT = "caracter";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // valor_puntual ::= NUMERO 
            {
              Primitivo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Primitivo("numero",e1right,e1left,Integer.parseInt(e1.toString())); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_puntual",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // valor_puntual ::= STRING 
            {
              Primitivo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Primitivo("string",e1right,e1left,e1.toString()); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_puntual",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // valor_puntual ::= CARACTER 
            {
              Primitivo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Primitivo("caracter",e1right,e1left,e1.toString().charAt(0)); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_puntual",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // valor_puntual ::= TRUE 
            {
              Primitivo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Primitivo("boolean",e1right,e1left,true);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_puntual",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // valor_puntual ::= FALSE 
            {
              Primitivo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Primitivo("boolean",e1right,e1left,false);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_puntual",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // valor_puntual ::= NUMERO_D 
            {
              Primitivo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Primitivo("decimal",e1right,e1left,Double.parseDouble(e1.toString())); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_puntual",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresion ::= expresion SUMA expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.SUMA);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expresion ::= expresion RESTA expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Expresion(e1,e2,Expresion.Operacion.RESTA);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expresion ::= expresion POR expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.POR);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expresion ::= expresion ENTRE expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.ENTRE);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expresion ::= expresion POT expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.POT);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expresion ::= expresion MOD expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.MOD);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expresion ::= RESTA expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Expresion(e1,Expresion.Operacion.NEGATIVO);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expresion ::= expresion MAYOR expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.MAYOR);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expresion ::= expresion MENOR expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.MENOR);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expresion ::= expresion MENOR_I expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.MENOR_I);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expresion ::= expresion MAYOR_I expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.MAYOR_I);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expresion ::= expresion IGUAL expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.IGUAL);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expresion ::= expresion DIFF expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.DIFF);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expresion ::= expresion AND expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.AND);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expresion ::= expresion OR expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.OR);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expresion ::= expresion XOR expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.XOR);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expresion ::= expresion NAND expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.NAND);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expresion ::= expresion NOR expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.NOR);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expresion ::= valor_puntual 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Primitivo e1 = (Primitivo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Expresion(e1,Expresion.Operacion.PRIMITIVO);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expresion ::= PAR_A expresion PAR_C 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expresion ::= ID 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Expresion(new Identificador(e1.toString(),null,false,e1left,e1right),Expresion.Operacion.IDENTIFICADOR);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expresion ::= ID dimensiones 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Expresion> e2 = (List<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Expresion(new Identificador(e1.toString(),e2,true,e1left,e1right),Expresion.Operacion.ARREGLO);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expresion ::= NOT expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Expresion(e1,Expresion.Operacion.NOT);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expresion ::= llamada 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Llamada e1 = (Llamada)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Expresion(new Metodo_Retorno(e1),Expresion.Operacion.LLAMADA);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expresion ::= NULO ID 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Expresion(new Identificador(e1.toString(),null,false,e1left,e1right),Expresion.Operacion.NULO);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // si ::= SI PAR_A expresion PAR_C INDENT inst DEDENT 
            {
              Si RESULT =null;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e2 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Si(e1, e2, null, null, e5right, e5left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // si ::= SI PAR_A expresion PAR_C INDENT inst DEDENT SINO INDENT inst DEDENT 
            {
              Si RESULT =null;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<Instruccion> e2 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e3 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Si(e1, e2, e3, null, e5right, e5left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // si ::= SI PAR_A expresion PAR_C INDENT inst DEDENT SINO si 
            {
              Si RESULT =null;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Instruccion> e2 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Si e3 = (Si)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Si(e1, e2, null, e3, e5right, e5left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // asignacion ::= ID ASIGNAR expresion 
            {
              Asignacion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Asignacion(e1.toString(),e2,null,e1right,e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // asignacion ::= ID dimensiones ASIGNAR expresion 
            {
              Asignacion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Expresion> e3 = (List<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            
            RESULT = new Asignacion(e1.toString(),e2,e3,e1right,e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // hacer ::= HACER INDENT inst DEDENT MIENTRAS PAR_A expresion PAR_C 
            {
              Hacer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<Instruccion> e3 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Hacer(e2, e3, e1right, e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("hacer",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // mientras ::= MIENTRAS PAR_A expresion PAR_C INDENT inst DEDENT 
            {
              Mientras RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e3 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Mientras(e2, e3, e1right, e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mientras",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // switch ::= SWITCH PAR_A ID PAR_C INDENT casos DEDENT 
            {
              Switch RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Caso> e3 = (List<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Switch(e2.toString(), e3, null, e1right, e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // switch ::= SWITCH PAR_A ID PAR_C INDENT casos default DEDENT 
            {
              Switch RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Caso> e4 = (List<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e3 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Switch(e2.toString(), e4, e3, e1right, e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // switch ::= SWITCH PAR_A ID PAR_C INDENT default DEDENT 
            {
              Switch RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e3 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Switch(e2.toString(), null, e3, e1right, e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // casos ::= casos caso 
            {
              List<Caso> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Caso> e1 = (List<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caso e2 = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
            RESULT.add(e2);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // casos ::= caso 
            {
              List<Caso> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caso e1 = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new LinkedList<>();
            RESULT.add(e1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // caso ::= CASO valor_puntual INDENT inst DEDENT 
            {
              Caso RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Primitivo e3 = (Primitivo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e2 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Caso(e3, e2, e1right, e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // default ::= DEFAULT INDENT inst DEDENT 
            {
              List<Instruccion> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e1 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("default",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
