
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import Interprete.*;
import Interprete.Metodos_Nativos.*;
import java.util.LinkedList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\150\000\002\002\004\000\002\002\003\000\002\020" +
    "\004\000\002\020\003\000\002\021\010\000\002\042\002" +
    "\000\002\042\004\000\002\041\005\000\002\041\003\000" +
    "\002\005\004\000\002\005\003\000\002\003\003\000\002" +
    "\003\003\000\002\024\013\000\002\024\012\000\002\024" +
    "\011\000\002\024\012\000\002\024\011\000\002\024\010" +
    "\000\002\054\002\000\002\054\003\000\002\053\005\000" +
    "\002\053\003\000\002\052\004\000\002\036\004\000\002" +
    "\036\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\004\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\037\004\000\002" +
    "\037\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\022\006\000\002\023\007\000\002\023\006" +
    "\000\002\007\005\000\002\044\005\000\002\044\003\000" +
    "\002\006\003\000\002\006\003\000\002\026\002\000\002" +
    "\026\004\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\004\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\003\000\002\025\005\000\002\025\003" +
    "\000\002\025\004\000\002\025\004\000\002\025\004\000" +
    "\002\047\011\000\002\047\015\000\002\047\013\000\002" +
    "\065\005\000\002\065\006\000\002\061\012\000\002\060" +
    "\011\000\002\056\014\000\002\057\010\000\002\064\011" +
    "\000\002\064\012\000\002\064\011\000\002\045\004\000" +
    "\002\045\003\000\002\046\007\000\002\035\006\000\002" +
    "\055\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\353\000\004\004\005\001\002\000\006\002\ufffe\004" +
    "\ufffe\001\002\000\004\105\012\001\002\000\006\002\000" +
    "\004\005\001\002\000\004\002\010\001\002\000\004\002" +
    "\001\001\002\000\006\002\uffff\004\uffff\001\002\000\006" +
    "\005\013\116\ufffc\001\002\000\004\105\157\001\002\000" +
    "\004\116\015\001\002\000\024\006\020\007\017\010\021" +
    "\011\032\012\016\015\030\016\023\046\033\105\025\001" +
    "\002\000\004\105\uffcb\001\002\000\004\105\uffcc\001\002" +
    "\000\004\105\uffcd\001\002\000\004\105\uffca\001\002\000" +
    "\026\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\015\ufff7" +
    "\016\ufff7\046\ufff7\105\ufff7\117\ufff7\001\002\000\014\006" +
    "\020\007\017\010\021\011\032\012\016\001\002\000\026" +
    "\006\020\007\017\010\021\011\032\012\016\015\030\016" +
    "\023\046\033\105\025\117\350\001\002\000\004\110\342" +
    "\001\002\000\004\105\333\001\002\000\026\006\ufff5\007" +
    "\ufff5\010\ufff5\011\ufff5\012\ufff5\015\ufff5\016\ufff5\046\ufff5" +
    "\105\ufff5\117\ufff5\001\002\000\022\006\020\007\017\010" +
    "\021\011\032\012\016\016\274\046\277\105\275\001\002" +
    "\000\026\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\015" +
    "\ufff6\016\ufff6\046\ufff6\105\ufff6\117\ufff6\001\002\000\004" +
    "\105\uffc9\001\002\000\004\110\034\001\002\000\004\111" +
    "\035\001\002\000\004\116\036\001\002\000\030\003\056" +
    "\016\063\017\054\021\043\027\060\030\061\031\053\032" +
    "\055\034\064\045\042\105\046\001\002\000\032\003\056" +
    "\016\063\017\054\021\043\027\060\030\061\031\053\032" +
    "\055\034\064\045\042\105\046\117\273\001\002\000\036" +
    "\003\uffe2\016\uffe2\017\uffe2\021\uffe2\023\uffe2\024\uffe2\027" +
    "\uffe2\030\uffe2\031\uffe2\032\uffe2\034\uffe2\045\uffe2\105\uffe2" +
    "\117\uffe2\001\002\000\032\003\uffe8\016\uffe8\017\uffe8\021" +
    "\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\034\uffe8\045\uffe8" +
    "\105\uffe8\117\uffe8\001\002\000\004\110\267\001\002\000" +
    "\004\110\242\001\002\000\036\003\uffe3\016\uffe3\017\uffe3" +
    "\021\uffe3\023\uffe3\024\uffe3\027\uffe3\030\uffe3\031\uffe3\032" +
    "\uffe3\034\uffe3\045\uffe3\105\uffe3\117\uffe3\001\002\000\036" +
    "\003\uffe6\016\uffe6\017\uffe6\021\uffe6\023\uffe6\024\uffe6\027" +
    "\uffe6\030\uffe6\031\uffe6\032\uffe6\034\uffe6\045\uffe6\105\uffe6" +
    "\117\uffe6\001\002\000\004\114\236\001\002\000\036\003" +
    "\uffde\016\uffde\017\uffde\021\uffde\023\uffde\024\uffde\027\uffde" +
    "\030\uffde\031\uffde\032\uffde\034\uffde\045\uffde\105\uffde\117" +
    "\uffde\001\002\000\036\003\uffe0\016\uffe0\017\uffe0\021\uffe0" +
    "\023\uffe0\024\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\034" +
    "\uffe0\045\uffe0\105\uffe0\117\uffe0\001\002\000\036\003\uffe7" +
    "\016\uffe7\017\uffe7\021\uffe7\023\uffe7\024\uffe7\027\uffe7\030" +
    "\uffe7\031\uffe7\032\uffe7\034\uffe7\045\uffe7\105\uffe7\117\uffe7" +
    "\001\002\000\036\003\uffe1\016\uffe1\017\uffe1\021\uffe1\023" +
    "\uffe1\024\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\034\uffe1" +
    "\045\uffe1\105\uffe1\117\uffe1\001\002\000\030\013\070\014" +
    "\075\055\067\063\100\065\101\105\077\106\072\107\102" +
    "\110\066\112\073\113\071\001\002\000\004\110\221\001" +
    "\002\000\004\110\210\001\002\000\036\003\uffdd\016\uffdd" +
    "\017\uffdd\021\uffdd\023\uffdd\024\uffdd\027\uffdd\030\uffdd\031" +
    "\uffdd\032\uffdd\034\uffdd\045\uffdd\105\uffdd\117\uffdd\001\002" +
    "\000\036\003\uffdf\016\uffdf\017\uffdf\021\uffdf\023\uffdf\024" +
    "\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\034\uffdf\045\uffdf" +
    "\105\uffdf\117\uffdf\001\002\000\004\110\202\001\002\000" +
    "\004\116\166\001\002\000\036\003\uffe4\016\uffe4\017\uffe4" +
    "\021\uffe4\023\uffe4\024\uffe4\027\uffe4\030\uffe4\031\uffe4\032" +
    "\uffe4\034\uffe4\045\uffe4\105\uffe4\117\uffe4\001\002\000\014" +
    "\006\020\007\017\010\021\011\032\012\016\001\002\000" +
    "\004\110\065\001\002\000\030\013\070\014\075\055\067" +
    "\063\100\065\101\105\077\106\072\107\102\110\066\112" +
    "\073\113\071\001\002\000\030\013\070\014\075\055\067" +
    "\063\100\065\101\105\077\106\072\107\102\110\066\112" +
    "\073\113\071\001\002\000\004\105\153\001\002\000\124" +
    "\003\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\015" +
    "\uffc5\016\uffc5\017\uffc5\021\uffc5\023\uffc5\024\uffc5\027\uffc5" +
    "\030\uffc5\031\uffc5\032\uffc5\034\uffc5\045\uffc5\046\uffc5\047" +
    "\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\056\uffc5" +
    "\057\uffc5\060\uffc5\061\uffc5\062\uffc5\064\uffc5\065\uffc5\066" +
    "\uffc5\067\uffc5\070\uffc5\071\uffc5\100\uffc5\105\uffc5\111\uffc5" +
    "\116\uffc5\117\uffc5\001\002\000\124\003\uffc3\006\uffc3\007" +
    "\uffc3\010\uffc3\011\uffc3\012\uffc3\015\uffc3\016\uffc3\017\uffc3" +
    "\021\uffc3\023\uffc3\024\uffc3\027\uffc3\030\uffc3\031\uffc3\032" +
    "\uffc3\034\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3" +
    "\052\uffc3\053\uffc3\054\uffc3\056\uffc3\057\uffc3\060\uffc3\061" +
    "\uffc3\062\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3\070\uffc3" +
    "\071\uffc3\100\uffc3\105\uffc3\111\uffc3\116\uffc3\117\uffc3\001" +
    "\002\000\124\003\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7" +
    "\012\uffc7\015\uffc7\016\uffc7\017\uffc7\021\uffc7\023\uffc7\024" +
    "\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\034\uffc7\045\uffc7" +
    "\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054" +
    "\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\064\uffc7" +
    "\065\uffc7\066\uffc7\067\uffc7\070\uffc7\071\uffc7\100\uffc7\105" +
    "\uffc7\111\uffc7\116\uffc7\117\uffc7\001\002\000\124\003\uffc8" +
    "\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\015\uffc8\016" +
    "\uffc8\017\uffc8\021\uffc8\023\uffc8\024\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\032\uffc8\034\uffc8\045\uffc8\046\uffc8\047\uffc8\050" +
    "\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\056\uffc8\057\uffc8" +
    "\060\uffc8\061\uffc8\062\uffc8\064\uffc8\065\uffc8\066\uffc8\067" +
    "\uffc8\070\uffc8\071\uffc8\100\uffc8\105\uffc8\111\uffc8\116\uffc8" +
    "\117\uffc8\001\002\000\122\003\uffb0\006\uffb0\007\uffb0\010" +
    "\uffb0\011\uffb0\012\uffb0\015\uffb0\016\uffb0\017\uffb0\021\uffb0" +
    "\023\uffb0\024\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\034" +
    "\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0" +
    "\053\uffb0\054\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062" +
    "\uffb0\064\uffb0\065\uffb0\066\uffb0\067\uffb0\070\uffb0\071\uffb0" +
    "\100\uffb0\105\uffb0\111\uffb0\117\uffb0\001\002\000\124\003" +
    "\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\015\uffc4" +
    "\016\uffc4\017\uffc4\021\uffc4\023\uffc4\024\uffc4\027\uffc4\030" +
    "\uffc4\031\uffc4\032\uffc4\034\uffc4\045\uffc4\046\uffc4\047\uffc4" +
    "\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\056\uffc4\057" +
    "\uffc4\060\uffc4\061\uffc4\062\uffc4\064\uffc4\065\uffc4\066\uffc4" +
    "\067\uffc4\070\uffc4\071\uffc4\100\uffc4\105\uffc4\111\uffc4\116" +
    "\uffc4\117\uffc4\001\002\000\046\047\117\050\120\051\115" +
    "\052\107\053\122\054\105\056\104\057\116\060\124\061" +
    "\106\062\123\064\110\065\121\066\113\067\114\070\112" +
    "\071\111\100\150\001\002\000\122\003\uffae\006\uffae\007" +
    "\uffae\010\uffae\011\uffae\012\uffae\015\uffae\016\uffae\017\uffae" +
    "\021\uffae\023\uffae\024\uffae\027\uffae\030\uffae\031\uffae\032" +
    "\uffae\034\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae" +
    "\052\uffae\053\uffae\054\uffae\056\uffae\057\uffae\060\uffae\061" +
    "\uffae\062\uffae\064\uffae\065\uffae\066\uffae\067\uffae\070\uffae" +
    "\071\uffae\100\uffae\105\uffae\111\uffae\117\uffae\001\002\000" +
    "\030\013\070\014\075\055\067\063\100\065\101\105\077" +
    "\106\072\107\102\110\066\112\073\113\071\001\002\000" +
    "\030\013\070\014\075\055\067\063\100\065\101\105\077" +
    "\106\072\107\102\110\066\112\073\113\071\001\002\000" +
    "\124\003\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6" +
    "\015\uffc6\016\uffc6\017\uffc6\021\uffc6\023\uffc6\024\uffc6\027" +
    "\uffc6\030\uffc6\031\uffc6\032\uffc6\034\uffc6\045\uffc6\046\uffc6" +
    "\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\056" +
    "\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6\064\uffc6\065\uffc6" +
    "\066\uffc6\067\uffc6\070\uffc6\071\uffc6\100\uffc6\105\uffc6\111" +
    "\uffc6\116\uffc6\117\uffc6\001\002\000\122\003\uffbc\006\uffbc" +
    "\007\uffbc\010\uffbc\011\uffbc\012\uffbc\015\uffbc\016\uffbc\017" +
    "\uffbc\021\uffbc\023\uffbc\024\uffbc\027\uffbc\030\uffbc\031\uffbc" +
    "\032\uffbc\034\uffbc\045\uffbc\046\uffbc\047\117\050\120\051" +
    "\115\052\107\053\122\054\105\056\104\057\116\060\124" +
    "\061\106\062\123\064\uffbc\065\uffbc\066\uffbc\067\uffbc\070" +
    "\uffbc\071\uffbc\100\uffbc\105\uffbc\111\uffbc\117\uffbc\001\002" +
    "\000\030\013\070\014\075\055\067\063\100\065\101\105" +
    "\077\106\072\107\102\110\066\112\073\113\071\001\002" +
    "\000\030\013\070\014\075\055\067\063\100\065\101\105" +
    "\077\106\072\107\102\110\066\112\073\113\071\001\002" +
    "\000\030\013\070\014\075\055\067\063\100\065\101\105" +
    "\077\106\072\107\102\110\066\112\073\113\071\001\002" +
    "\000\030\013\070\014\075\055\067\063\100\065\101\105" +
    "\077\106\072\107\102\110\066\112\073\113\071\001\002" +
    "\000\030\013\070\014\075\055\067\063\100\065\101\105" +
    "\077\106\072\107\102\110\066\112\073\113\071\001\002" +
    "\000\030\013\070\014\075\055\067\063\100\065\101\105" +
    "\077\106\072\107\102\110\066\112\073\113\071\001\002" +
    "\000\030\013\070\014\075\055\067\063\100\065\101\105" +
    "\077\106\072\107\102\110\066\112\073\113\071\001\002" +
    "\000\030\013\070\014\075\055\067\063\100\065\101\105" +
    "\077\106\072\107\102\110\066\112\073\113\071\001\002" +
    "\000\030\013\070\014\075\055\067\063\100\065\101\105" +
    "\077\106\072\107\102\110\066\112\073\113\071\001\002" +
    "\000\030\013\070\014\075\055\067\063\100\065\101\105" +
    "\077\106\072\107\102\110\066\112\073\113\071\001\002" +
    "\000\030\013\070\014\075\055\067\063\100\065\101\105" +
    "\077\106\072\107\102\110\066\112\073\113\071\001\002" +
    "\000\030\013\070\014\075\055\067\063\100\065\101\105" +
    "\077\106\072\107\102\110\066\112\073\113\071\001\002" +
    "\000\030\013\070\014\075\055\067\063\100\065\101\105" +
    "\077\106\072\107\102\110\066\112\073\113\071\001\002" +
    "\000\030\013\070\014\075\055\067\063\100\065\101\105" +
    "\077\106\072\107\102\110\066\112\073\113\071\001\002" +
    "\000\030\013\070\014\075\055\067\063\100\065\101\105" +
    "\077\106\072\107\102\110\066\112\073\113\071\001\002" +
    "\000\030\013\070\014\075\055\067\063\100\065\101\105" +
    "\077\106\072\107\102\110\066\112\073\113\071\001\002" +
    "\000\030\013\070\014\075\055\067\063\100\065\101\105" +
    "\077\106\072\107\102\110\066\112\073\113\071\001\002" +
    "\000\122\003\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012" +
    "\uffb4\015\uffb4\016\uffb4\017\uffb4\021\uffb4\023\uffb4\024\uffb4" +
    "\027\uffb4\030\uffb4\031\uffb4\032\uffb4\034\uffb4\045\uffb4\046" +
    "\uffb4\047\117\050\120\051\115\052\107\053\122\054\105" +
    "\056\104\057\116\060\uffb4\061\uffb4\062\uffb4\064\uffb4\065" +
    "\uffb4\066\uffb4\067\uffb4\070\uffb4\071\uffb4\100\uffb4\105\uffb4" +
    "\111\uffb4\117\uffb4\001\002\000\122\003\uffb1\006\uffb1\007" +
    "\uffb1\010\uffb1\011\uffb1\012\uffb1\015\uffb1\016\uffb1\017\uffb1" +
    "\021\uffb1\023\uffb1\024\uffb1\027\uffb1\030\uffb1\031\uffb1\032" +
    "\uffb1\034\uffb1\045\uffb1\046\uffb1\047\117\050\120\051\115" +
    "\052\107\053\122\054\105\056\104\057\116\060\uffb1\061" +
    "\uffb1\062\uffb1\064\uffb1\065\uffb1\066\uffb1\067\uffb1\070\uffb1" +
    "\071\uffb1\100\uffb1\105\uffb1\111\uffb1\117\uffb1\001\002\000" +
    "\122\003\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8" +
    "\015\uffb8\016\uffb8\017\uffb8\021\uffb8\023\uffb8\024\uffb8\027" +
    "\uffb8\030\uffb8\031\uffb8\032\uffb8\034\uffb8\045\uffb8\046\uffb8" +
    "\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\056" +
    "\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\064\uffb8\065\uffb8" +
    "\066\uffb8\067\uffb8\070\uffb8\071\uffb8\100\uffb8\105\uffb8\111" +
    "\uffb8\117\uffb8\001\002\000\122\003\uffc1\006\uffc1\007\uffc1" +
    "\010\uffc1\011\uffc1\012\uffc1\015\uffc1\016\uffc1\017\uffc1\021" +
    "\uffc1\023\uffc1\024\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1" +
    "\034\uffc1\045\uffc1\046\uffc1\047\117\050\120\051\115\052" +
    "\107\053\122\054\105\056\104\057\116\060\124\061\106" +
    "\062\123\064\uffc1\065\uffc1\066\113\067\114\070\112\071" +
    "\111\100\uffc1\105\uffc1\111\uffc1\117\uffc1\001\002\000\122" +
    "\003\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\015" +
    "\uffb6\016\uffb6\017\uffb6\021\uffb6\023\uffb6\024\uffb6\027\uffb6" +
    "\030\uffb6\031\uffb6\032\uffb6\034\uffb6\045\uffb6\046\uffb6\047" +
    "\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\056\uffb6" +
    "\057\uffb6\060\uffb6\061\uffb6\062\uffb6\064\uffb6\065\uffb6\066" +
    "\uffb6\067\uffb6\070\uffb6\071\uffb6\100\uffb6\105\uffb6\111\uffb6" +
    "\117\uffb6\001\002\000\122\003\uffb7\006\uffb7\007\uffb7\010" +
    "\uffb7\011\uffb7\012\uffb7\015\uffb7\016\uffb7\017\uffb7\021\uffb7" +
    "\023\uffb7\024\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\034" +
    "\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7" +
    "\053\uffb7\054\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7\062" +
    "\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7\070\uffb7\071\uffb7" +
    "\100\uffb7\105\uffb7\111\uffb7\117\uffb7\001\002\000\122\003" +
    "\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\015\uffb2" +
    "\016\uffb2\017\uffb2\021\uffb2\023\uffb2\024\uffb2\027\uffb2\030" +
    "\uffb2\031\uffb2\032\uffb2\034\uffb2\045\uffb2\046\uffb2\047\117" +
    "\050\120\051\115\052\107\053\122\054\105\056\uffb2\057" +
    "\uffb2\060\uffb2\061\uffb2\062\uffb2\064\uffb2\065\uffb2\066\uffb2" +
    "\067\uffb2\070\uffb2\071\uffb2\100\uffb2\105\uffb2\111\uffb2\117" +
    "\uffb2\001\002\000\122\003\uffbb\006\uffbb\007\uffbb\010\uffbb" +
    "\011\uffbb\012\uffbb\015\uffbb\016\uffbb\017\uffbb\021\uffbb\023" +
    "\uffbb\024\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\034\uffbb" +
    "\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053" +
    "\uffbb\054\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb" +
    "\064\uffbb\065\uffbb\066\uffbb\067\uffbb\070\uffbb\071\uffbb\100" +
    "\uffbb\105\uffbb\111\uffbb\117\uffbb\001\002\000\122\003\uffbf" +
    "\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\015\uffbf\016" +
    "\uffbf\017\uffbf\021\uffbf\023\uffbf\024\uffbf\027\uffbf\030\uffbf" +
    "\031\uffbf\032\uffbf\034\uffbf\045\uffbf\046\uffbf\047\117\050" +
    "\120\051\115\052\107\053\122\054\105\056\104\057\116" +
    "\060\124\061\106\062\123\064\uffbf\065\uffbf\066\uffbf\067" +
    "\uffbf\070\uffbf\071\111\100\uffbf\105\uffbf\111\uffbf\117\uffbf" +
    "\001\002\000\122\003\uffc0\006\uffc0\007\uffc0\010\uffc0\011" +
    "\uffc0\012\uffc0\015\uffc0\016\uffc0\017\uffc0\021\uffc0\023\uffc0" +
    "\024\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\034\uffc0\045" +
    "\uffc0\046\uffc0\047\117\050\120\051\115\052\107\053\122" +
    "\054\105\056\104\057\116\060\124\061\106\062\123\064" +
    "\uffc0\065\uffc0\066\uffc0\067\uffc0\070\uffc0\071\111\100\uffc0" +
    "\105\uffc0\111\uffc0\117\uffc0\001\002\000\122\003\uffbd\006" +
    "\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\015\uffbd\016\uffbd" +
    "\017\uffbd\021\uffbd\023\uffbd\024\uffbd\027\uffbd\030\uffbd\031" +
    "\uffbd\032\uffbd\034\uffbd\045\uffbd\046\uffbd\047\117\050\120" +
    "\051\115\052\107\053\122\054\105\056\104\057\116\060" +
    "\124\061\106\062\123\064\uffbd\065\uffbd\066\uffbd\067\uffbd" +
    "\070\uffbd\071\111\100\uffbd\105\uffbd\111\uffbd\117\uffbd\001" +
    "\002\000\122\003\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe" +
    "\012\uffbe\015\uffbe\016\uffbe\017\uffbe\021\uffbe\023\uffbe\024" +
    "\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\034\uffbe\045\uffbe" +
    "\046\uffbe\047\117\050\120\051\115\052\107\053\122\054" +
    "\105\056\104\057\116\060\124\061\106\062\123\064\uffbe" +
    "\065\uffbe\066\uffbe\067\uffbe\070\uffbe\071\uffbe\100\uffbe\105" +
    "\uffbe\111\uffbe\117\uffbe\001\002\000\122\003\uffc2\006\uffc2" +
    "\007\uffc2\010\uffc2\011\uffc2\012\uffc2\015\uffc2\016\uffc2\017" +
    "\uffc2\021\uffc2\023\uffc2\024\uffc2\027\uffc2\030\uffc2\031\uffc2" +
    "\032\uffc2\034\uffc2\045\uffc2\046\uffc2\047\117\050\120\051" +
    "\115\052\107\053\122\054\105\056\104\057\116\060\124" +
    "\061\106\062\123\064\uffc2\065\uffc2\066\113\067\114\070" +
    "\112\071\111\100\uffc2\105\uffc2\111\uffc2\117\uffc2\001\002" +
    "\000\122\003\uffba\006\uffba\007\uffba\010\uffba\011\uffba\012" +
    "\uffba\015\uffba\016\uffba\017\uffba\021\uffba\023\uffba\024\uffba" +
    "\027\uffba\030\uffba\031\uffba\032\uffba\034\uffba\045\uffba\046" +
    "\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba" +
    "\056\uffba\057\uffba\060\uffba\061\uffba\062\uffba\064\uffba\065" +
    "\uffba\066\uffba\067\uffba\070\uffba\071\uffba\100\uffba\105\uffba" +
    "\111\uffba\117\uffba\001\002\000\122\003\uffb3\006\uffb3\007" +
    "\uffb3\010\uffb3\011\uffb3\012\uffb3\015\uffb3\016\uffb3\017\uffb3" +
    "\021\uffb3\023\uffb3\024\uffb3\027\uffb3\030\uffb3\031\uffb3\032" +
    "\uffb3\034\uffb3\045\uffb3\046\uffb3\047\117\050\120\051\115" +
    "\052\107\053\122\054\105\056\104\057\116\060\uffb3\061" +
    "\uffb3\062\uffb3\064\uffb3\065\uffb3\066\uffb3\067\uffb3\070\uffb3" +
    "\071\uffb3\100\uffb3\105\uffb3\111\uffb3\117\uffb3\001\002\000" +
    "\122\003\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9" +
    "\015\uffb9\016\uffb9\017\uffb9\021\uffb9\023\uffb9\024\uffb9\027" +
    "\uffb9\030\uffb9\031\uffb9\032\uffb9\034\uffb9\045\uffb9\046\uffb9" +
    "\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\056" +
    "\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9\064\uffb9\065\uffb9" +
    "\066\uffb9\067\uffb9\070\uffb9\071\uffb9\100\uffb9\105\uffb9\111" +
    "\uffb9\117\uffb9\001\002\000\122\003\uffb5\006\uffb5\007\uffb5" +
    "\010\uffb5\011\uffb5\012\uffb5\015\uffb5\016\uffb5\017\uffb5\021" +
    "\uffb5\023\uffb5\024\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5" +
    "\034\uffb5\045\uffb5\046\uffb5\047\117\050\120\051\115\052" +
    "\107\053\122\054\105\056\uffb5\057\uffb5\060\uffb5\061\uffb5" +
    "\062\uffb5\064\uffb5\065\uffb5\066\uffb5\067\uffb5\070\uffb5\071" +
    "\uffb5\100\uffb5\105\uffb5\111\uffb5\117\uffb5\001\002\000\122" +
    "\003\uffac\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac\015" +
    "\uffac\016\uffac\017\uffac\021\uffac\023\uffac\024\uffac\027\uffac" +
    "\030\uffac\031\uffac\032\uffac\034\uffac\045\uffac\046\uffac\047" +
    "\117\050\120\051\115\052\107\053\122\054\105\056\uffac" +
    "\057\uffac\060\uffac\061\uffac\062\uffac\064\uffac\065\uffac\066" +
    "\uffac\067\uffac\070\uffac\071\uffac\100\uffac\105\uffac\111\uffac" +
    "\117\uffac\001\002\000\122\003\uffad\006\uffad\007\uffad\010" +
    "\uffad\011\uffad\012\uffad\015\uffad\016\uffad\017\uffad\021\uffad" +
    "\023\uffad\024\uffad\027\uffad\030\uffad\031\uffad\032\uffad\034" +
    "\uffad\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad" +
    "\053\uffad\054\uffad\056\uffad\057\uffad\060\uffad\061\uffad\062" +
    "\uffad\064\uffad\065\uffad\066\uffad\067\uffad\070\uffad\071\uffad" +
    "\100\uffad\105\uffad\111\uffad\117\uffad\001\002\000\030\013" +
    "\070\014\075\055\067\063\100\065\101\105\077\106\072" +
    "\107\102\110\066\112\073\113\071\001\002\000\046\047" +
    "\117\050\120\051\115\052\107\053\122\054\105\056\104" +
    "\057\116\060\124\061\106\062\123\064\110\065\121\066" +
    "\113\067\114\070\112\071\111\111\152\001\002\000\036" +
    "\003\uffa2\016\uffa2\017\uffa2\021\uffa2\023\uffa2\024\uffa2\027" +
    "\uffa2\030\uffa2\031\uffa2\032\uffa2\034\uffa2\045\uffa2\105\uffa2" +
    "\117\uffa2\001\002\000\122\003\uffab\006\uffab\007\uffab\010" +
    "\uffab\011\uffab\012\uffab\015\uffab\016\uffab\017\uffab\021\uffab" +
    "\023\uffab\024\uffab\027\uffab\030\uffab\031\uffab\032\uffab\034" +
    "\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab" +
    "\053\uffab\054\uffab\056\uffab\057\uffab\060\uffab\061\uffab\062" +
    "\uffab\064\uffab\065\uffab\066\uffab\067\uffab\070\uffab\071\uffab" +
    "\100\uffab\105\uffab\111\uffab\117\uffab\001\002\000\046\047" +
    "\117\050\120\051\115\052\107\053\122\054\105\056\104" +
    "\057\116\060\124\061\106\062\123\064\110\065\121\066" +
    "\113\067\114\070\112\071\111\111\155\001\002\000\122" +
    "\003\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\015" +
    "\uffaf\016\uffaf\017\uffaf\021\uffaf\023\uffaf\024\uffaf\027\uffaf" +
    "\030\uffaf\031\uffaf\032\uffaf\034\uffaf\045\uffaf\046\uffaf\047" +
    "\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\056\uffaf" +
    "\057\uffaf\060\uffaf\061\uffaf\062\uffaf\064\uffaf\065\uffaf\066" +
    "\uffaf\067\uffaf\070\uffaf\071\uffaf\100\uffaf\105\uffaf\111\uffaf" +
    "\117\uffaf\001\002\000\004\105\157\001\002\000\062\003" +
    "\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\015\ufff9" +
    "\016\ufff9\017\ufff9\021\ufff9\023\ufff9\024\ufff9\027\ufff9\030" +
    "\ufff9\031\ufff9\032\ufff9\034\ufff9\045\ufff9\046\ufff9\100\ufff9" +
    "\105\ufff9\114\ufff9\116\ufff9\117\ufff9\001\002\000\042\003" +
    "\uffcf\016\uffcf\017\uffcf\021\uffcf\023\uffcf\024\uffcf\027\uffcf" +
    "\030\uffcf\031\uffcf\032\uffcf\034\uffcf\045\uffcf\100\162\105" +
    "\uffcf\114\163\117\uffcf\001\002\000\036\003\uffd7\016\uffd7" +
    "\017\uffd7\021\uffd7\023\uffd7\024\uffd7\027\uffd7\030\uffd7\031" +
    "\uffd7\032\uffd7\034\uffd7\045\uffd7\105\uffd7\117\uffd7\001\002" +
    "\000\004\105\165\001\002\000\030\013\070\014\075\055" +
    "\067\063\100\065\101\105\077\106\072\107\102\110\066" +
    "\112\073\113\071\001\002\000\116\003\uffce\006\uffce\007" +
    "\uffce\010\uffce\011\uffce\012\uffce\015\uffce\016\uffce\017\uffce" +
    "\021\uffce\023\uffce\024\uffce\027\uffce\030\uffce\031\uffce\032" +
    "\uffce\034\uffce\045\uffce\046\uffce\047\117\050\120\051\115" +
    "\052\107\053\122\054\105\056\104\057\116\060\124\061" +
    "\106\062\123\064\110\065\121\066\113\067\114\070\112" +
    "\071\111\105\uffce\117\uffce\001\002\000\062\003\ufffa\006" +
    "\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\015\ufffa\016\ufffa" +
    "\017\ufffa\021\ufffa\023\ufffa\024\ufffa\027\ufffa\030\ufffa\031" +
    "\ufffa\032\ufffa\034\ufffa\045\ufffa\046\ufffa\100\ufffa\105\ufffa" +
    "\114\ufffa\116\ufffa\117\ufffa\001\002\000\034\003\056\016" +
    "\063\017\054\021\043\023\167\024\173\027\060\030\061" +
    "\031\053\032\055\034\064\045\042\105\046\001\002\000" +
    "\036\003\uffd9\016\uffd9\017\uffd9\021\uffd9\023\uffd9\024\uffd9" +
    "\027\uffd9\030\uffd9\031\uffd9\032\uffd9\034\uffd9\045\uffd9\105" +
    "\uffd9\117\uffd9\001\002\000\036\003\056\016\063\017\054" +
    "\021\043\023\167\024\173\027\060\030\061\031\053\032" +
    "\055\034\064\045\042\105\046\117\175\001\002\000\036" +
    "\003\uffdb\016\uffdb\017\uffdb\021\uffdb\023\uffdb\024\uffdb\027" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\034\uffdb\045\uffdb\105\uffdb" +
    "\117\uffdb\001\002\000\036\003\uffda\016\uffda\017\uffda\021" +
    "\uffda\023\uffda\024\uffda\027\uffda\030\uffda\031\uffda\032\uffda" +
    "\034\uffda\045\uffda\105\uffda\117\uffda\001\002\000\036\003" +
    "\uffd8\016\uffd8\017\uffd8\021\uffd8\023\uffd8\024\uffd8\027\uffd8" +
    "\030\uffd8\031\uffd8\032\uffd8\034\uffd8\045\uffd8\105\uffd8\117" +
    "\uffd8\001\002\000\036\003\uffdc\016\uffdc\017\uffdc\021\uffdc" +
    "\023\uffdc\024\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\034" +
    "\uffdc\045\uffdc\105\uffdc\117\uffdc\001\002\000\004\027\176" +
    "\001\002\000\004\110\177\001\002\000\030\013\070\014" +
    "\075\055\067\063\100\065\101\105\077\106\072\107\102" +
    "\110\066\112\073\113\071\001\002\000\046\047\117\050" +
    "\120\051\115\052\107\053\122\054\105\056\104\057\116" +
    "\060\124\061\106\062\123\064\110\065\121\066\113\067" +
    "\114\070\112\071\111\111\201\001\002\000\036\003\uffa5" +
    "\016\uffa5\017\uffa5\021\uffa5\023\uffa5\024\uffa5\027\uffa5\030" +
    "\uffa5\031\uffa5\032\uffa5\034\uffa5\045\uffa5\105\uffa5\117\uffa5" +
    "\001\002\000\030\013\070\014\075\055\067\063\100\065" +
    "\101\105\077\106\072\107\102\110\066\112\073\113\071" +
    "\001\002\000\046\047\117\050\120\051\115\052\107\053" +
    "\122\054\105\056\104\057\116\060\124\061\106\062\123" +
    "\064\110\065\121\066\113\067\114\070\112\071\111\111" +
    "\204\001\002\000\004\116\205\001\002\000\034\003\056" +
    "\016\063\017\054\021\043\023\167\024\173\027\060\030" +
    "\061\031\053\032\055\034\064\045\042\105\046\001\002" +
    "\000\036\003\056\016\063\017\054\021\043\023\167\024" +
    "\173\027\060\030\061\031\053\032\055\034\064\045\042" +
    "\105\046\117\207\001\002\000\036\003\uffa4\016\uffa4\017" +
    "\uffa4\021\uffa4\023\uffa4\024\uffa4\027\uffa4\030\uffa4\031\uffa4" +
    "\032\uffa4\034\uffa4\045\uffa4\105\uffa4\117\uffa4\001\002\000" +
    "\004\033\211\001\002\000\004\100\212\001\002\000\030" +
    "\013\070\014\075\055\067\063\100\065\101\105\077\106" +
    "\072\107\102\110\066\112\073\113\071\001\002\000\046" +
    "\047\117\050\120\051\115\052\107\053\122\054\105\056" +
    "\104\057\116\060\124\061\106\062\123\064\110\065\121" +
    "\066\113\067\114\070\112\071\111\100\214\001\002\000" +
    "\030\013\070\014\075\055\067\063\100\065\101\105\077" +
    "\106\072\107\102\110\066\112\073\113\071\001\002\000" +
    "\046\047\117\050\120\051\115\052\107\053\122\054\105" +
    "\056\104\057\116\060\124\061\106\062\123\064\110\065" +
    "\121\066\113\067\114\070\112\071\111\100\216\001\002" +
    "\000\030\013\070\014\075\055\067\063\100\065\101\105" +
    "\077\106\072\107\102\110\066\112\073\113\071\001\002" +
    "\000\046\047\117\050\120\051\115\052\107\053\122\054" +
    "\105\056\104\057\116\060\124\061\106\062\123\064\110" +
    "\065\121\066\113\067\114\070\112\071\111\111\220\001" +
    "\002\000\036\003\uffa3\016\uffa3\017\uffa3\021\uffa3\023\uffa3" +
    "\024\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\034\uffa3\045" +
    "\uffa3\105\uffa3\117\uffa3\001\002\000\030\013\070\014\075" +
    "\055\067\063\100\065\101\105\077\106\072\107\102\110" +
    "\066\112\073\113\071\001\002\000\046\047\117\050\120" +
    "\051\115\052\107\053\122\054\105\056\104\057\116\060" +
    "\124\061\106\062\123\064\110\065\121\066\113\067\114" +
    "\070\112\071\111\111\223\001\002\000\004\116\224\001" +
    "\002\000\034\003\056\016\063\017\054\021\043\023\167" +
    "\024\173\027\060\030\061\031\053\032\055\034\064\045" +
    "\042\105\046\001\002\000\036\003\056\016\063\017\054" +
    "\021\043\023\167\024\173\027\060\030\061\031\053\032" +
    "\055\034\064\045\042\105\046\117\226\001\002\000\040" +
    "\003\uffaa\016\uffaa\017\uffaa\020\227\021\uffaa\023\uffaa\024" +
    "\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\034\uffaa\045\uffaa" +
    "\105\uffaa\117\uffaa\001\002\000\006\017\054\116\231\001" +
    "\002\000\036\003\uffa8\016\uffa8\017\uffa8\021\uffa8\023\uffa8" +
    "\024\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\034\uffa8\045" +
    "\uffa8\105\uffa8\117\uffa8\001\002\000\034\003\056\016\063" +
    "\017\054\021\043\023\167\024\173\027\060\030\061\031" +
    "\053\032\055\034\064\045\042\105\046\001\002\000\036" +
    "\003\056\016\063\017\054\021\043\023\167\024\173\027" +
    "\060\030\061\031\053\032\055\034\064\045\042\105\046" +
    "\117\233\001\002\000\036\003\uffa9\016\uffa9\017\uffa9\021" +
    "\uffa9\023\uffa9\024\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9" +
    "\034\uffa9\045\uffa9\105\uffa9\117\uffa9\001\002\000\100\003" +
    "\uffe5\016\uffe5\017\uffe5\021\uffe5\023\uffe5\024\uffe5\027\uffe5" +
    "\030\uffe5\031\uffe5\032\uffe5\034\uffe5\045\uffe5\047\117\050" +
    "\120\051\115\052\107\053\122\054\105\056\104\057\116" +
    "\060\124\061\106\062\123\064\110\065\121\066\113\067" +
    "\114\070\112\071\111\105\uffe5\117\uffe5\001\002\000\004" +
    "\114\240\001\002\000\030\013\070\014\075\055\067\063" +
    "\100\065\101\105\077\106\072\107\102\110\066\112\073" +
    "\113\071\001\002\000\100\003\uffa7\016\uffa7\017\uffa7\021" +
    "\uffa7\023\uffa7\024\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7" +
    "\034\uffa7\045\uffa7\047\117\050\120\051\115\052\107\053" +
    "\122\054\105\056\104\057\116\060\124\061\106\062\123" +
    "\064\110\065\121\066\113\067\114\070\112\071\111\105" +
    "\uffa7\117\uffa7\001\002\000\030\013\070\014\075\055\067" +
    "\063\100\065\101\105\077\106\072\107\102\110\066\112" +
    "\073\113\071\001\002\000\100\003\uffa6\016\uffa6\017\uffa6" +
    "\021\uffa6\023\uffa6\024\uffa6\027\uffa6\030\uffa6\031\uffa6\032" +
    "\uffa6\034\uffa6\045\uffa6\047\117\050\120\051\115\052\107" +
    "\053\122\054\105\056\104\057\116\060\124\061\106\062" +
    "\123\064\110\065\121\066\113\067\114\070\112\071\111" +
    "\105\uffa6\117\uffa6\001\002\000\004\105\243\001\002\000" +
    "\004\111\244\001\002\000\004\116\245\001\002\000\006" +
    "\022\252\025\246\001\002\000\004\116\264\001\002\000" +
    "\004\117\263\001\002\000\010\022\252\025\246\117\257" +
    "\001\002\000\010\022\uff9d\025\uff9d\117\uff9d\001\002\000" +
    "\016\013\070\014\075\106\072\107\102\112\073\113\071" +
    "\001\002\000\004\116\254\001\002\000\034\003\056\016" +
    "\063\017\054\021\043\023\167\024\173\027\060\030\061" +
    "\031\053\032\055\034\064\045\042\105\046\001\002\000" +
    "\036\003\056\016\063\017\054\021\043\023\167\024\173" +
    "\027\060\030\061\031\053\032\055\034\064\045\042\105" +
    "\046\117\256\001\002\000\010\022\uff9c\025\uff9c\117\uff9c" +
    "\001\002\000\036\003\uffa1\016\uffa1\017\uffa1\021\uffa1\023" +
    "\uffa1\024\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\034\uffa1" +
    "\045\uffa1\105\uffa1\117\uffa1\001\002\000\004\117\262\001" +
    "\002\000\010\022\uff9e\025\uff9e\117\uff9e\001\002\000\036" +
    "\003\uffa0\016\uffa0\017\uffa0\021\uffa0\023\uffa0\024\uffa0\027" +
    "\uffa0\030\uffa0\031\uffa0\032\uffa0\034\uffa0\045\uffa0\105\uffa0" +
    "\117\uffa0\001\002\000\036\003\uff9f\016\uff9f\017\uff9f\021" +
    "\uff9f\023\uff9f\024\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f" +
    "\034\uff9f\045\uff9f\105\uff9f\117\uff9f\001\002\000\034\003" +
    "\056\016\063\017\054\021\043\023\167\024\173\027\060" +
    "\030\061\031\053\032\055\034\064\045\042\105\046\001" +
    "\002\000\036\003\056\016\063\017\054\021\043\023\167" +
    "\024\173\027\060\030\061\031\053\032\055\034\064\045" +
    "\042\105\046\117\266\001\002\000\004\117\uff9b\001\002" +
    "\000\030\013\070\014\075\055\067\063\100\065\101\105" +
    "\077\106\072\107\102\110\066\112\073\113\071\001\002" +
    "\000\046\047\117\050\120\051\115\052\107\053\122\054" +
    "\105\056\104\057\116\060\124\061\106\062\123\064\110" +
    "\065\121\066\113\067\114\070\112\071\111\111\271\001" +
    "\002\000\036\003\uff9a\016\uff9a\017\uff9a\021\uff9a\023\uff9a" +
    "\024\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\034\uff9a\045" +
    "\uff9a\105\uff9a\117\uff9a\001\002\000\032\003\uffe9\016\uffe9" +
    "\017\uffe9\021\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\034" +
    "\uffe9\045\uffe9\105\uffe9\117\uffe9\001\002\000\026\006\uffef" +
    "\007\uffef\010\uffef\011\uffef\012\uffef\015\uffef\016\uffef\046" +
    "\uffef\105\uffef\117\uffef\001\002\000\014\006\020\007\017" +
    "\010\021\011\032\012\016\001\002\000\004\110\322\001" +
    "\002\000\004\105\305\001\002\000\004\110\300\001\002" +
    "\000\004\111\301\001\002\000\004\116\302\001\002\000" +
    "\030\003\056\016\063\017\054\021\043\027\060\030\061" +
    "\031\053\032\055\034\064\045\042\105\046\001\002\000" +
    "\032\003\056\016\063\017\054\021\043\027\060\030\061" +
    "\031\053\032\055\034\064\045\042\105\046\117\304\001" +
    "\002\000\026\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0" +
    "\015\ufff0\016\ufff0\046\ufff0\105\ufff0\117\ufff0\001\002\000" +
    "\004\110\306\001\002\000\016\006\020\007\017\010\021" +
    "\011\032\012\016\111\uffee\001\002\000\004\111\316\001" +
    "\002\000\006\100\uffeb\111\uffeb\001\002\000\004\105\315" +
    "\001\002\000\006\100\313\111\uffed\001\002\000\014\006" +
    "\020\007\017\010\021\011\032\012\016\001\002\000\006" +
    "\100\uffec\111\uffec\001\002\000\006\100\uffea\111\uffea\001" +
    "\002\000\004\116\317\001\002\000\030\003\056\016\063" +
    "\017\054\021\043\027\060\030\061\031\053\032\055\034" +
    "\064\045\042\105\046\001\002\000\032\003\056\016\063" +
    "\017\054\021\043\027\060\030\061\031\053\032\055\034" +
    "\064\045\042\105\046\117\321\001\002\000\026\006\ufff4" +
    "\007\ufff4\010\ufff4\011\ufff4\012\ufff4\015\ufff4\016\ufff4\046" +
    "\ufff4\105\ufff4\117\ufff4\001\002\000\016\006\020\007\017" +
    "\010\021\011\032\012\016\111\uffee\001\002\000\004\111" +
    "\324\001\002\000\004\116\325\001\002\000\030\003\056" +
    "\016\063\017\054\021\043\027\060\030\061\031\053\032" +
    "\055\034\064\045\042\105\046\001\002\000\032\003\056" +
    "\016\063\017\054\021\043\027\060\030\061\031\053\032" +
    "\055\034\064\045\042\105\046\117\327\001\002\000\026" +
    "\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\015\ufff1\016" +
    "\ufff1\046\ufff1\105\ufff1\117\ufff1\001\002\000\004\105\157" +
    "\001\002\000\032\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012" +
    "\uffcf\015\uffcf\016\uffcf\046\uffcf\100\162\105\uffcf\114\163" +
    "\117\uffcf\001\002\000\026\006\uffd6\007\uffd6\010\uffd6\011" +
    "\uffd6\012\uffd6\015\uffd6\016\uffd6\046\uffd6\105\uffd6\117\uffd6" +
    "\001\002\000\004\110\334\001\002\000\016\006\020\007" +
    "\017\010\021\011\032\012\016\111\uffee\001\002\000\004" +
    "\111\336\001\002\000\004\116\337\001\002\000\030\003" +
    "\056\016\063\017\054\021\043\027\060\030\061\031\053" +
    "\032\055\034\064\045\042\105\046\001\002\000\032\003" +
    "\056\016\063\017\054\021\043\027\060\030\061\031\053" +
    "\032\055\034\064\045\042\105\046\117\341\001\002\000" +
    "\026\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\015\ufff3" +
    "\016\ufff3\046\ufff3\105\ufff3\117\ufff3\001\002\000\016\006" +
    "\020\007\017\010\021\011\032\012\016\111\uffee\001\002" +
    "\000\004\111\344\001\002\000\004\116\345\001\002\000" +
    "\030\003\056\016\063\017\054\021\043\027\060\030\061" +
    "\031\053\032\055\034\064\045\042\105\046\001\002\000" +
    "\032\003\056\016\063\017\054\021\043\027\060\030\061" +
    "\031\053\032\055\034\064\045\042\105\046\117\347\001" +
    "\002\000\026\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2" +
    "\015\ufff2\016\ufff2\046\ufff2\105\ufff2\117\ufff2\001\002\000" +
    "\006\002\ufffd\004\ufffd\001\002\000\026\006\ufff8\007\ufff8" +
    "\010\ufff8\011\ufff8\012\ufff8\015\ufff8\016\ufff8\046\ufff8\105" +
    "\ufff8\117\ufff8\001\002\000\004\105\157\001\002\000\032" +
    "\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\015\uffcf\016" +
    "\uffcf\046\uffcf\100\162\105\uffcf\114\163\117\uffcf\001\002" +
    "\000\026\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\015" +
    "\uffd5\016\uffd5\046\uffd5\105\uffd5\117\uffd5\001\002\000\006" +
    "\100\162\116\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\353\000\010\002\006\020\005\021\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\013\001\001\000\004\041\354\001\001\000\002" +
    "\001\001\000\014\003\021\005\023\023\030\024\026\043" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\351\001\001\000\012\003\350\023\030\024\026\043\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\275\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\022\050\030\040\036\036\047\061\055\046" +
    "\056\051\057\047\060\037\061\043\064\056\065\044\001" +
    "\001\000\026\022\050\030\271\047\061\055\046\056\051" +
    "\057\047\060\037\061\043\064\056\065\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\234\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\025\233\040\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\155\001\001\000\002\001\001" +
    "\000\006\025\075\040\073\001\001\000\006\025\153\040" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\146" +
    "\001\001\000\006\025\145\040\073\001\001\000\006\025" +
    "\102\040\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\025\144\040\073\001\001\000\006\025\143\040" +
    "\073\001\001\000\006\025\142\040\073\001\001\000\006" +
    "\025\141\040\073\001\001\000\006\025\140\040\073\001" +
    "\001\000\006\025\137\040\073\001\001\000\006\025\136" +
    "\040\073\001\001\000\006\025\135\040\073\001\001\000" +
    "\006\025\134\040\073\001\001\000\006\025\133\040\073" +
    "\001\001\000\006\025\132\040\073\001\001\000\006\025" +
    "\131\040\073\001\001\000\006\025\130\040\073\001\001" +
    "\000\006\025\127\040\073\001\001\000\006\025\126\040" +
    "\073\001\001\000\006\025\125\040\073\001\001\000\006" +
    "\025\124\040\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\150\040\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\041\157\001\001\000" +
    "\002\001\001\000\004\026\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\163\040\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\022\050\030\171" +
    "\031\170\037\167\047\061\055\046\056\051\057\047\060" +
    "\037\061\043\064\056\065\044\001\001\000\002\001\001" +
    "\000\030\022\050\030\171\031\173\047\061\055\046\056" +
    "\051\057\047\060\037\061\043\064\056\065\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\025\177\040\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\025\202\040\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\022\050\030\171\031\170\037" +
    "\205\047\061\055\046\056\051\057\047\060\037\061\043" +
    "\064\056\065\044\001\001\000\030\022\050\030\171\031" +
    "\173\047\061\055\046\056\051\057\047\060\037\061\043" +
    "\064\056\065\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\025\212\040\073\001\001" +
    "\000\002\001\001\000\006\025\214\040\073\001\001\000" +
    "\002\001\001\000\006\025\216\040\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\025\221\040\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\022\050" +
    "\030\171\031\170\037\224\047\061\055\046\056\051\057" +
    "\047\060\037\061\043\064\056\065\044\001\001\000\030" +
    "\022\050\030\171\031\173\047\061\055\046\056\051\057" +
    "\047\060\037\061\043\064\056\065\044\001\001\000\002" +
    "\001\001\000\004\047\227\001\001\000\002\001\001\000" +
    "\032\022\050\030\171\031\170\037\231\047\061\055\046" +
    "\056\051\057\047\060\037\061\043\064\056\065\044\001" +
    "\001\000\030\022\050\030\171\031\173\047\061\055\046" +
    "\056\051\057\047\060\037\061\043\064\056\065\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\025\236\040\073\001\001\000\002\001\001\000" +
    "\006\025\240\040\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\035" +
    "\246\045\247\046\250\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\035\257\046\260\001\001\000\002\001" +
    "\001\000\004\040\252\001\001\000\002\001\001\000\032" +
    "\022\050\030\171\031\170\037\254\047\061\055\046\056" +
    "\051\057\047\060\037\061\043\064\056\065\044\001\001" +
    "\000\030\022\050\030\171\031\173\047\061\055\046\056" +
    "\051\057\047\060\037\061\043\064\056\065\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\022\050\030\171\031\170\037\264\047\061\055\046\056" +
    "\051\057\047\060\037\061\043\064\056\065\044\001\001" +
    "\000\030\022\050\030\171\031\173\047\061\055\046\056" +
    "\051\057\047\060\037\061\043\064\056\065\044\001\001" +
    "\000\002\001\001\000\006\025\267\040\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\327\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\022\050\030\040\036\302\047\061\055" +
    "\046\056\051\057\047\060\037\061\043\064\056\065\044" +
    "\001\001\000\026\022\050\030\271\047\061\055\046\056" +
    "\051\057\047\060\037\061\043\064\056\065\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\043\310\052" +
    "\307\053\311\054\306\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\043" +
    "\310\052\313\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\022\050\030\040\036\317\047" +
    "\061\055\046\056\051\057\047\060\037\061\043\064\056" +
    "\065\044\001\001\000\026\022\050\030\271\047\061\055" +
    "\046\056\051\057\047\060\037\061\043\064\056\065\044" +
    "\001\001\000\002\001\001\000\012\043\310\052\307\053" +
    "\311\054\322\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\022\050\030\040\036\325\047\061\055\046\056" +
    "\051\057\047\060\037\061\043\064\056\065\044\001\001" +
    "\000\026\022\050\030\271\047\061\055\046\056\051\057" +
    "\047\060\037\061\043\064\056\065\044\001\001\000\002" +
    "\001\001\000\004\041\330\001\001\000\004\026\331\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\043\310" +
    "\052\307\053\311\054\334\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\022\050\030\040\036\337\047\061" +
    "\055\046\056\051\057\047\060\037\061\043\064\056\065" +
    "\044\001\001\000\026\022\050\030\271\047\061\055\046" +
    "\056\051\057\047\060\037\061\043\064\056\065\044\001" +
    "\001\000\002\001\001\000\012\043\310\052\307\053\311" +
    "\054\342\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\022\050\030\040\036\345\047\061\055\046\056\051" +
    "\057\047\060\037\061\043\064\056\065\044\001\001\000" +
    "\026\022\050\030\271\047\061\055\046\056\051\057\047" +
    "\060\037\061\043\064\056\065\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\352" +
    "\001\001\000\004\026\353\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public Expresion sumando;

    public List<Expresion> lista_expresiones;
    public List<Errores> errores = new LinkedList<Errores>();
    public Programa programa = new Programa();
    public List<Metodo> lista_metodos = new LinkedList<>();
    public List<Declaracion> lista_declaraciones = new LinkedList<>();

    public void syntax_error(Symbol cur_token) {
        System.out.println(" Se esperaban: ");
        String esperados = "";
        for (int i = 0; i < expected_token_ids().size(); i++){
            esperados += symbl_name_from_id(expected_token_ids().get(i))+"-";
        }
        System.out.print(esperados+", pero se encontro "+cur_token.value+" en la linea"+cur_token.right+" y en la columna"+cur_token.left);
        errores.add(new Errores(cur_token.right,cur_token.left,"SINTACTICO","Se esperaba "+esperados+" y se encontro "+symbl_name_from_id(cur_token.sym)));
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal "+message+info);
    }
    
    public void report_fatal_error(Symbol cur) {
        System.out.println("unrecovered_syntax_error");
    }

    public void imp(String texto){
        System.out.println(texto);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= pistas 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Pista> e1 = (List<Pista>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            programa = new Programa(e1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // pistas ::= pistas pista 
            {
              List<Pista> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Pista> e1 = (List<Pista>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pista e2 = (Pista)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
            RESULT.add(e2);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pistas",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // pistas ::= pista 
            {
              List<Pista> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pista e1 = (Pista)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new LinkedList<>();
            RESULT.add(e1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pistas",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // pista ::= PISTA ID extiende INDENT lista_declaracion DEDENT 
            {
              Pista RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<String> e3 = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            RESULT = new Pista(lista_metodos,lista_declaraciones,e3,e2.toString());
            lista_metodos = new LinkedList<>();
            lista_declaraciones = new LinkedList<>();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pista",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // extiende ::= 
            {
              List<String> RESULT =null;
		
            RESULT = null;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extiende",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // extiende ::= EXT ids 
            {
              List<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<String> e1 = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extiende",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ids ::= ids COMA ID 
            {
              List<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<String> e1 = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            e1.add(e2.toString()); 
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ids ::= ID 
            {
              List<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new LinkedList<>();
            RESULT.add(e1.toString()); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lista_declaracion ::= lista_declaracion declaraciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lista_declaracion ::= declaraciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaraciones ::= declaracion_global 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaracion e1 = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            lista_declaraciones.add(e1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaraciones ::= metodo 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Metodo e1 = (Metodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            lista_metodos.add(e1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // metodo ::= KEEP tipo ID PAR_A param PAR_C INDENT instrucciones DEDENT 
            {
              Metodo RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Parametro> e3 = (List<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e4 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Metodo(e1.toString(),e2,e3,e4,true,true,false);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // metodo ::= tipo ID PAR_A param PAR_C INDENT instrucciones DEDENT 
            {
              Metodo RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Parametro> e3 = (List<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e4 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Metodo(e1.toString(),e2,e3,e4,true,false,false);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // metodo ::= ID PAR_A param PAR_C INDENT instrucciones DEDENT 
            {
              Metodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Parametro> e2 = (List<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e3 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Metodo(e1.toString(),"void",e2,e3,false,false,false);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // metodo ::= KEEP ID PAR_A param PAR_C INDENT instrucciones DEDENT 
            {
              Metodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Parametro> e2 = (List<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e3 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Metodo(e1.toString(),"void",e2,e3,false,true,false);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // metodo ::= KEEP PRINCIPAL PAR_A PAR_C INDENT instrucciones DEDENT 
            {
              Metodo RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e4 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Metodo("Principal","void",null,e4,false,true,true);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // metodo ::= PRINCIPAL PAR_A PAR_C INDENT instrucciones DEDENT 
            {
              Metodo RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e4 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Metodo("Principal","void",null,e4,false,false,true);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // param ::= 
            {
              List<Parametro> RESULT =null;
		
            RESULT = new LinkedList<>();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // param ::= parametros 
            {
              List<Parametro> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Parametro> e1 = (List<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parametros ::= parametros COMA parametro 
            {
              List<Parametro> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Parametro> e1 = (List<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parametro e2 = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
            RESULT.add(e2);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parametros ::= parametro 
            {
              List<Parametro> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parametro e1 = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new LinkedList<>();
            RESULT.add(e1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parametro ::= tipo ID 
            {
              Parametro RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Parametro(e1.toString(),e2.toString());
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instrucciones ::= instrucciones instruccion 
            {
              List<Instruccion> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e1 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
            RESULT.add(e2);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instrucciones ::= instruccion 
            {
              List<Instruccion> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new LinkedList<>();
            RESULT.add(e1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= declaracion 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaracion e1 = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion ::= asignacion 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Asignacion e1 = (Asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion ::= RETORNA expresion 
            {
              Instruccion RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Retorno(e1,e2right,e2left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccion ::= si 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Si e1 = (Si)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruccion ::= hacer 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Hacer e1 = (Hacer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruccion ::= mientras 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Mientras e1 = (Mientras)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instruccion ::= reproducir 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Reproducir e1 = (Reproducir)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instruccion ::= esperar 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Esperar e1 = (Esperar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instruccion ::= switch 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Switch e1 = (Switch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruccion ::= mensaje 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Mensaje e1 = (Mensaje)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccion ::= error 
            {
              Instruccion RESULT =null;
		
            RESULT = null;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // inst ::= inst instruc 
            {
              List<Instruccion> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e1 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = e1;
        RESULT.add(e2);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // inst ::= instruc 
            {
              List<Instruccion> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new LinkedList<>();
        RESULT.add(e1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruc ::= instruccion 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = e1;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruc",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruc ::= SALIR 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new ContinuarSalir(false,"salir",e1right,e1left);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruc",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruc ::= CONT 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new ContinuarSalir(true,"continuar",e1right,e1left);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruc",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaracion ::= VAR tipo ids asignar 
            {
              Declaracion RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<String> e2 = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e3 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            List<Expresion> nueva = new LinkedList<Expresion>();
            nueva.add(e3);
            RESULT = new Declaracion(e2,e1, null,nueva, false, e4right, e4left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaracion_global ::= KEEP VAR tipo ids asignar 
            {
              Declaracion RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<String> e2 = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e3 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if (e3!=null){
                List<Expresion> nueva = new LinkedList<Expresion>();
                nueva.add(e3);
                RESULT = new Declaracion(e2,e1, null,nueva, true, e4right, e4left);
            } else {
                RESULT = new Declaracion(e2,e1, null,null, true, e4right, e4left);
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_global",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaracion_global ::= VAR tipo ids asignar 
            {
              Declaracion RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<String> e2 = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e3 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if (e3!=null){
                List<Expresion> nueva = new LinkedList<Expresion>();
                nueva.add(e3);
                RESULT = new Declaracion(e2,e1, null,nueva, false, e4right, e4left);
            } else {
                RESULT = new Declaracion(e2,e1, null,null, false, e4right, e4left);
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_global",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // arreglo ::= COR_A items COR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // items ::= items COMA item 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // items ::= item 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // item ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("item",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // item ::= arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("item",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // asignar ::= 
            {
              Expresion RESULT =null;
		
            RESULT = null;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // asignar ::= ASIGNAR expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = e1; 
            sumando = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipo ::= ENTERO 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = "numero";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipo ::= DECIMAL 
            {
              String RESULT =null;
		
            RESULT = "decimal";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipo ::= CADENA 
            {
              String RESULT =null;
		
            RESULT = "string";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tipo ::= BOOLEAN 
            {
              String RESULT =null;
		
            RESULT = "boolean";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tipo ::= CHAR 
            {
              String RESULT =null;
		
            RESULT = "caracter";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // valor_puntual ::= NUMERO 
            {
              Primitivo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Primitivo("numero",(java_cup.runtime.Symbol) CUP$parser$stack.peek(),Integer.parseInt(e1.toString())); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_puntual",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // valor_puntual ::= STRING 
            {
              Primitivo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Primitivo("string",(java_cup.runtime.Symbol) CUP$parser$stack.peek(),e1.toString()); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_puntual",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // valor_puntual ::= CARACTER 
            {
              Primitivo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Primitivo("caracter",(java_cup.runtime.Symbol) CUP$parser$stack.peek(),e1.toString().charAt(0)); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_puntual",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // valor_puntual ::= TRUE 
            {
              Primitivo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Primitivo("boolean",(java_cup.runtime.Symbol) CUP$parser$stack.peek(),true);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_puntual",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // valor_puntual ::= FALSE 
            {
              Primitivo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Primitivo("boolean",(java_cup.runtime.Symbol) CUP$parser$stack.peek(),false);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_puntual",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // valor_puntual ::= NUMERO_D 
            {
              Primitivo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Primitivo("decimal",(java_cup.runtime.Symbol) CUP$parser$stack.peek(),Double.parseDouble(e1.toString())); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_puntual",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= expresion SUMA expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.SUMA);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= expresion RESTA expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            imp("Encuentra menos"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.RESTA);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= expresion POR expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra por");
            RESULT = new Expresion(e1,e2,Expresion.Operacion.POR);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= expresion ENTRE expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra division"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.ENTRE);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= expresion POT expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra potencia"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.POT);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= expresion MOD expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra modulo"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.MOD);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= RESTA expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra negativo"); 
            RESULT = new Expresion(e1,Expresion.Operacion.NEGATIVO);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= expresion MAYOR expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra mayor"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.MAYOR);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= expresion MENOR expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra menor"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.MENOR);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion ::= expresion MENOR_I expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra menor igual"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.MENOR_I);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= expresion MAYOR_I expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra mayor igual"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.MAYOR_I);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= expresion IGUAL expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra igual"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.IGUAL);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= expresion DIFF expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra diferente"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.DIFF);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= expresion AND expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra and"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.AND);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= expresion OR expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra or"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.OR);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= expresion XOR expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra xor"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.XOR);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= expresion NAND expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra nand"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.NAND);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= expresion NOR expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra nor"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.NOR);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= valor_puntual 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Primitivo e1 = (Primitivo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra valor"); 
            RESULT = new Expresion(e1,Expresion.Operacion.PRIMITIVO);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= PAR_A expresion PAR_C 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            imp("Encuentra parentesis"); 
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= ID 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra arreglo"); 
            RESULT = new Expresion(new Identificador(e1.toString(),null,false,e1left,e1right),Expresion.Operacion.IDENTIFICADOR);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= ID dimensiones 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Expresion> e2 = (List<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra arreglo"); 
            RESULT = new Expresion(new Identificador(e1.toString(),e2,true,e1left,e1right),Expresion.Operacion.IDENTIFICADOR);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= NOT expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra not"); 
            RESULT = new Expresion(e1,Expresion.Operacion.NOT);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion ::= NULO ID 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            imp("Encuentra arreglo"); 
            RESULT = new Expresion(new Identificador(e1.toString(),null,false,e1left,e1right),Expresion.Operacion.NULO);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // si ::= SI PAR_A expresion PAR_C INDENT inst DEDENT 
            {
              Si RESULT =null;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e2 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Si(e1, e2, null, null, e5right, e5left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // si ::= SI PAR_A expresion PAR_C INDENT inst DEDENT SINO INDENT inst DEDENT 
            {
              Si RESULT =null;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<Instruccion> e2 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e3 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Si(e1, e2, e3, null, e5right, e5left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // si ::= SI PAR_A expresion PAR_C INDENT inst DEDENT SINO si 
            {
              Si RESULT =null;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Instruccion> e2 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Si e3 = (Si)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Si(e1, e2, null, e3, e5right, e5left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // asignacion ::= ID ASIGNAR expresion 
            {
              Asignacion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            List<Expresion> exp = new LinkedList<>();
            exp.add(e2);
            RESULT = new Asignacion(e1.toString(),exp,null,e1right,e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // asignacion ::= ID dimensiones ASIGNAR expresion 
            {
              Asignacion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Expresion> e3 = (List<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            List<Expresion> exp = new LinkedList<>();
            exp.add(e2);
            RESULT = new Asignacion(e1.toString(),exp,e3,e1right,e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // hacer ::= HACER INDENT inst DEDENT MIENTRAS PAR_A expresion PAR_C 
            {
              Hacer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<Instruccion> e3 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Hacer(e2, e3, e1right, e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("hacer",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // mientras ::= MIENTRAS PAR_A expresion PAR_C INDENT inst DEDENT 
            {
              Mientras RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e3 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Mientras(e2, e3, e1right, e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mientras",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // reproducir ::= REPRODUCIR PAR_A NOTAS COMA expresion COMA expresion COMA expresion PAR_C 
            {
              Reproducir RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object e0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion e3 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e4 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Reproducir(e1.toString(),e2,e3,e4,e0right,e0left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reproducir",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // esperar ::= ESPERAR PAR_A expresion COMA expresion PAR_C 
            {
              Esperar RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Esperar(e1,e2,e1right,e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("esperar",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // switch ::= SWITCH PAR_A ID PAR_C INDENT casos DEDENT 
            {
              Switch RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Caso> e3 = (List<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Switch(e2.toString(), e3, null, e1right, e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // switch ::= SWITCH PAR_A ID PAR_C INDENT casos default DEDENT 
            {
              Switch RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Caso> e4 = (List<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e3 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Switch(e2.toString(), e4, e3, e1right, e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // switch ::= SWITCH PAR_A ID PAR_C INDENT default DEDENT 
            {
              Switch RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e3 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Switch(e2.toString(), null, e3, e1right, e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // casos ::= casos caso 
            {
              List<Caso> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Caso> e1 = (List<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caso e2 = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e1;
            RESULT.add(e2);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // casos ::= caso 
            {
              List<Caso> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caso e1 = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new LinkedList<>();
            RESULT.add(e1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // caso ::= CASO valor_puntual INDENT inst DEDENT 
            {
              Caso RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Primitivo e3 = (Primitivo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e2 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Caso(e3, e2, e1right, e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // default ::= DEFAULT INDENT inst DEDENT 
            {
              List<Instruccion> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruccion> e1 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = e1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("default",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // mensaje ::= MSG PAR_A expresion PAR_C 
            {
              Mensaje RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Mensaje(e1,e1right,e1left);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
