// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/Analizador/Lexer.flex
package Analizador;

import java_cup.runtime.Symbol;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements java_cup.runtime.Scanner {

    /**
     * This character denotes the end of file.
     */
    public static final int YYEOF = -1;

    /**
     * Initial size of the lookahead buffer.
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    // Lexical states.
    public static final int YYINITIAL = 0;
    public static final int STRING = 2;
    public static final int CHAR = 4;
    public static final int COMMENT_L = 6;
    public static final int COMMENT_L2 = 8;
    public static final int COMMENT_M = 10;
    public static final int SALTO = 12;
    public static final int ESPECIAL = 14;
    public static final int SALIDA_MULTI = 16;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l at the
     * beginning of a line l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
        0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
        8, 8
    };

    /**
     * Top-level table for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();

    private static final String ZZ_CMAP_TOP_PACKED_0
            = "\1\0\u10ff\u0100";

    private static int[] zzUnpackcmap_top() {
        int[] result = new int[4352];
        int offset = 0;
        offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_top(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * Second-level tables for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

    private static final String ZZ_CMAP_BLOCKS_PACKED_0
            = "\11\0\1\1\1\2\2\0\1\3\22\0\1\4\1\5"
            + "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"
            + "\1\16\1\17\1\20\1\21\1\22\1\23\12\24\1\25"
            + "\1\26\1\27\1\30\1\31\1\32\1\0\1\33\1\34"
            + "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"
            + "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"
            + "\1\55\1\56\1\57\1\60\1\61\1\62\1\53\1\63"
            + "\1\64\1\65\1\66\1\67\1\53\1\32\1\70\1\71"
            + "\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101"
            + "\1\102\1\103\1\104\1\105\1\106\1\107\1\53\1\110"
            + "\1\111\1\112\1\113\1\114\1\115\1\116\1\53\1\117"
            + "\1\120\1\121\1\122\101\0\1\123\2\0\1\124\u013d\0";

    private static int[] zzUnpackcmap_blocks() {
        int[] result = new int[512];
        int offset = 0;
        offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_blocks(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0
            = "\6\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6"
            + "\1\7\1\10\1\11\1\2\1\12\1\13\1\14\1\15"
            + "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"
            + "\1\26\1\27\21\10\1\30\1\31\1\32\21\10\1\33"
            + "\1\2\1\34\1\35\1\36\1\37\1\40\1\41\1\40"
            + "\1\42\1\40\1\43\1\42\3\43\1\44\1\45\1\1"
            + "\2\45\2\2\3\46\1\47\1\50\1\51\1\52\1\53"
            + "\1\54\1\55\3\56\1\57\1\0\1\60\1\0\1\61"
            + "\1\62\1\63\1\64\1\65\1\0\1\66\1\67\1\70"
            + "\1\71\1\72\13\10\1\73\1\10\1\73\6\10\2\73"
            + "\6\10\1\73\3\10\1\73\1\10\1\73\10\10\2\73"
            + "\1\10\1\74\4\10\1\74\11\10\1\75\1\76\1\77"
            + "\1\100\1\101\1\102\1\103\1\104\2\0\1\105\1\106"
            + "\1\107\1\110\1\111\20\10\1\73\56\10\1\112\12\10"
            + "\1\113\26\10\1\114\10\10\1\115\13\10\1\116\5\10"
            + "\1\117\20\10\1\120\10\10\1\121\1\122\12\10\1\123"
            + "\1\124\6\10\1\125\14\10\1\126\10\10\1\127\25\10"
            + "\1\130\3\10\1\131\2\10\1\132\4\10\1\133\2\10"
            + "\1\134\2\10\1\135\2\10\1\136\2\10\1\137\3\10"
            + "\1\140\7\10\1\141\4\10\1\142\1\143\1\144\12\10"
            + "\1\145\2\10\1\146\2\10\1\147\1\150\2\10\1\151"
            + "\1\152";

    private static int[] zzUnpackAction() {
        int[] result = new int[476];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0
            = "\0\0\0\125\0\252\0\377\0\u0154\0\u01a9\0\u01fe\0\u0253"
            + "\0\u02a8\0\u02fd\0\u0352\0\u03a7\0\u03fc\0\u0451\0\u02fd\0\u04a6"
            + "\0\u02fd\0\u04fb\0\u02fd\0\u02fd\0\u02fd\0\u02fd\0\u0550\0\u02fd"
            + "\0\u05a5\0\u02fd\0\u05fa\0\u02fd\0\u02fd\0\u064f\0\u06a4\0\u06f9"
            + "\0\u074e\0\u07a3\0\u07f8\0\u084d\0\u08a2\0\u08f7\0\u094c\0\u09a1"
            + "\0\u09f6\0\u0a4b\0\u0aa0\0\u0af5\0\u0b4a\0\u0b9f\0\u0bf4\0\u0c49"
            + "\0\u0c9e\0\u02fd\0\u02fd\0\u02fd\0\u0cf3\0\u0d48\0\u0d9d\0\u0df2"
            + "\0\u0e47\0\u0e9c\0\u0ef1\0\u0f46\0\u0f9b\0\u0ff0\0\u1045\0\u109a"
            + "\0\u10ef\0\u1144\0\u1199\0\u11ee\0\u1243\0\u02fd\0\u1298\0\u02fd"
            + "\0\u12ed\0\u02fd\0\u02fd\0\u1342\0\u1342\0\u1397\0\u02fd\0\u13ec"
            + "\0\u02fd\0\u1441\0\u03a7\0\u03fc\0\u1496\0\u02fd\0\u02fd\0\u14eb"
            + "\0\u03a7\0\u03fc\0\u1540\0\u1595\0\u02fd\0\u03a7\0\u03fc\0\u15ea"
            + "\0\u02fd\0\u02fd\0\u02fd\0\u02fd\0\u02fd\0\u02fd\0\u02fd\0\u03a7"
            + "\0\u03fc\0\u02fd\0\u163f\0\u02fd\0\u1694\0\u02fd\0\u02fd\0\u02fd"
            + "\0\u02fd\0\u02fd\0\u16e9\0\u02fd\0\u02fd\0\u02fd\0\u02fd\0\u02fd"
            + "\0\u173e\0\u1793\0\u17e8\0\u183d\0\u1892\0\u18e7\0\u193c\0\u1991"
            + "\0\u19e6\0\u1a3b\0\u1a90\0\u1ae5\0\u1b3a\0\u1b8f\0\u1be4\0\u1c39"
            + "\0\u1c8e\0\u1ce3\0\u1d38\0\u1d8d\0\u1de2\0\u1e37\0\u1e8c\0\u1ee1"
            + "\0\u1f36\0\u1f8b\0\u1fe0\0\u2035\0\u208a\0\u20df\0\u2134\0\u2189"
            + "\0\u21de\0\u2233\0\u2288\0\u22dd\0\u2332\0\u2387\0\u23dc\0\u2431"
            + "\0\u2486\0\u24db\0\u2530\0\u2585\0\u25da\0\u262f\0\u2684\0\u26d9"
            + "\0\u272e\0\u2783\0\u27d8\0\u282d\0\u2882\0\u28d7\0\u292c\0\u2981"
            + "\0\u29d6\0\u2a2b\0\u2a80\0\u2ad5\0\u208a\0\u02fd\0\u1342\0\u1342"
            + "\0\u02fd\0\u1342\0\u1342\0\u1342\0\u1342\0\u1540\0\u1595\0\u02fd"
            + "\0\u02fd\0\u02fd\0\u02fd\0\u16e9\0\u2b2a\0\u2b7f\0\u2bd4\0\u2c29"
            + "\0\u2c7e\0\u2cd3\0\u2d28\0\u2d7d\0\u2dd2\0\u2e27\0\u2e7c\0\u2ed1"
            + "\0\u2f26\0\u2f7b\0\u2fd0\0\u3025\0\u02fd\0\u307a\0\u30cf\0\u3124"
            + "\0\u3179\0\u31ce\0\u3223\0\u3278\0\u32cd\0\u3322\0\u3377\0\u33cc"
            + "\0\u3421\0\u3476\0\u34cb\0\u3520\0\u3575\0\u35ca\0\u361f\0\u3674"
            + "\0\u36c9\0\u371e\0\u3773\0\u37c8\0\u381d\0\u3872\0\u38c7\0\u391c"
            + "\0\u3971\0\u39c6\0\u3a1b\0\u3a70\0\u3ac5\0\u3b1a\0\u3b6f\0\u3bc4"
            + "\0\u3c19\0\u3c6e\0\u3cc3\0\u3d18\0\u3d6d\0\u3dc2\0\u3e17\0\u3e6c"
            + "\0\u3ec1\0\u3f16\0\u3f6b\0\u04a6\0\u3fc0\0\u4015\0\u406a\0\u40bf"
            + "\0\u4114\0\u4169\0\u41be\0\u4213\0\u4268\0\u42bd\0\u04a6\0\u4312"
            + "\0\u4367\0\u43bc\0\u4411\0\u4466\0\u44bb\0\u4510\0\u4565\0\u45ba"
            + "\0\u460f\0\u4664\0\u46b9\0\u470e\0\u4763\0\u47b8\0\u480d\0\u4862"
            + "\0\u48b7\0\u490c\0\u4961\0\u49b6\0\u4a0b\0\u04a6\0\u4a60\0\u4ab5"
            + "\0\u4b0a\0\u4b5f\0\u4bb4\0\u4c09\0\u4c5e\0\u4cb3\0\u04a6\0\u4d08"
            + "\0\u4d5d\0\u4db2\0\u4e07\0\u4e5c\0\u4eb1\0\u4f06\0\u4f5b\0\u4fb0"
            + "\0\u5005\0\u505a\0\u04a6\0\u50af\0\u5104\0\u5159\0\u51ae\0\u5203"
            + "\0\u04a6\0\u5258\0\u52ad\0\u5302\0\u5357\0\u53ac\0\u5401\0\u5456"
            + "\0\u54ab\0\u5500\0\u5555\0\u55aa\0\u55ff\0\u5654\0\u56a9\0\u56fe"
            + "\0\u5753\0\u04a6\0\u57a8\0\u57fd\0\u5852\0\u58a7\0\u58fc\0\u5951"
            + "\0\u59a6\0\u59fb\0\u04a6\0\u04a6\0\u5a50\0\u5aa5\0\u5afa\0\u5b4f"
            + "\0\u5ba4\0\u5bf9\0\u5c4e\0\u5ca3\0\u5cf8\0\u5d4d\0\u04a6\0\u04a6"
            + "\0\u5da2\0\u5df7\0\u5e4c\0\u5ea1\0\u5ef6\0\u5f4b\0\u04a6\0\u5fa0"
            + "\0\u5ff5\0\u604a\0\u609f\0\u60f4\0\u6149\0\u619e\0\u61f3\0\u6248"
            + "\0\u629d\0\u62f2\0\u6347\0\u04a6\0\u639c\0\u63f1\0\u6446\0\u649b"
            + "\0\u64f0\0\u6545\0\u659a\0\u65ef\0\u04a6\0\u6644\0\u6699\0\u66ee"
            + "\0\u6743\0\u6798\0\u67ed\0\u6842\0\u6897\0\u68ec\0\u6941\0\u6996"
            + "\0\u69eb\0\u6a40\0\u6a95\0\u6aea\0\u6b3f\0\u6b94\0\u6be9\0\u6c3e"
            + "\0\u6c93\0\u6ce8\0\u04a6\0\u6d3d\0\u6d92\0\u6de7\0\u04a6\0\u6e3c"
            + "\0\u6e91\0\u04a6\0\u6ee6\0\u6f3b\0\u6f90\0\u6fe5\0\u04a6\0\u703a"
            + "\0\u708f\0\u04a6\0\u70e4\0\u7139\0\u04a6\0\u718e\0\u71e3\0\u04a6"
            + "\0\u7238\0\u728d\0\u04a6\0\u72e2\0\u7337\0\u738c\0\u04a6\0\u73e1"
            + "\0\u7436\0\u748b\0\u74e0\0\u7535\0\u758a\0\u75df\0\u04a6\0\u7634"
            + "\0\u7689\0\u76de\0\u7733\0\u04a6\0\u04a6\0\u04a6\0\u7788\0\u77dd"
            + "\0\u7832\0\u7887\0\u78dc\0\u7931\0\u7986\0\u79db\0\u7a30\0\u7a85"
            + "\0\u04a6\0\u7ada\0\u7b2f\0\u04a6\0\u7b84\0\u7bd9\0\u04a6\0\u04a6"
            + "\0\u7c2e\0\u7c83\0\u04a6\0\u04a6";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[476];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0
            = "\2\12\1\13\1\14\1\15\1\16\1\17\1\12\1\20"
            + "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"
            + "\1\31\1\12\1\32\1\33\1\34\1\35\1\36\1\37"
            + "\1\40\1\12\1\41\1\42\1\43\1\44\1\45\1\46"
            + "\1\20\1\47\1\50\1\20\1\51\1\52\1\53\1\20"
            + "\1\54\1\55\1\20\1\56\1\57\1\60\1\20\1\61"
            + "\3\20\1\62\1\12\1\63\1\64\1\65\1\66\1\67"
            + "\1\70\1\71\1\72\1\20\1\73\1\74\1\20\1\75"
            + "\1\76\1\77\1\20\1\100\1\101\1\102\1\103\1\104"
            + "\1\20\1\105\3\20\1\106\1\107\1\110\2\12\6\111"
            + "\1\112\1\113\115\111\5\114\1\115\1\114\1\116\1\114"
            + "\2\115\1\117\2\115\4\114\1\115\1\114\1\115\5\114"
            + "\66\115\4\114\1\120\2\121\1\122\1\123\1\124\122\121"
            + "\1\13\1\123\1\124\120\121\21\125\1\126\103\125\1\127"
            + "\1\130\1\127\1\131\1\132\14\127\1\12\5\127\1\133"
            + "\1\127\1\134\73\127\3\135\1\136\1\137\1\135\1\140"
            + "\1\141\3\135\1\142\51\135\1\143\17\135\1\144\2\135"
            + "\1\145\1\135\1\146\12\135\3\147\1\150\1\151\24\147"
            + "\1\117\73\147\127\0\1\13\125\0\1\14\125\0\1\15"
            + "\125\0\1\152\4\0\1\153\15\0\1\154\70\0\1\155"
            + "\13\0\1\20\13\0\1\20\6\0\31\20\4\0\30\20"
            + "\17\0\1\156\106\0\1\157\22\0\1\160\10\0\1\161"
            + "\115\0\1\162\125\0\1\163\1\0\1\33\121\0\1\164"
            + "\6\0\1\165\124\0\1\166\124\0\1\167\1\170\103\0"
            + "\1\20\13\0\1\20\6\0\21\20\1\171\1\172\6\20"
            + "\4\0\20\20\1\173\1\174\6\20\15\0\1\20\13\0"
            + "\1\20\6\0\16\20\1\175\12\20\4\0\16\20\1\176"
            + "\11\20\15\0\1\20\13\0\1\20\6\0\1\177\15\20"
            + "\1\200\12\20\4\0\1\201\15\20\1\202\11\20\15\0"
            + "\1\20\13\0\1\20\6\0\4\20\1\203\11\20\1\204"
            + "\12\20\4\0\4\20\1\205\11\20\1\206\11\20\15\0"
            + "\1\20\13\0\1\20\6\0\15\20\1\207\4\20\1\210"
            + "\4\20\1\211\1\20\4\0\15\20\1\212\3\20\1\213"
            + "\4\20\1\214\1\20\15\0\1\20\13\0\1\20\6\0"
            + "\1\215\30\20\4\0\1\216\27\20\15\0\1\20\13\0"
            + "\1\20\6\0\1\217\30\20\4\0\1\220\27\20\15\0"
            + "\1\20\13\0\1\20\6\0\14\20\1\221\14\20\4\0"
            + "\14\20\1\222\13\20\15\0\1\20\13\0\1\20\6\0"
            + "\4\20\1\223\24\20\4\0\4\20\1\224\23\20\15\0"
            + "\1\20\13\0\1\20\6\0\1\225\15\20\1\226\12\20"
            + "\4\0\1\225\15\20\1\227\11\20\15\0\1\20\13\0"
            + "\1\20\6\0\4\20\1\230\3\20\1\231\20\20\4\0"
            + "\4\20\1\232\3\20\1\233\17\20\15\0\1\20\13\0"
            + "\1\20\6\0\21\20\1\234\7\20\4\0\20\20\1\235"
            + "\7\20\15\0\1\20\13\0\1\20\6\0\1\236\7\20"
            + "\1\237\10\20\1\240\7\20\4\0\1\241\7\20\1\242"
            + "\7\20\1\243\7\20\15\0\1\20\13\0\1\20\6\0"
            + "\4\20\1\244\24\20\4\0\4\20\1\245\23\20\15\0"
            + "\1\20\13\0\1\20\6\0\1\246\7\20\1\247\5\20"
            + "\1\250\5\20\1\251\1\20\1\252\2\20\4\0\1\253"
            + "\7\20\1\254\5\20\1\250\4\20\1\255\1\20\1\256"
            + "\2\20\15\0\1\20\13\0\1\20\6\0\21\20\1\257"
            + "\7\20\4\0\20\20\1\260\7\20\15\0\1\20\13\0"
            + "\1\20\6\0\1\261\3\20\1\262\24\20\4\0\1\263"
            + "\3\20\1\264\23\20\15\0\1\20\13\0\1\20\6\0"
            + "\31\20\4\0\20\20\1\173\1\174\6\20\15\0\1\20"
            + "\13\0\1\20\6\0\31\20\4\0\16\20\1\176\11\20"
            + "\15\0\1\20\13\0\1\20\6\0\31\20\4\0\1\201"
            + "\15\20\1\202\11\20\15\0\1\20\13\0\1\20\6\0"
            + "\16\20\1\225\12\20\4\0\4\20\1\205\11\20\1\206"
            + "\11\20\15\0\1\20\13\0\1\20\6\0\31\20\4\0"
            + "\15\20\1\212\3\20\1\213\4\20\1\214\1\20\15\0"
            + "\1\20\13\0\1\20\6\0\1\225\30\20\4\0\1\216"
            + "\27\20\15\0\1\20\13\0\1\20\6\0\31\20\4\0"
            + "\1\220\27\20\15\0\1\20\13\0\1\20\6\0\31\20"
            + "\4\0\14\20\1\222\13\20\15\0\1\20\13\0\1\20"
            + "\6\0\31\20\4\0\4\20\1\224\23\20\15\0\1\20"
            + "\13\0\1\20\6\0\1\225\30\20\4\0\1\225\15\20"
            + "\1\227\11\20\15\0\1\20\13\0\1\20\6\0\10\20"
            + "\1\225\20\20\4\0\4\20\1\232\3\20\1\233\17\20"
            + "\15\0\1\20\13\0\1\20\6\0\31\20\4\0\20\20"
            + "\1\235\7\20\15\0\1\20\13\0\1\20\6\0\31\20"
            + "\4\0\1\241\7\20\1\242\7\20\1\243\7\20\15\0"
            + "\1\20\13\0\1\20\6\0\4\20\1\225\24\20\4\0"
            + "\4\20\1\245\23\20\15\0\1\20\13\0\1\20\6\0"
            + "\10\20\1\265\5\20\1\250\12\20\4\0\1\253\7\20"
            + "\1\254\5\20\1\250\4\20\1\255\1\20\1\256\2\20"
            + "\15\0\1\20\13\0\1\20\6\0\31\20\4\0\20\20"
            + "\1\260\7\20\15\0\1\20\13\0\1\20\6\0\31\20"
            + "\4\0\1\263\3\20\1\264\23\20\126\0\1\266\3\0"
            + "\6\111\2\0\115\111\13\114\1\0\117\114\1\267\1\270"
            + "\3\114\1\271\51\114\1\272\17\114\1\273\2\114\1\274"
            + "\1\114\1\275\25\114\1\0\107\114\1\115\1\114\2\0"
            + "\1\122\122\0\21\125\1\0\103\125\1\0\1\130\25\0"
            + "\1\276\1\0\1\277\114\0\1\164\134\0\1\300\101\0"
            + "\1\301\130\0\1\302\233\0\1\303\27\0\1\304\110\0"
            + "\1\20\13\0\1\20\6\0\21\20\1\305\7\20\4\0"
            + "\30\20\15\0\1\20\13\0\1\20\6\0\2\20\1\306"
            + "\26\20\4\0\30\20\15\0\1\20\13\0\1\20\6\0"
            + "\31\20\4\0\20\20\1\307\7\20\15\0\1\20\13\0"
            + "\1\20\6\0\31\20\4\0\2\20\1\310\25\20\15\0"
            + "\1\20\13\0\1\20\6\0\16\20\1\311\12\20\4\0"
            + "\30\20\15\0\1\20\13\0\1\20\6\0\31\20\4\0"
            + "\16\20\1\312\11\20\15\0\1\20\13\0\1\20\6\0"
            + "\3\20\1\313\15\20\1\314\1\315\6\20\4\0\30\20"
            + "\15\0\1\20\13\0\1\20\6\0\15\20\1\316\13\20"
            + "\4\0\30\20\15\0\1\20\13\0\1\20\6\0\31\20"
            + "\4\0\3\20\1\317\14\20\1\320\1\321\6\20\15\0"
            + "\1\20\13\0\1\20\6\0\31\20\4\0\15\20\1\322"
            + "\12\20\15\0\1\20\13\0\1\20\6\0\5\20\1\323"
            + "\14\20\1\324\6\20\4\0\30\20\14\0\1\325\1\20"
            + "\13\0\1\20\6\0\1\20\1\326\27\20\4\0\30\20"
            + "\15\0\1\20\13\0\1\20\6\0\31\20\4\0\5\20"
            + "\1\327\13\20\1\330\6\20\14\0\1\325\1\20\13\0"
            + "\1\20\6\0\31\20\4\0\1\20\1\331\26\20\15\0"
            + "\1\20\13\0\1\20\6\0\23\20\1\332\5\20\4\0"
            + "\30\20\15\0\1\20\13\0\1\20\6\0\17\20\1\333"
            + "\11\20\4\0\30\20\15\0\1\20\13\0\1\20\6\0"
            + "\23\20\1\334\5\20\4\0\30\20\15\0\1\20\13\0"
            + "\1\20\6\0\31\20\4\0\22\20\1\335\5\20\15\0"
            + "\1\20\13\0\1\20\6\0\31\20\4\0\17\20\1\336"
            + "\10\20\15\0\1\20\13\0\1\20\6\0\31\20\4\0"
            + "\22\20\1\337\5\20\14\0\1\325\1\20\13\0\1\20"
            + "\6\0\13\20\1\340\15\20\4\0\30\20\14\0\1\325"
            + "\1\20\13\0\1\20\6\0\31\20\4\0\13\20\1\341"
            + "\14\20\15\0\1\20\13\0\1\20\6\0\2\20\1\342"
            + "\26\20\4\0\30\20\15\0\1\20\13\0\1\20\6\0"
            + "\31\20\4\0\2\20\1\343\25\20\15\0\1\20\13\0"
            + "\1\20\6\0\17\20\1\344\11\20\4\0\30\20\15\0"
            + "\1\20\13\0\1\20\6\0\31\20\4\0\17\20\1\345"
            + "\10\20\15\0\1\20\13\0\1\20\6\0\4\20\1\346"
            + "\24\20\4\0\30\20\15\0\1\20\13\0\1\20\6\0"
            + "\31\20\4\0\4\20\1\347\23\20\14\0\1\325\1\20"
            + "\13\0\1\20\6\0\31\20\4\0\30\20\15\0\1\20"
            + "\13\0\1\20\6\0\15\20\1\350\13\20\4\0\30\20"
            + "\15\0\1\20\13\0\1\20\6\0\31\20\4\0\15\20"
            + "\1\351\12\20\15\0\1\20\13\0\1\20\6\0\15\20"
            + "\1\352\13\20\4\0\30\20\14\0\1\325\1\20\13\0"
            + "\1\20\6\0\4\20\1\353\24\20\4\0\30\20\15\0"
            + "\1\20\13\0\1\20\6\0\31\20\4\0\15\20\1\354"
            + "\12\20\14\0\1\325\1\20\13\0\1\20\6\0\31\20"
            + "\4\0\4\20\1\355\23\20\15\0\1\20\13\0\1\20"
            + "\6\0\3\20\1\356\25\20\4\0\30\20\15\0\1\20"
            + "\13\0\1\20\6\0\31\20\4\0\3\20\1\357\24\20"
            + "\15\0\1\20\13\0\1\20\6\0\21\20\1\360\7\20"
            + "\4\0\30\20\15\0\1\20\13\0\1\20\6\0\22\20"
            + "\1\361\6\20\4\0\30\20\15\0\1\20\13\0\1\20"
            + "\6\0\10\20\1\362\20\20\4\0\30\20\15\0\1\20"
            + "\13\0\1\20\6\0\31\20\4\0\20\20\1\363\7\20"
            + "\15\0\1\20\13\0\1\20\6\0\31\20\4\0\21\20"
            + "\1\364\6\20\15\0\1\20\13\0\1\20\6\0\31\20"
            + "\4\0\10\20\1\365\17\20\14\0\1\325\1\20\13\0"
            + "\1\20\6\0\17\20\1\366\3\20\1\367\5\20\4\0"
            + "\30\20\14\0\1\325\1\20\13\0\1\20\6\0\31\20"
            + "\4\0\17\20\1\370\2\20\1\371\5\20\15\0\1\20"
            + "\13\0\1\20\6\0\13\20\1\372\15\20\4\0\30\20"
            + "\14\0\1\325\1\20\13\0\1\20\6\0\15\20\1\373"
            + "\13\20\4\0\30\20\15\0\1\20\13\0\1\20\6\0"
            + "\13\20\1\225\15\20\4\0\13\20\1\225\14\20\15\0"
            + "\1\20\13\0\1\20\6\0\14\20\1\374\14\20\4\0"
            + "\30\20\15\0\1\20\13\0\1\20\6\0\10\20\1\375"
            + "\20\20\4\0\30\20\15\0\1\20\13\0\1\20\6\0"
            + "\31\20\4\0\13\20\1\376\14\20\14\0\1\325\1\20"
            + "\13\0\1\20\6\0\31\20\4\0\15\20\1\377\12\20"
            + "\15\0\1\20\13\0\1\20\6\0\31\20\4\0\14\20"
            + "\1\u0100\13\20\15\0\1\20\13\0\1\20\6\0\31\20"
            + "\4\0\10\20\1\u0101\17\20\15\0\1\20\13\0\1\20"
            + "\6\0\24\20\1\u0102\4\20\4\0\30\20\15\0\1\20"
            + "\13\0\1\20\6\0\31\20\4\0\23\20\1\u0103\4\20"
            + "\15\0\1\20\13\0\1\20\6\0\21\20\1\u0104\7\20"
            + "\4\0\30\20\15\0\1\20\13\0\1\20\6\0\21\20"
            + "\1\u0105\7\20\4\0\30\20\15\0\1\20\13\0\1\20"
            + "\6\0\31\20\4\0\20\20\1\u0104\7\20\15\0\1\20"
            + "\13\0\1\20\6\0\31\20\4\0\20\20\1\u0106\7\20"
            + "\15\0\1\20\13\0\1\20\6\0\4\20\1\u0107\24\20"
            + "\4\0\30\20\15\0\1\20\13\0\1\20\6\0\4\20"
            + "\1\u0108\24\20\4\0\30\20\15\0\1\20\13\0\1\20"
            + "\6\0\31\20\4\0\4\20\1\u0109\23\20\15\0\1\20"
            + "\13\0\1\20\6\0\31\20\4\0\4\20\1\u010a\23\20"
            + "\15\0\1\20\13\0\1\20\6\0\13\20\1\u010b\15\20"
            + "\4\0\30\20\15\0\1\20\13\0\1\20\6\0\31\20"
            + "\4\0\13\20\1\u010c\14\20\15\0\1\20\13\0\1\20"
            + "\6\0\4\20\1\u010d\24\20\4\0\30\20\15\0\1\20"
            + "\13\0\1\20\6\0\1\u010e\30\20\4\0\30\20\15\0"
            + "\1\20\13\0\1\20\6\0\16\20\1\u010f\12\20\4\0"
            + "\30\20\15\0\1\20\13\0\1\20\6\0\23\20\1\u0110"
            + "\5\20\4\0\30\20\15\0\1\20\13\0\1\20\6\0"
            + "\31\20\4\0\4\20\1\u0111\23\20\15\0\1\20\13\0"
            + "\1\20\6\0\31\20\4\0\1\u0112\27\20\15\0\1\20"
            + "\13\0\1\20\6\0\31\20\4\0\16\20\1\u010f\11\20"
            + "\15\0\1\20\13\0\1\20\6\0\31\20\4\0\22\20"
            + "\1\u0113\5\20\15\0\1\20\13\0\1\20\6\0\1\u0114"
            + "\30\20\4\0\30\20\15\0\1\20\13\0\1\20\6\0"
            + "\2\20\1\u0115\26\20\4\0\30\20\15\0\1\20\13\0"
            + "\1\20\6\0\13\20\1\u0116\15\20\4\0\30\20\15\0"
            + "\1\20\13\0\1\20\6\0\31\20\4\0\1\u0117\27\20"
            + "\15\0\1\20\13\0\1\20\6\0\31\20\4\0\2\20"
            + "\1\u0118\25\20\15\0\1\20\13\0\1\20\6\0\31\20"
            + "\4\0\13\20\1\u0119\14\20\15\0\1\20\13\0\1\20"
            + "\6\0\4\20\1\u011a\24\20\4\0\30\20\15\0\1\20"
            + "\13\0\1\20\6\0\4\20\1\u011b\24\20\4\0\30\20"
            + "\15\0\1\20\13\0\1\20\6\0\10\20\1\u011c\20\20"
            + "\4\0\30\20\15\0\1\20\13\0\1\20\6\0\31\20"
            + "\4\0\4\20\1\u011d\23\20\15\0\1\20\13\0\1\20"
            + "\6\0\31\20\4\0\4\20\1\u011e\23\20\15\0\1\20"
            + "\13\0\1\20\6\0\31\20\4\0\10\20\1\u011f\17\20"
            + "\15\0\1\20\13\0\1\20\6\0\22\20\1\u0120\6\20"
            + "\4\0\30\20\15\0\1\20\13\0\1\20\6\0\31\20"
            + "\4\0\21\20\1\u0121\6\20\15\0\1\20\13\0\1\20"
            + "\6\0\4\20\1\u0122\24\20\4\0\30\20\15\0\1\20"
            + "\13\0\1\20\6\0\31\20\4\0\4\20\1\u0123\23\20"
            + "\15\0\1\20\13\0\1\20\6\0\1\u0124\30\20\4\0"
            + "\30\20\15\0\1\20\13\0\1\20\6\0\31\20\4\0"
            + "\1\u0125\27\20\15\0\1\20\13\0\1\20\6\0\17\20"
            + "\1\u0126\11\20\4\0\30\20\15\0\1\20\13\0\1\20"
            + "\6\0\31\20\4\0\17\20\1\u0126\10\20\15\0\1\20"
            + "\13\0\1\20\6\0\6\20\1\u0127\22\20\4\0\30\20"
            + "\15\0\1\20\13\0\1\20\6\0\31\20\4\0\6\20"
            + "\1\u0128\21\20\15\0\1\20\13\0\1\20\6\0\22\20"
            + "\1\u0129\6\20\4\0\30\20\15\0\1\20\13\0\1\20"
            + "\6\0\15\20\1\u012a\13\20\4\0\30\20\15\0\1\20"
            + "\13\0\1\20\6\0\31\20\4\0\21\20\1\u012b\6\20"
            + "\15\0\1\20\13\0\1\20\6\0\31\20\4\0\15\20"
            + "\1\u012c\12\20\15\0\1\20\13\0\1\20\6\0\4\20"
            + "\1\u012d\24\20\4\0\30\20\15\0\1\20\13\0\1\20"
            + "\6\0\31\20\4\0\4\20\1\u012e\23\20\15\0\1\20"
            + "\13\0\1\20\6\0\1\u012f\3\20\1\u0130\24\20\4\0"
            + "\30\20\15\0\1\20\13\0\1\20\6\0\23\20\1\u0131"
            + "\5\20\4\0\30\20\15\0\1\20\13\0\1\20\6\0"
            + "\15\20\1\u0132\13\20\4\0\30\20\15\0\1\20\13\0"
            + "\1\20\6\0\31\20\4\0\1\u012f\3\20\1\u0133\23\20"
            + "\15\0\1\20\13\0\1\20\6\0\31\20\4\0\22\20"
            + "\1\u0134\5\20\15\0\1\20\13\0\1\20\6\0\31\20"
            + "\4\0\15\20\1\u0135\12\20\15\0\1\20\13\0\1\20"
            + "\6\0\21\20\1\u0136\7\20\4\0\30\20\15\0\1\20"
            + "\13\0\1\20\6\0\16\20\1\u0137\12\20\4\0\30\20"
            + "\15\0\1\20\13\0\1\20\6\0\31\20\4\0\20\20"
            + "\1\u0138\7\20\15\0\1\20\13\0\1\20\6\0\31\20"
            + "\4\0\16\20\1\u0139\11\20\15\0\1\20\13\0\1\20"
            + "\6\0\10\20\1\u013a\20\20\4\0\30\20\15\0\1\20"
            + "\13\0\1\20\6\0\16\20\1\u013b\12\20\4\0\30\20"
            + "\15\0\1\20\13\0\1\20\6\0\1\u013c\30\20\4\0"
            + "\30\20\15\0\1\20\13\0\1\20\6\0\23\20\1\u013d"
            + "\5\20\4\0\30\20\15\0\1\20\13\0\1\20\6\0"
            + "\31\20\4\0\10\20\1\u013e\17\20\15\0\1\20\13\0"
            + "\1\20\6\0\31\20\4\0\16\20\1\u013b\11\20\15\0"
            + "\1\20\13\0\1\20\6\0\31\20\4\0\1\u013f\27\20"
            + "\15\0\1\20\13\0\1\20\6\0\31\20\4\0\22\20"
            + "\1\u0140\5\20\15\0\1\20\13\0\1\20\6\0\4\20"
            + "\1\u0141\24\20\4\0\30\20\15\0\1\20\13\0\1\20"
            + "\6\0\31\20\4\0\4\20\1\u0141\23\20\15\0\1\20"
            + "\13\0\1\20\6\0\3\20\1\u0142\25\20\4\0\30\20"
            + "\15\0\1\20\13\0\1\20\6\0\31\20\4\0\3\20"
            + "\1\u0143\24\20\15\0\1\20\13\0\1\20\6\0\6\20"
            + "\1\u0144\22\20\4\0\30\20\15\0\1\20\13\0\1\20"
            + "\6\0\15\20\1\u0145\13\20\4\0\30\20\15\0\1\20"
            + "\13\0\1\20\6\0\31\20\4\0\6\20\1\u0146\21\20"
            + "\15\0\1\20\13\0\1\20\6\0\31\20\4\0\15\20"
            + "\1\u0147\12\20\15\0\1\20\13\0\1\20\6\0\4\20"
            + "\1\u0148\24\20\4\0\30\20\15\0\1\20\13\0\1\20"
            + "\6\0\31\20\4\0\4\20\1\u0149\23\20\15\0\1\20"
            + "\13\0\1\20\6\0\15\20\1\u014a\13\20\4\0\30\20"
            + "\15\0\1\20\13\0\1\20\6\0\2\20\1\u014b\26\20"
            + "\4\0\30\20\15\0\1\20\13\0\1\20\6\0\10\20"
            + "\1\u014c\20\20\4\0\30\20\15\0\1\20\13\0\1\20"
            + "\6\0\31\20\4\0\15\20\1\u014d\12\20\15\0\1\20"
            + "\13\0\1\20\6\0\31\20\4\0\2\20\1\u014e\25\20"
            + "\15\0\1\20\13\0\1\20\6\0\31\20\4\0\10\20"
            + "\1\u014f\17\20\15\0\1\20\13\0\1\20\6\0\24\20"
            + "\1\u0150\4\20\4\0\30\20\15\0\1\20\13\0\1\20"
            + "\6\0\4\20\1\u0151\24\20\4\0\30\20\15\0\1\20"
            + "\13\0\1\20\6\0\4\20\1\u0152\24\20\4\0\30\20"
            + "\15\0\1\20\13\0\1\20\6\0\31\20\4\0\23\20"
            + "\1\u0153\4\20\15\0\1\20\13\0\1\20\6\0\31\20"
            + "\4\0\4\20\1\u0154\23\20\15\0\1\20\13\0\1\20"
            + "\6\0\31\20\4\0\4\20\1\u0152\23\20\15\0\1\20"
            + "\13\0\1\20\6\0\21\20\1\u0155\7\20\4\0\30\20"
            + "\15\0\1\20\13\0\1\20\6\0\21\20\1\u0156\7\20"
            + "\4\0\30\20\15\0\1\20\13\0\1\20\6\0\4\20"
            + "\1\u0157\24\20\4\0\30\20\15\0\1\20\13\0\1\20"
            + "\6\0\31\20\4\0\20\20\1\u0158\7\20\15\0\1\20"
            + "\13\0\1\20\6\0\31\20\4\0\20\20\1\u0159\7\20"
            + "\15\0\1\20\13\0\1\20\6\0\31\20\4\0\4\20"
            + "\1\u015a\23\20\15\0\1\20\13\0\1\20\6\0\4\20"
            + "\1\u015b\11\20\1\u015b\12\20\4\0\30\20\15\0\1\20"
            + "\13\0\1\20\6\0\31\20\4\0\4\20\1\u015b\11\20"
            + "\1\u015b\11\20\15\0\1\20\13\0\1\20\6\0\21\20"
            + "\1\u015c\7\20\4\0\30\20\15\0\1\20\13\0\1\20"
            + "\6\0\31\20\4\0\20\20\1\u015c\7\20\15\0\1\20"
            + "\13\0\1\20\6\0\21\20\1\u015d\7\20\4\0\30\20"
            + "\15\0\1\20\13\0\1\20\6\0\31\20\4\0\20\20"
            + "\1\u015e\7\20\15\0\1\20\13\0\1\20\6\0\10\20"
            + "\1\u015f\20\20\4\0\30\20\15\0\1\20\13\0\1\20"
            + "\6\0\31\20\4\0\10\20\1\u0160\17\20\15\0\1\20"
            + "\13\0\1\20\6\0\1\u0161\30\20\4\0\30\20\15\0"
            + "\1\20\13\0\1\20\6\0\23\20\1\u0162\5\20\4\0"
            + "\30\20\15\0\1\20\13\0\1\20\6\0\31\20\4\0"
            + "\1\u0163\27\20\15\0\1\20\13\0\1\20\6\0\31\20"
            + "\4\0\22\20\1\u0164\5\20\15\0\1\20\13\0\1\20"
            + "\6\0\15\20\1\u0165\13\20\4\0\30\20\15\0\1\20"
            + "\13\0\1\20\6\0\31\20\4\0\15\20\1\u0166\12\20"
            + "\15\0\1\20\13\0\1\20\6\0\22\20\1\u0167\6\20"
            + "\4\0\30\20\15\0\1\20\13\0\1\20\6\0\1\u0168"
            + "\30\20\4\0\30\20\15\0\1\20\13\0\1\20\6\0"
            + "\2\20\1\u0169\26\20\4\0\30\20\15\0\1\20\13\0"
            + "\1\20\6\0\31\20\4\0\21\20\1\u0167\6\20\15\0"
            + "\1\20\13\0\1\20\6\0\31\20\4\0\1\u0168\27\20"
            + "\15\0\1\20\13\0\1\20\6\0\31\20\4\0\2\20"
            + "\1\u016a\25\20\15\0\1\20\13\0\1\20\6\0\16\20"
            + "\1\u016b\12\20\4\0\30\20\15\0\1\20\13\0\1\20"
            + "\6\0\21\20\1\u016c\7\20\4\0\30\20\15\0\1\20"
            + "\13\0\1\20\6\0\31\20\4\0\16\20\1\u016d\11\20"
            + "\15\0\1\20\13\0\1\20\6\0\31\20\4\0\20\20"
            + "\1\u016e\7\20\15\0\1\20\13\0\1\20\6\0\21\20"
            + "\1\u016f\7\20\4\0\30\20\15\0\1\20\13\0\1\20"
            + "\6\0\21\20\1\u0170\7\20\4\0\30\20\15\0\1\20"
            + "\13\0\1\20\6\0\2\20\1\u0171\26\20\4\0\30\20"
            + "\15\0\1\20\13\0\1\20\6\0\31\20\4\0\20\20"
            + "\1\u016f\7\20\15\0\1\20\13\0\1\20\6\0\31\20"
            + "\4\0\20\20\1\u0172\7\20\15\0\1\20\13\0\1\20"
            + "\6\0\31\20\4\0\2\20\1\u0173\25\20\15\0\1\20"
            + "\13\0\1\20\6\0\1\u0174\30\20\4\0\30\20\15\0"
            + "\1\20\13\0\1\20\6\0\31\20\4\0\1\u0175\27\20"
            + "\15\0\1\20\13\0\1\20\6\0\13\20\1\u0176\15\20"
            + "\4\0\30\20\15\0\1\20\13\0\1\20\6\0\3\20"
            + "\1\u0177\25\20\4\0\30\20\15\0\1\20\13\0\1\20"
            + "\6\0\31\20\4\0\13\20\1\u0178\14\20\15\0\1\20"
            + "\13\0\1\20\6\0\31\20\4\0\3\20\1\u0179\24\20"
            + "\15\0\1\20\13\0\1\20\6\0\1\u017a\30\20\4\0"
            + "\30\20\15\0\1\20\13\0\1\20\6\0\31\20\4\0"
            + "\1\u017b\27\20\15\0\1\20\13\0\1\20\6\0\1\u017c"
            + "\30\20\4\0\30\20\15\0\1\20\13\0\1\20\6\0"
            + "\23\20\1\u017d\5\20\4\0\30\20\15\0\1\20\13\0"
            + "\1\20\6\0\15\20\1\u017e\13\20\4\0\30\20\15\0"
            + "\1\20\13\0\1\20\6\0\31\20\4\0\1\u017c\27\20"
            + "\15\0\1\20\13\0\1\20\6\0\31\20\4\0\22\20"
            + "\1\u017f\5\20\15\0\1\20\13\0\1\20\6\0\31\20"
            + "\4\0\15\20\1\u0180\12\20\15\0\1\20\13\0\1\20"
            + "\6\0\13\20\1\u0181\15\20\4\0\30\20\15\0\1\20"
            + "\13\0\1\20\6\0\15\20\1\u0182\13\20\4\0\30\20"
            + "\15\0\1\20\13\0\1\20\6\0\31\20\4\0\13\20"
            + "\1\u0183\14\20\15\0\1\20\13\0\1\20\6\0\31\20"
            + "\4\0\15\20\1\u0184\12\20\15\0\1\20\13\0\1\20"
            + "\6\0\16\20\1\u0185\12\20\4\0\30\20\15\0\1\20"
            + "\13\0\1\20\6\0\1\u0186\30\20\4\0\30\20\15\0"
            + "\1\20\13\0\1\20\6\0\15\20\1\u0187\13\20\4\0"
            + "\30\20\15\0\1\20\13\0\1\20\6\0\31\20\4\0"
            + "\16\20\1\u0185\11\20\15\0\1\20\13\0\1\20\6\0"
            + "\31\20\4\0\1\u0188\27\20\15\0\1\20\13\0\1\20"
            + "\6\0\31\20\4\0\15\20\1\u0189\12\20\15\0\1\20"
            + "\13\0\1\20\6\0\4\20\1\u018a\24\20\4\0\30\20"
            + "\15\0\1\20\13\0\1\20\6\0\31\20\4\0\4\20"
            + "\1\u018b\23\20\15\0\1\20\13\0\1\20\6\0\23\20"
            + "\1\u018c\5\20\4\0\30\20\15\0\1\20\13\0\1\20"
            + "\6\0\31\20\4\0\22\20\1\u018d\5\20\15\0\1\20"
            + "\13\0\1\20\6\0\11\20\1\u018e\17\20\4\0\30\20"
            + "\15\0\1\20\13\0\1\20\6\0\21\20\1\u018f\7\20"
            + "\4\0\30\20\15\0\1\20\13\0\1\20\6\0\31\20"
            + "\4\0\11\20\1\u0190\16\20\15\0\1\20\13\0\1\20"
            + "\6\0\31\20\4\0\20\20\1\u0191\7\20\15\0\1\20"
            + "\13\0\1\20\6\0\1\u0192\30\20\4\0\30\20\15\0"
            + "\1\20\13\0\1\20\6\0\31\20\4\0\1\u0193\27\20"
            + "\15\0\1\20\13\0\1\20\6\0\10\20\1\u0194\20\20"
            + "\4\0\30\20\15\0\1\20\13\0\1\20\6\0\31\20"
            + "\4\0\10\20\1\u0195\17\20\15\0\1\20\13\0\1\20"
            + "\6\0\3\20\1\u0196\25\20\4\0\30\20\15\0\1\20"
            + "\13\0\1\20\6\0\15\20\1\u0197\13\20\4\0\30\20"
            + "\15\0\1\20\13\0\1\20\6\0\31\20\4\0\3\20"
            + "\1\u0198\24\20\15\0\1\20\13\0\1\20\6\0\31\20"
            + "\4\0\15\20\1\u0199\12\20\15\0\1\20\13\0\1\20"
            + "\6\0\10\20\1\u019a\20\20\4\0\30\20\15\0\1\20"
            + "\13\0\1\20\6\0\7\20\1\u019b\21\20\4\0\30\20"
            + "\15\0\1\20\13\0\1\20\6\0\31\20\4\0\10\20"
            + "\1\u019c\17\20\15\0\1\20\13\0\1\20\6\0\31\20"
            + "\4\0\7\20\1\u019b\20\20\15\0\1\20\13\0\1\20"
            + "\6\0\3\20\1\u019d\25\20\4\0\30\20\15\0\1\20"
            + "\13\0\1\20\6\0\31\20\4\0\3\20\1\u019e\24\20"
            + "\15\0\1\20\13\0\1\20\6\0\16\20\1\u019f\12\20"
            + "\4\0\30\20\15\0\1\20\13\0\1\20\6\0\4\20"
            + "\1\u01a0\24\20\4\0\30\20\15\0\1\20\13\0\1\20"
            + "\6\0\31\20\4\0\16\20\1\u019f\11\20\15\0\1\20"
            + "\13\0\1\20\6\0\31\20\4\0\4\20\1\u01a1\23\20"
            + "\15\0\1\20\13\0\1\20\6\0\15\20\1\u01a2\13\20"
            + "\4\0\30\20\15\0\1\20\13\0\1\20\6\0\31\20"
            + "\4\0\15\20\1\u01a2\12\20\15\0\1\20\13\0\1\20"
            + "\6\0\4\20\1\u01a3\24\20\4\0\30\20\15\0\1\20"
            + "\13\0\1\20\6\0\24\20\1\u01a4\4\20\4\0\30\20"
            + "\15\0\1\20\13\0\1\20\6\0\31\20\4\0\4\20"
            + "\1\u01a5\23\20\15\0\1\20\13\0\1\20\6\0\31\20"
            + "\4\0\23\20\1\u01a6\4\20\15\0\1\20\13\0\1\20"
            + "\6\0\23\20\1\u01a7\5\20\4\0\30\20\15\0\1\20"
            + "\13\0\1\20\6\0\3\20\1\u01a8\25\20\4\0\30\20"
            + "\15\0\1\20\13\0\1\20\6\0\31\20\4\0\22\20"
            + "\1\u01a7\5\20\15\0\1\20\13\0\1\20\6\0\31\20"
            + "\4\0\3\20\1\u01a9\24\20\15\0\1\20\13\0\1\20"
            + "\6\0\21\20\1\u01aa\7\20\4\0\30\20\15\0\1\20"
            + "\13\0\1\20\6\0\3\20\1\u01ab\25\20\4\0\30\20"
            + "\15\0\1\20\13\0\1\20\6\0\31\20\4\0\20\20"
            + "\1\u01aa\7\20\15\0\1\20\13\0\1\20\6\0\31\20"
            + "\4\0\3\20\1\u01ac\24\20\15\0\1\20\13\0\1\20"
            + "\6\0\22\20\1\u01ad\6\20\4\0\30\20\15\0\1\20"
            + "\13\0\1\20\6\0\31\20\4\0\21\20\1\u01ad\6\20"
            + "\15\0\1\20\13\0\1\20\6\0\24\20\1\u01ae\4\20"
            + "\4\0\30\20\15\0\1\20\13\0\1\20\6\0\31\20"
            + "\4\0\23\20\1\u01af\4\20\15\0\1\20\13\0\1\20"
            + "\6\0\4\20\1\u01b0\24\20\4\0\30\20\15\0\1\20"
            + "\13\0\1\20\6\0\1\u01b1\30\20\4\0\30\20\15\0"
            + "\1\20\13\0\1\20\6\0\31\20\4\0\4\20\1\u01b0"
            + "\23\20\15\0\1\20\13\0\1\20\6\0\31\20\4\0"
            + "\1\u01b2\27\20\15\0\1\20\13\0\1\20\6\0\21\20"
            + "\1\u01b3\7\20\4\0\30\20\15\0\1\20\13\0\1\20"
            + "\6\0\31\20\4\0\20\20\1\u01b3\7\20\15\0\1\20"
            + "\13\0\1\20\6\0\17\20\1\u01b4\11\20\4\0\30\20"
            + "\15\0\1\20\13\0\1\20\6\0\31\20\4\0\17\20"
            + "\1\u01b5\10\20\15\0\1\20\13\0\1\20\6\0\24\20"
            + "\1\u01b6\4\20\4\0\30\20\15\0\1\20\13\0\1\20"
            + "\6\0\1\u01b7\30\20\4\0\30\20\15\0\1\20\13\0"
            + "\1\20\6\0\31\20\4\0\23\20\1\u01b8\4\20\15\0"
            + "\1\20\13\0\1\20\6\0\31\20\4\0\1\u01b7\27\20"
            + "\15\0\1\20\13\0\1\20\6\0\30\20\1\u01b9\4\0"
            + "\30\20\15\0\1\20\13\0\1\20\6\0\31\20\4\0"
            + "\27\20\1\u01ba\15\0\1\20\13\0\1\20\6\0\4\20"
            + "\1\u01bb\24\20\4\0\30\20\15\0\1\20\13\0\1\20"
            + "\6\0\31\20\4\0\4\20\1\u01bc\23\20\15\0\1\20"
            + "\13\0\1\20\6\0\15\20\1\u01bd\13\20\4\0\30\20"
            + "\15\0\1\20\13\0\1\20\6\0\31\20\4\0\15\20"
            + "\1\u01be\12\20\15\0\1\20\13\0\1\20\6\0\21\20"
            + "\1\u01bf\7\20\4\0\30\20\15\0\1\20\13\0\1\20"
            + "\6\0\1\u01c0\30\20\4\0\30\20\15\0\1\20\13\0"
            + "\1\20\6\0\31\20\4\0\20\20\1\u01bf\7\20\15\0"
            + "\1\20\13\0\1\20\6\0\31\20\4\0\1\u01c1\27\20"
            + "\15\0\1\20\13\0\1\20\6\0\4\20\1\u01c2\24\20"
            + "\4\0\30\20\15\0\1\20\13\0\1\20\6\0\31\20"
            + "\4\0\4\20\1\u01c3\23\20\15\0\1\20\13\0\1\20"
            + "\6\0\4\20\1\u01c4\24\20\4\0\30\20\15\0\1\20"
            + "\13\0\1\20\6\0\31\20\4\0\4\20\1\u01c4\23\20"
            + "\15\0\1\20\13\0\1\20\6\0\3\20\1\u01c5\25\20"
            + "\4\0\30\20\15\0\1\20\13\0\1\20\6\0\31\20"
            + "\4\0\3\20\1\u01c5\24\20\15\0\1\20\13\0\1\20"
            + "\6\0\22\20\1\u01c6\6\20\4\0\30\20\15\0\1\20"
            + "\13\0\1\20\6\0\31\20\4\0\21\20\1\u01c6\6\20"
            + "\15\0\1\20\13\0\1\20\6\0\1\u01c7\30\20\4\0"
            + "\30\20\15\0\1\20\13\0\1\20\6\0\31\20\4\0"
            + "\1\u01c8\27\20\15\0\1\20\13\0\1\20\6\0\2\20"
            + "\1\u01c9\26\20\4\0\30\20\15\0\1\20\13\0\1\20"
            + "\6\0\31\20\4\0\2\20\1\u01ca\25\20\15\0\1\20"
            + "\13\0\1\20\6\0\1\u01cb\30\20\4\0\30\20\15\0"
            + "\1\20\13\0\1\20\6\0\31\20\4\0\1\u01cc\27\20"
            + "\15\0\1\20\13\0\1\20\6\0\21\20\1\u01cd\7\20"
            + "\4\0\30\20\15\0\1\20\13\0\1\20\6\0\31\20"
            + "\4\0\20\20\1\u01ce\7\20\15\0\1\20\13\0\1\20"
            + "\6\0\23\20\1\u01cf\5\20\4\0\30\20\15\0\1\20"
            + "\13\0\1\20\6\0\31\20\4\0\22\20\1\u01d0\5\20"
            + "\15\0\1\20\13\0\1\20\6\0\21\20\1\u01d1\7\20"
            + "\4\0\30\20\15\0\1\20\13\0\1\20\6\0\31\20"
            + "\4\0\20\20\1\u01d1\7\20\15\0\1\20\13\0\1\20"
            + "\6\0\15\20\1\u01d2\13\20\4\0\30\20\15\0\1\20"
            + "\13\0\1\20\6\0\31\20\4\0\15\20\1\u01d3\12\20"
            + "\15\0\1\20\13\0\1\20\6\0\13\20\1\u01d4\15\20"
            + "\4\0\30\20\15\0\1\20\13\0\1\20\6\0\31\20"
            + "\4\0\13\20\1\u01d4\14\20\15\0\1\20\13\0\1\20"
            + "\6\0\10\20\1\u01d5\20\20\4\0\30\20\15\0\1\20"
            + "\13\0\1\20\6\0\31\20\4\0\10\20\1\u01d6\17\20"
            + "\15\0\1\20\13\0\1\20\6\0\21\20\1\u01d7\7\20"
            + "\4\0\30\20\15\0\1\20\13\0\1\20\6\0\31\20"
            + "\4\0\20\20\1\u01d7\7\20\15\0\1\20\13\0\1\20"
            + "\6\0\16\20\1\u0141\12\20\4\0\30\20\15\0\1\20"
            + "\13\0\1\20\6\0\31\20\4\0\16\20\1\u0141\11\20"
            + "\15\0\1\20\13\0\1\20\6\0\4\20\1\u01d8\24\20"
            + "\4\0\30\20\15\0\1\20\13\0\1\20\6\0\31\20"
            + "\4\0\4\20\1\u01d8\23\20\15\0\1\20\13\0\1\20"
            + "\6\0\23\20\1\u01d9\5\20\4\0\30\20\15\0\1\20"
            + "\13\0\1\20\6\0\31\20\4\0\22\20\1\u01da\5\20"
            + "\15\0\1\20\13\0\1\20\6\0\21\20\1\u01db\7\20"
            + "\4\0\30\20\15\0\1\20\13\0\1\20\6\0\31\20"
            + "\4\0\20\20\1\u01db\7\20\15\0\1\20\13\0\1\20"
            + "\6\0\4\20\1\u01dc\24\20\4\0\30\20\15\0\1\20"
            + "\13\0\1\20\6\0\31\20\4\0\4\20\1\u01dc\23\20"
            + "\5\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[31960];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * Error code for "Unknown internal scanner error".
     */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    /**
     * Error code for "could not match input".
     */
    private static final int ZZ_NO_MATCH = 1;
    /**
     * Error code for "pushback value was too large".
     */
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /**
     * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
     * {@link #ZZ_PUSHBACK_2BIG} respectively.
     */
    private static final String ZZ_ERROR_MSG[] = {
        "Unknown internal scanner error",
        "Error: could not match input",
        "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0
            = "\6\0\1\1\2\0\1\11\4\1\1\11\1\1\1\11"
            + "\1\1\4\11\1\1\1\11\1\1\1\11\1\1\2\11"
            + "\24\1\3\11\21\1\1\11\1\1\1\11\1\1\2\11"
            + "\3\1\1\11\1\1\1\11\4\1\2\11\5\1\1\11"
            + "\3\1\7\11\2\1\1\11\1\0\1\11\1\0\5\11"
            + "\1\0\5\11\75\1\1\11\2\1\1\11\4\1\2\0"
            + "\4\11\21\1\1\11\u0107\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[476];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * Input device.
     */
    private java.io.Reader zzReader;

    /**
     * Current state of the DFA.
     */
    private int zzState;

    /**
     * Current lexical state.
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * This buffer contains the current text to be matched and is the source of
     * the {@link #yytext()} string.
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /**
     * Text position at the last accepting state.
     */
    private int zzMarkedPos;

    /**
     * Current text position in the buffer.
     */
    private int zzCurrentPos;

    /**
     * Marks the beginning of the {@link #yytext()} string in the buffer.
     */
    private int zzStartRead;

    /**
     * Marks the last character in the buffer, that has been read from input.
     */
    private int zzEndRead;

    /**
     * Whether the scanner is at the end of file.
     *
     * @see #yyatEOF
     */
    private boolean zzAtEOF;

    /**
     * The number of occupied positions in {@link #zzBuffer} beyond
     * {@link #zzEndRead}.
     *
     * <p>
     * When a lead/high surrogate has been read from the input stream into the
     * final {@link #zzBuffer} position, this will have a value of 1; otherwise,
     * it will have a value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    /**
     * Number of newlines encountered up to the start of the matched text.
     */
    private int yyline;

    /**
     * Number of characters from the last newline up to the start of the matched
     * text.
     */
    private int yycolumn;

    /**
     * Number of characters up to the start of the matched text.
     */
    private long yychar;

    /**
     * Whether the scanner is currently at the beginning of a line.
     */
    @SuppressWarnings("unused")
    private boolean zzAtBOL = true;

    /**
     * Whether the user-EOF-code has already been executed.
     */
    private boolean zzEOFDone;

    /* user code: */
    String str = "";
    int indentados = 0;

    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }

    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn, yytext());
    }

    public Symbol indent(String analizar, boolean tieneTab, boolean esEOF) {
        if (!esEOF) {
            if (tieneTab) {
                int espacios = 0;
                for (int i = 0; i < analizar.length(); i++) {
                    if (analizar.charAt(i) == '\t') {
                        espacios++;
                    }
                }
                if ((indentados - espacios) > 0) {
                    indentados--;
                    yypushback(espacios);
                    return new Symbol(sym.DEDENT, yyline, yycolumn, yytext());
                } else if ((indentados - espacios) == 0) {
                    yybegin(YYINITIAL);
                    return null;
                } else if ((indentados - espacios) < 0) {
                    indentados++;
                    yypushback(espacios);
                    return new Symbol(sym.INDENT, yyline, yycolumn, yytext());
                } else {
                    System.out.println("No sé como entró acá");
                    return null;
                }
            } else {
                if (indentados > 0) {
                    indentados--;
                    yypushback(1);
                    return new Symbol(sym.DEDENT, yyline, yycolumn, yytext());
                } else {
                    yybegin(YYINITIAL);
                    yypushback(1);
                    return null;
                }
            }
        } else {
            if (indentados > 0) {
                indentados--;
                return new Symbol(sym.DEDENT, yyline, yycolumn, yytext());
            } else {
                return new java_cup.runtime.Symbol(sym.EOF);
            }
        }
    }

    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public Lexer(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Translates raw input code points to DFA table row
     */
    private static int zzCMap(int input) {
        int offset = input & 255;
        return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false} iff there was new input.
     * @exception java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

        /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

        /* not supposed to occur according to specification of java.io.Reader */
        if (numRead == 0) {
            throw new java.io.IOException(
                    "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
        }
        if (numRead > 0) {
            zzEndRead += numRead;
            if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                if (numRead == requested) { // We requested too few chars to encode a full Unicode character
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                } else {                    // There is room in the buffer for at least one more char
                    int c = zzReader.read();  // Expecting to read a paired low surrogate char
                    if (c == -1) {
                        return true;
                    } else {
                        zzBuffer[zzEndRead++] = (char) c;
                    }
                }
            }
            /* potentially more input available */
            return false;
        }

        /* numRead < 0 ==> end of stream */
        return true;
    }

    /**
     * Closes the input reader.
     *
     * @throws java.io.IOException if the reader could not be closed.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true; // indicate end of file
        zzEndRead = zzStartRead; // invalidate buffer

        if (zzReader != null) {
            zzReader.close();
        }
    }

    /**
     * Resets the scanner to read from a new input stream.
     *
     * <p>
     * Does not close the old reader.
     *
     * <p>
     * All internal variables are reset, the old input stream <b>cannot</b> be
     * reused (internal buffer is discarded and lost). Lexical state is set to
     * {@code ZZ_INITIAL}.
     *
     * <p>
     * Internal scan buffer is resized down to its initial length, if it has
     * grown.
     *
     * @param reader The new input stream.
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzEOFDone = false;
        yyResetPosition();
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE) {
            zzBuffer = new char[ZZ_BUFFERSIZE];
        }
    }

    /**
     * Resets the input position.
     */
    private final void yyResetPosition() {
        zzAtBOL = true;
        zzAtEOF = false;
        zzCurrentPos = 0;
        zzMarkedPos = 0;
        zzStartRead = 0;
        zzEndRead = 0;
        zzFinalHighSurrogate = 0;
        yyline = 0;
        yycolumn = 0;
        yychar = 0L;
    }

    /**
     * Returns whether the scanner has reached the end of the reader it reads
     * from.
     *
     * @return whether the scanner has reached EOF.
     */
    public final boolean yyatEOF() {
        return zzAtEOF;
    }

    /**
     * Returns the current lexical state.
     *
     * @return the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }

    /**
     * Enters a new lexical state.
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }

    /**
     * Returns the text matched by the current regular expression.
     *
     * @return the matched text.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    /**
     * Returns the character at the given position from the matched text.
     *
     * <p>
     * It is equivalent to {@code yytext().charAt(pos)}, but faster.
     *
     * @param position the position of the character to fetch. A value from 0 to
     * {@code yylength()-1}.
     *
     * @return the character at {@code position}.
     */
    public final char yycharat(int position) {
        return zzBuffer[zzStartRead + position];
    }

    /**
     * How many characters were matched.
     *
     * @return the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }

    /**
     * Reports an error that occurred while scanning.
     *
     * <p>
     * In a well-formed scanner (no or only correct usage of
     * {@code yypushback(int)} and a match-all fallback rule) this method will
     * only be called with things that "Can't Possibly Happen".
     *
     * <p>
     * If this method is called, something is seriously wrong (e.g. a JFlex bug
     * producing a faulty scanner etc.).
     *
     * <p>
     * Usual syntax/scanner level error handling should be done in error
     * fallback rules.
     *
     * @param errorCode the code of the error message to display.
     */
    private static void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * <p>
     * They will be read again by then next call of the scanning method.
     *
     * @param number the number of characters to be read again. This number must
     * not be greater than {@link #yylength()}.
     */
    public void yypushback(int number) {
        if (number > yylength()) {
            zzScanError(ZZ_PUSHBACK_2BIG);
        }

        zzMarkedPos -= number;
    }

    /**
     * Contains user EOF-code, which will be executed exactly once, when the end
     * of file is reached
     */
    private void zzDoEOF() throws java.io.IOException {
        if (!zzEOFDone) {
            zzEOFDone = true;

            yyclose();
        }
    }

    /**
     * Resumes scanning until the next regular expression is matched, the end of
     * input is encountered or an I/O-Error occurs.
     *
     * @return the next token.
     * @exception java.io.IOException if any I/O-Error occurs.
     */
    @Override
    public java_cup.runtime.Symbol next_token() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            yychar += zzMarkedPosL - zzStartRead;

            boolean zzR = false;
            int zzCh;
            int zzCharCount;
            for (zzCurrentPosL = zzStartRead;
                    zzCurrentPosL < zzMarkedPosL;
                    zzCurrentPosL += zzCharCount) {
                zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
                zzCharCount = Character.charCount(zzCh);
                switch (zzCh) {
                    case '\u000B':  // fall through
                    case '\u000C':  // fall through
                    case '\u0085':  // fall through
                    case '\u2028':  // fall through
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR) {
                            zzR = false;
                        } else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn += zzCharCount;
                }
            }

            if (zzR) {
                // peek one character ahead if it is
                // (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL) {
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                } else if (zzAtEOF) {
                    zzPeek = false;
                } else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof) {
                        zzPeek = false;
                    } else {
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                    }
                }
                if (zzPeek) {
                    yyline--;
                }
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }

            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
                    if (zzNext == -1) {
                        break zzForAction;
                    }
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) {
                            break zzForAction;
                        }
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                zzDoEOF();
                {
                    if (indentados == 0) {
                        return new java_cup.runtime.Symbol(sym.EOF);
                    } else {
                        Symbol retorno = indent(yytext(), false, true);
                        if (retorno != null) {
                            return retorno;
                        }
                    }
                }
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        Symbol retorno = indent(yytext(), true, false);
                        if (retorno != null) {
                            return retorno;
                        };
                    }
                    // fall through
                    case 107:
                        break;
                    case 2: {
                        return new Symbol(sym.ERRORLEX, yycolumn, yyline, yytext());
                    }
                    // fall through
                    case 108:
                        break;
                    case 3: {
                        yybegin(SALTO);
                    }
                    // fall through
                    case 109:
                        break;
                    case 4: {
                        /*Ignore*/
                    }
                    // fall through
                    case 110:
                        break;
                    case 5: {
                        /*ignore*/
                    }
                    // fall through
                    case 111:
                        break;
                    case 6: {
                        return symbol(sym.NOT);
                    }
                    // fall through
                    case 112:
                        break;
                    case 7: {
                        str = "";
                        yybegin(STRING);
                    }
                    // fall through
                    case 113:
                        break;
                    case 8: {
                        return symbol(sym.ID);
                    }
                    // fall through
                    case 114:
                        break;
                    case 9: {
                        return symbol(sym.MOD);
                    }
                    // fall through
                    case 115:
                        break;
                    case 10: {
                        yybegin(CHAR);
                    }
                    // fall through
                    case 116:
                        break;
                    case 11: {
                        return symbol(sym.PAR_A);
                    }
                    // fall through
                    case 117:
                        break;
                    case 12: {
                        return symbol(sym.PAR_C);
                    }
                    // fall through
                    case 118:
                        break;
                    case 13: {
                        return symbol(sym.POR);
                    }
                    // fall through
                    case 119:
                        break;
                    case 14: {
                        return symbol(sym.SUMA);
                    }
                    // fall through
                    case 120:
                        break;
                    case 15: {
                        return symbol(sym.COMA);
                    }
                    // fall through
                    case 121:
                        break;
                    case 16: {
                        return symbol(sym.RESTA);
                    }
                    // fall through
                    case 122:
                        break;
                    case 17: {
                        return symbol(sym.ENTRE);
                    }
                    // fall through
                    case 123:
                        break;
                    case 18: {
                        return symbol(sym.NUMERO);
                    }
                    // fall through
                    case 124:
                        break;
                    case 19: {
                        return symbol(sym.DOS_P);
                    }
                    // fall through
                    case 125:
                        break;
                    case 20: {
                        return symbol(sym.PUNTOC);
                    }
                    // fall through
                    case 126:
                        break;
                    case 21: {
                        return symbol(sym.MENOR);
                    }
                    // fall through
                    case 127:
                        break;
                    case 22: {
                        return symbol(sym.ASIGNAR);
                    }
                    // fall through
                    case 128:
                        break;
                    case 23: {
                        return symbol(sym.MAYOR);
                    }
                    // fall through
                    case 129:
                        break;
                    case 24: {
                        return symbol(sym.COR_A);
                    }
                    // fall through
                    case 130:
                        break;
                    case 25: {
                        return symbol(sym.COR_C);
                    }
                    // fall through
                    case 131:
                        break;
                    case 26: {
                        return symbol(sym.POT);
                    }
                    // fall through
                    case 132:
                        break;
                    case 27: {
                        return symbol(sym.LLAVE_A);
                    }
                    // fall through
                    case 133:
                        break;
                    case 28: {
                        return symbol(sym.LLAVE_C);
                    }
                    // fall through
                    case 134:
                        break;
                    case 29: {
                        str += yytext();
                    }
                    // fall through
                    case 135:
                        break;
                    case 30: {
                        yybegin(YYINITIAL);
                        return symbol(sym.STRING,
                                str);
                    }
                    // fall through
                    case 136:
                        break;
                    case 31: {
                        yybegin(ESPECIAL);
                    }
                    // fall through
                    case 137:
                        break;
                    case 32: {
                        return symbol(sym.STRING);
                    }
                    // fall through
                    case 138:
                        break;
                    case 33: {
                        return symbol(sym.CARACTER);
                    }
                    // fall through
                    case 139:
                        break;
                    case 34: {
                        yybegin(YYINITIAL);
                    }
                    // fall through
                    case 140:
                        break;
                    case 35: {
                    }
                    // fall through
                    case 141:
                        break;
                    case 36: {
                        yybegin(SALIDA_MULTI);
                    }
                    // fall through
                    case 142:
                        break;
                    case 37: {
                        Symbol retorno = indent(yytext(), false, false);
                        if (retorno != null) {
                            return retorno;
                        };
                    }
                    // fall through
                    case 143:
                        break;
                    case 38: {
                        yybegin(STRING);
                        yypushback(1);
                    }
                    // fall through
                    case 144:
                        break;
                    case 39: {
                        str += "\"";
                        yybegin(STRING);
                    }
                    // fall through
                    case 145:
                        break;
                    case 40: {
                        str += "#";
                        yybegin(STRING);
                    }
                    // fall through
                    case 146:
                        break;
                    case 41: {
                        str += "'";
                        yybegin(STRING);
                    }
                    // fall through
                    case 147:
                        break;
                    case 42: {
                        str += "\\";
                        yybegin(STRING);
                    }
                    // fall through
                    case 148:
                        break;
                    case 43: {
                        str += "\n";
                        yybegin(STRING);
                    }
                    // fall through
                    case 149:
                        break;
                    case 44: {
                        str += "\r";
                        yybegin(STRING);
                    }
                    // fall through
                    case 150:
                        break;
                    case 45: {
                        str += "\t";
                        yybegin(STRING);
                    }
                    // fall through
                    case 151:
                        break;
                    case 46: {
                        yypushback(1);
                        yybegin(COMMENT_M);
                    }
                    // fall through
                    case 152:
                        break;
                    case 47: {
                        return symbol(sym.NULO);
                    }
                    // fall through
                    case 153:
                        break;
                    case 48: {
                        return symbol(sym.DIFF);
                    }
                    // fall through
                    case 154:
                        break;
                    case 49: {
                        return symbol(sym.AND);
                    }
                    // fall through
                    case 155:
                        break;
                    case 50: {
                        return symbol(sym.XOR);
                    }
                    // fall through
                    case 156:
                        break;
                    case 51: {
                        return symbol(sym.INC);
                    }
                    // fall through
                    case 157:
                        break;
                    case 52: {
                        return symbol(sym.SUMA_S);
                    }
                    // fall through
                    case 158:
                        break;
                    case 53: {
                        return symbol(sym.DEC);
                    }
                    // fall through
                    case 159:
                        break;
                    case 54: {
                        yybegin(COMMENT_M);
                    }
                    // fall through
                    case 160:
                        break;
                    case 55: {
                        return symbol(sym.MENOR_I);
                    }
                    // fall through
                    case 161:
                        break;
                    case 56: {
                        return symbol(sym.IGUAL);
                    }
                    // fall through
                    case 162:
                        break;
                    case 57: {
                        return symbol(sym.MAYOR_I);
                    }
                    // fall through
                    case 163:
                        break;
                    case 58: {
                        yybegin(COMMENT_L);
                    }
                    // fall through
                    case 164:
                        break;
                    case 59: {
                        return symbol(sym.NOTAS);
                    }
                    // fall through
                    case 165:
                        break;
                    case 60: {
                        return symbol(sym.SI);
                    }
                    // fall through
                    case 166:
                        break;
                    case 61: {
                        return symbol(sym.OR);
                    }
                    // fall through
                    case 167:
                        break;
                    case 62: {
                        return symbol(sym.CARACTER, "\"");
                    }
                    // fall through
                    case 168:
                        break;
                    case 63: {
                        return symbol(sym.CARACTER, "#");
                    }
                    // fall through
                    case 169:
                        break;
                    case 64: {
                        return symbol(sym.CARACTER, "'");
                    }
                    // fall through
                    case 170:
                        break;
                    case 65: {
                        return symbol(sym.CARACTER, "\\");
                    }
                    // fall through
                    case 171:
                        break;
                    case 66: {
                        return symbol(sym.CARACTER, "\n");
                    }
                    // fall through
                    case 172:
                        break;
                    case 67: {
                        return symbol(sym.CARACTER, "\r");
                    }
                    // fall through
                    case 173:
                        break;
                    case 68: {
                        return symbol(sym.CARACTER, "\t");
                    }
                    // fall through
                    case 174:
                        break;
                    case 69: {
                        yybegin(COMMENT_L2);
                    }
                    // fall through
                    case 175:
                        break;
                    case 70: {
                        str += "\"";
                        yybegin(YYINITIAL);
                        return symbol(sym.STRING, str);
                    }
                    // fall through
                    case 176:
                        break;
                    case 71: {
                        return symbol(sym.NAND);
                    }
                    // fall through
                    case 177:
                        break;
                    case 72: {
                        return symbol(sym.NOR);
                    }
                    // fall through
                    case 178:
                        break;
                    case 73: {
                        return symbol(sym.NUMERO_D);
                    }
                    // fall through
                    case 179:
                        break;
                    case 74: {
                        return symbol(sym.VAR);
                    }
                    // fall through
                    case 180:
                        break;
                    case 75: {
                        return symbol(sym.CASO);
                    }
                    // fall through
                    case 181:
                        break;
                    case 76: {
                        return symbol(sym.KEEP);
                    }
                    // fall through
                    case 182:
                        break;
                    case 77: {
                        return symbol(sym.PARA);
                    }
                    // fall through
                    case 183:
                        break;
                    case 78: {
                        return symbol(sym.SINO);
                    }
                    // fall through
                    case 184:
                        break;
                    case 79: {
                        return symbol(sym.TRUE);
                    }
                    // fall through
                    case 185:
                        break;
                    case 80: {
                        return symbol(sym.DECIMAL);
                    }
                    // fall through
                    case 186:
                        break;
                    case 81: {
                        return symbol(sym.FALSE);
                    }
                    // fall through
                    case 187:
                        break;
                    case 82: {
                        return symbol(sym.HACER);
                    }
                    // fall through
                    case 188:
                        break;
                    case 83: {
                        return symbol(sym.PAR);
                    }
                    // fall through
                    case 189:
                        break;
                    case 84: {
                        return symbol(sym.PISTA);
                    }
                    // fall through
                    case 190:
                        break;
                    case 85: {
                        return symbol(sym.SALIR);
                    }
                    // fall through
                    case 191:
                        break;
                    case 86: {
                        return symbol(sym.CADENA);
                    }
                    // fall through
                    case 192:
                        break;
                    case 87: {
                        return symbol(sym.ENTERO);
                    }
                    // fall through
                    case 193:
                        break;
                    case 88: {
                        return symbol(sym.SWITCH);
                    }
                    // fall through
                    case 194:
                        break;
                    case 89: {
                        return symbol(sym.ARREGLO);
                    }
                    // fall through
                    case 195:
                        break;
                    case 90: {
                        return symbol(sym.BOOLEAN);
                    }
                    // fall through
                    case 196:
                        break;
                    case 91: {
                        return symbol(sym.DEFAULT);
                    }
                    // fall through
                    case 197:
                        break;
                    case 92: {
                        return symbol(sym.ESPERAR);
                    }
                    // fall through
                    case 198:
                        break;
                    case 93: {
                        return symbol(sym.IMPAR);
                    }
                    // fall through
                    case 199:
                        break;
                    case 94: {
                        return symbol(sym.MSG);
                    }
                    // fall through
                    case 200:
                        break;
                    case 95: {
                        return symbol(sym.ORDENAR);
                    }
                    // fall through
                    case 201:
                        break;
                    case 96: {
                        return symbol(sym.RETORNA);
                    }
                    // fall through
                    case 202:
                        break;
                    case 97: {
                        return symbol(sym.CHAR);
                    }
                    // fall through
                    case 203:
                        break;
                    case 98: {
                        return symbol(sym.EXT);
                    }
                    // fall through
                    case 204:
                        break;
                    case 99: {
                        return symbol(sym.LONG);
                    }
                    // fall through
                    case 205:
                        break;
                    case 100: {
                        return symbol(sym.MIENTRAS);
                    }
                    // fall through
                    case 206:
                        break;
                    case 101: {
                        return symbol(sym.CONT);
                    }
                    // fall through
                    case 207:
                        break;
                    case 102: {
                        return symbol(sym.PRINCIPAL);
                    }
                    // fall through
                    case 208:
                        break;
                    case 103: {
                        return symbol(sym.SUMARIZAR);
                    }
                    // fall through
                    case 209:
                        break;
                    case 104: {
                        return symbol(sym.ASC);
                    }
                    // fall through
                    case 210:
                        break;
                    case 105: {
                        return symbol(sym.REPRODUCIR);
                    }
                    // fall through
                    case 211:
                        break;
                    case 106: {
                        return symbol(sym.DESC);
                    }
                    // fall through
                    case 212:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }

}
