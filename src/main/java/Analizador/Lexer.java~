// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/Analizador/Lexer.flex

package Analizador;
import java_cup.runtime.Symbol;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHAR = 4;
  public static final int COMMENT_L = 6;
  public static final int COMMENT_L2 = 8;
  public static final int COMMENT_M = 10;
  public static final int SALTO = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\0\1\3\22\0\1\4\1\5"+
    "\1\6\1\7\1\0\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\12\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\0\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\52\1\62"+
    "\1\63\1\64\1\65\1\66\2\52\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\1\104\1\105\1\106\1\52\1\107\1\110"+
    "\1\111\1\112\1\113\1\114\1\115\1\52\1\116\1\117"+
    "\1\120\1\121\101\0\1\122\2\0\1\123\u013d\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\2\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\22\27\1\30\1\31\1\32\21\27\1\33\1\2\1\34"+
    "\1\35\1\36\1\2\1\37\1\40\1\37\1\41\1\37"+
    "\1\42\1\41\2\42\1\2\1\43\1\1\2\43\2\2"+
    "\1\44\1\0\1\45\1\0\1\46\1\47\1\50\1\51"+
    "\1\52\1\0\1\53\1\54\1\55\1\56\1\57\55\27"+
    "\1\60\3\27\1\60\10\27\5\61\1\27\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\2\0\1\77\1\100\1\101\1\102"+
    "\76\27\1\103\2\27\1\61\10\27\1\104\26\27\1\105"+
    "\10\27\1\106\13\27\1\107\5\27\1\110\20\27\1\111"+
    "\10\27\1\112\1\113\12\27\1\114\1\115\6\27\1\116"+
    "\14\27\1\117\10\27\1\120\25\27\1\121\3\27\1\122"+
    "\2\27\1\123\4\27\1\124\2\27\1\125\2\27\1\126"+
    "\2\27\1\127\2\27\1\130\3\27\1\131\7\27\1\132"+
    "\4\27\1\133\1\134\1\135\12\27\1\136\2\27\1\137"+
    "\2\27\1\140\1\141\2\27\1\142\1\143";

  private static int [] zzUnpackAction() {
    int [] result = new int[467];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\124\0\250\0\374\0\u0150\0\u01a4\0\u01f8\0\u024c"+
    "\0\u02a0\0\u02f4\0\u0348\0\u039c\0\u024c\0\u024c\0\u03f0\0\u024c"+
    "\0\u024c\0\u024c\0\u024c\0\u0444\0\u024c\0\u0498\0\u024c\0\u04ec"+
    "\0\u024c\0\u024c\0\u0540\0\u0594\0\u05e8\0\u063c\0\u0690\0\u06e4"+
    "\0\u0738\0\u078c\0\u07e0\0\u0834\0\u0888\0\u08dc\0\u0930\0\u0984"+
    "\0\u09d8\0\u0a2c\0\u0a80\0\u0ad4\0\u0b28\0\u0b7c\0\u0bd0\0\u0834"+
    "\0\u0834\0\u0834\0\u0c24\0\u0c78\0\u0ccc\0\u0d20\0\u0d74\0\u0dc8"+
    "\0\u0e1c\0\u0e70\0\u0ec4\0\u0f18\0\u0f6c\0\u0fc0\0\u1014\0\u1068"+
    "\0\u10bc\0\u1110\0\u1164\0\u024c\0\u11b8\0\u024c\0\u120c\0\u024c"+
    "\0\u1260\0\u12b4\0\u12b4\0\u1308\0\u024c\0\u135c\0\u024c\0\u13b0"+
    "\0\u02f4\0\u0348\0\u1404\0\u024c\0\u1458\0\u02f4\0\u0348\0\u14ac"+
    "\0\u1500\0\u024c\0\u1554\0\u024c\0\u15a8\0\u024c\0\u024c\0\u024c"+
    "\0\u024c\0\u024c\0\u15fc\0\u024c\0\u024c\0\u024c\0\u024c\0\u024c"+
    "\0\u1650\0\u16a4\0\u16f8\0\u174c\0\u17a0\0\u17f4\0\u1848\0\u189c"+
    "\0\u18f0\0\u1944\0\u1998\0\u19ec\0\u1a40\0\u1a94\0\u1ae8\0\u1b3c"+
    "\0\u1b90\0\u1be4\0\u1c38\0\u1c8c\0\u1ce0\0\u1d34\0\u1d88\0\u1ddc"+
    "\0\u1e30\0\u1e84\0\u1ed8\0\u1f2c\0\u1f80\0\u1fd4\0\u2028\0\u207c"+
    "\0\u20d0\0\u2124\0\u2178\0\u21cc\0\u2220\0\u2274\0\u22c8\0\u231c"+
    "\0\u2370\0\u23c4\0\u2418\0\u246c\0\u24c0\0\u2514\0\u2568\0\u25bc"+
    "\0\u2610\0\u2664\0\u26b8\0\u270c\0\u2760\0\u27b4\0\u2808\0\u285c"+
    "\0\u28b0\0\u2904\0\u2958\0\u29ac\0\u2a00\0\u2a54\0\u2aa8\0\u2afc"+
    "\0\u024c\0\u024c\0\u024c\0\u024c\0\u024c\0\u024c\0\u024c\0\u12b4"+
    "\0\u024c\0\u12b4\0\u12b4\0\u12b4\0\u12b4\0\u14ac\0\u1500\0\u024c"+
    "\0\u024c\0\u024c\0\u15fc\0\u2b50\0\u2ba4\0\u2bf8\0\u2c4c\0\u2ca0"+
    "\0\u2cf4\0\u2d48\0\u2d9c\0\u2df0\0\u2e44\0\u2e98\0\u2eec\0\u2f40"+
    "\0\u2f94\0\u2fe8\0\u303c\0\u3090\0\u30e4\0\u3138\0\u318c\0\u31e0"+
    "\0\u3234\0\u3288\0\u32dc\0\u3330\0\u3384\0\u33d8\0\u342c\0\u3480"+
    "\0\u34d4\0\u3528\0\u357c\0\u35d0\0\u3624\0\u3678\0\u36cc\0\u3720"+
    "\0\u3774\0\u37c8\0\u381c\0\u3870\0\u38c4\0\u3918\0\u396c\0\u39c0"+
    "\0\u3a14\0\u3a68\0\u3abc\0\u3b10\0\u3b64\0\u3bb8\0\u3c0c\0\u3c60"+
    "\0\u3cb4\0\u3d08\0\u3d5c\0\u3db0\0\u3e04\0\u3e58\0\u3eac\0\u3f00"+
    "\0\u3f54\0\u0834\0\u3fa8\0\u3ffc\0\u024c\0\u4050\0\u40a4\0\u40f8"+
    "\0\u414c\0\u41a0\0\u41f4\0\u4248\0\u429c\0\u0834\0\u42f0\0\u4344"+
    "\0\u4398\0\u43ec\0\u4440\0\u4494\0\u44e8\0\u453c\0\u4590\0\u45e4"+
    "\0\u4638\0\u468c\0\u46e0\0\u4734\0\u4788\0\u47dc\0\u4830\0\u4884"+
    "\0\u48d8\0\u492c\0\u4980\0\u49d4\0\u0834\0\u4a28\0\u4a7c\0\u4ad0"+
    "\0\u4b24\0\u4b78\0\u4bcc\0\u4c20\0\u4c74\0\u0834\0\u4cc8\0\u4d1c"+
    "\0\u4d70\0\u4dc4\0\u4e18\0\u4e6c\0\u4ec0\0\u4f14\0\u4f68\0\u4fbc"+
    "\0\u5010\0\u0834\0\u5064\0\u50b8\0\u510c\0\u5160\0\u51b4\0\u0834"+
    "\0\u5208\0\u525c\0\u52b0\0\u5304\0\u5358\0\u53ac\0\u5400\0\u5454"+
    "\0\u54a8\0\u54fc\0\u5550\0\u55a4\0\u55f8\0\u564c\0\u56a0\0\u56f4"+
    "\0\u0834\0\u5748\0\u579c\0\u57f0\0\u5844\0\u5898\0\u58ec\0\u5940"+
    "\0\u5994\0\u0834\0\u0834\0\u59e8\0\u5a3c\0\u5a90\0\u5ae4\0\u5b38"+
    "\0\u5b8c\0\u5be0\0\u5c34\0\u5c88\0\u5cdc\0\u0834\0\u0834\0\u5d30"+
    "\0\u5d84\0\u5dd8\0\u5e2c\0\u5e80\0\u5ed4\0\u0834\0\u5f28\0\u5f7c"+
    "\0\u5fd0\0\u6024\0\u6078\0\u60cc\0\u6120\0\u6174\0\u61c8\0\u621c"+
    "\0\u6270\0\u62c4\0\u0834\0\u6318\0\u636c\0\u63c0\0\u6414\0\u6468"+
    "\0\u64bc\0\u6510\0\u6564\0\u0834\0\u65b8\0\u660c\0\u6660\0\u66b4"+
    "\0\u6708\0\u675c\0\u67b0\0\u6804\0\u6858\0\u68ac\0\u6900\0\u6954"+
    "\0\u69a8\0\u69fc\0\u6a50\0\u6aa4\0\u6af8\0\u6b4c\0\u6ba0\0\u6bf4"+
    "\0\u6c48\0\u0834\0\u6c9c\0\u6cf0\0\u6d44\0\u0834\0\u6d98\0\u6dec"+
    "\0\u0834\0\u6e40\0\u6e94\0\u6ee8\0\u6f3c\0\u0834\0\u6f90\0\u6fe4"+
    "\0\u0834\0\u7038\0\u708c\0\u0834\0\u70e0\0\u7134\0\u0834\0\u7188"+
    "\0\u71dc\0\u0834\0\u7230\0\u7284\0\u72d8\0\u0834\0\u732c\0\u7380"+
    "\0\u73d4\0\u7428\0\u747c\0\u74d0\0\u7524\0\u0834\0\u7578\0\u75cc"+
    "\0\u7620\0\u7674\0\u0834\0\u0834\0\u0834\0\u76c8\0\u771c\0\u7770"+
    "\0\u77c4\0\u7818\0\u786c\0\u78c0\0\u7914\0\u7968\0\u79bc\0\u0834"+
    "\0\u7a10\0\u7a64\0\u0834\0\u7ab8\0\u7b0c\0\u0834\0\u0834\0\u7b60"+
    "\0\u7bb4\0\u0834\0\u0834";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[467];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\10\1\11\1\12\1\13\1\14\1\15\1\10\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\10\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\10\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\44\1\47\1\50\1\51\1\44\1\52"+
    "\1\53\1\44\1\54\1\55\1\56\1\44\1\57\3\44"+
    "\1\60\1\44\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\44\1\71\1\72\1\44\1\73\1\74"+
    "\1\75\1\44\1\76\1\77\1\100\1\101\1\102\1\44"+
    "\1\103\3\44\1\104\1\105\1\106\2\10\6\107\1\110"+
    "\1\111\74\107\1\10\2\107\1\10\1\107\1\10\12\107"+
    "\5\112\1\113\1\112\1\114\2\113\1\115\2\113\4\112"+
    "\1\113\1\112\1\113\5\112\66\113\4\112\1\116\2\117"+
    "\1\120\1\121\1\122\121\117\1\11\1\121\1\122\122\117"+
    "\1\121\1\122\13\117\1\123\7\117\1\10\73\117\1\124"+
    "\1\125\1\124\1\126\1\127\13\124\1\10\5\124\1\130"+
    "\1\124\1\131\73\124\126\0\1\11\124\0\1\12\124\0"+
    "\1\13\124\0\1\132\3\0\1\133\15\0\1\134\70\0"+
    "\1\135\14\0\1\136\106\0\1\137\21\0\1\140\10\0"+
    "\1\141\114\0\1\142\124\0\1\143\1\0\1\30\120\0"+
    "\1\144\6\0\1\145\123\0\1\146\123\0\1\147\1\150"+
    "\116\0\1\44\6\0\21\44\1\151\1\152\32\44\1\153"+
    "\1\154\6\44\30\0\1\44\6\0\16\44\1\155\34\44"+
    "\1\156\11\44\30\0\1\44\6\0\1\157\15\44\1\160"+
    "\16\44\1\161\15\44\1\162\11\44\30\0\1\44\6\0"+
    "\4\44\1\163\11\44\1\164\22\44\1\165\11\44\1\166"+
    "\11\44\30\0\1\44\6\0\15\44\1\167\4\44\1\170"+
    "\4\44\1\171\22\44\1\172\3\44\1\173\4\44\1\174"+
    "\1\44\30\0\1\44\6\0\1\175\34\44\1\176\27\44"+
    "\30\0\1\44\6\0\65\44\30\0\1\44\6\0\1\177"+
    "\34\44\1\200\27\44\30\0\1\44\6\0\14\44\1\201"+
    "\34\44\1\202\13\44\30\0\1\44\6\0\4\44\1\203"+
    "\34\44\1\204\23\44\30\0\1\44\6\0\16\44\1\205"+
    "\34\44\1\206\11\44\30\0\1\44\6\0\4\44\1\207"+
    "\3\44\1\210\30\44\1\211\3\44\1\212\17\44\30\0"+
    "\1\44\6\0\21\44\1\213\33\44\1\214\7\44\30\0"+
    "\1\44\6\0\1\215\7\44\1\216\10\44\1\217\13\44"+
    "\1\220\7\44\1\221\7\44\1\222\7\44\30\0\1\44"+
    "\6\0\4\44\1\223\34\44\1\224\23\44\30\0\1\44"+
    "\6\0\1\225\7\44\1\226\13\44\1\227\1\44\1\230"+
    "\6\44\1\231\7\44\1\232\12\44\1\233\1\44\1\234"+
    "\2\44\30\0\1\44\6\0\21\44\1\235\33\44\1\236"+
    "\7\44\30\0\1\44\6\0\1\237\3\44\1\240\30\44"+
    "\1\241\3\44\1\242\23\44\30\0\1\44\6\0\55\44"+
    "\1\153\1\154\6\44\30\0\1\44\6\0\53\44\1\156"+
    "\11\44\30\0\1\44\6\0\35\44\1\161\15\44\1\162"+
    "\11\44\30\0\1\44\6\0\41\44\1\165\11\44\1\243"+
    "\11\44\30\0\1\44\6\0\52\44\1\172\3\44\1\173"+
    "\4\44\1\174\1\44\30\0\1\44\6\0\35\44\1\244"+
    "\27\44\30\0\1\44\6\0\35\44\1\200\27\44\30\0"+
    "\1\44\6\0\51\44\1\202\13\44\30\0\1\44\6\0"+
    "\41\44\1\204\23\44\30\0\1\44\6\0\35\44\1\245"+
    "\15\44\1\206\11\44\30\0\1\44\6\0\41\44\1\211"+
    "\3\44\1\246\17\44\30\0\1\44\6\0\55\44\1\214"+
    "\7\44\30\0\1\44\6\0\35\44\1\220\7\44\1\221"+
    "\7\44\1\222\7\44\30\0\1\44\6\0\41\44\1\247"+
    "\23\44\30\0\1\44\6\0\35\44\1\231\7\44\1\232"+
    "\5\44\1\250\4\44\1\233\1\44\1\234\2\44\30\0"+
    "\1\44\6\0\55\44\1\236\7\44\30\0\1\44\6\0"+
    "\35\44\1\241\3\44\1\242\23\44\125\0\1\251\3\0"+
    "\6\107\2\0\74\107\1\0\2\107\1\0\1\107\1\0"+
    "\12\107\6\0\1\252\1\253\54\0\1\254\17\0\1\255"+
    "\2\0\1\256\1\0\1\257\12\0\12\112\1\0\120\112"+
    "\1\260\2\112\1\261\51\112\1\262\17\112\1\263\2\112"+
    "\1\264\1\112\1\265\24\112\1\0\107\112\1\113\1\112"+
    "\2\0\1\120\151\0\1\115\74\0\1\125\24\0\1\266"+
    "\1\0\1\267\113\0\1\144\133\0\1\270\104\0\1\271"+
    "\232\0\1\272\26\0\1\273\123\0\1\44\6\0\21\44"+
    "\1\274\43\44\30\0\1\44\6\0\2\44\1\275\62\44"+
    "\30\0\1\44\6\0\55\44\1\276\7\44\30\0\1\44"+
    "\6\0\37\44\1\277\25\44\30\0\1\44\6\0\16\44"+
    "\1\300\46\44\30\0\1\44\6\0\53\44\1\301\11\44"+
    "\30\0\1\44\6\0\3\44\1\302\15\44\1\303\1\304"+
    "\42\44\30\0\1\44\6\0\15\44\1\305\47\44\30\0"+
    "\1\44\6\0\40\44\1\306\14\44\1\307\1\310\6\44"+
    "\30\0\1\44\6\0\52\44\1\311\12\44\30\0\1\44"+
    "\6\0\5\44\1\312\14\44\1\313\42\44\30\0\1\44"+
    "\6\0\1\44\1\314\63\44\30\0\1\44\6\0\42\44"+
    "\1\315\13\44\1\316\6\44\30\0\1\44\6\0\36\44"+
    "\1\317\26\44\30\0\1\44\6\0\23\44\1\320\41\44"+
    "\30\0\1\44\6\0\17\44\1\321\45\44\30\0\1\44"+
    "\6\0\23\44\1\322\41\44\30\0\1\44\6\0\57\44"+
    "\1\323\5\44\30\0\1\44\6\0\54\44\1\324\10\44"+
    "\30\0\1\44\6\0\57\44\1\325\5\44\30\0\1\44"+
    "\6\0\13\44\1\326\51\44\30\0\1\44\6\0\50\44"+
    "\1\327\14\44\30\0\1\44\6\0\2\44\1\330\62\44"+
    "\30\0\1\44\6\0\37\44\1\331\25\44\30\0\1\44"+
    "\6\0\17\44\1\332\45\44\30\0\1\44\6\0\54\44"+
    "\1\333\10\44\30\0\1\44\6\0\4\44\1\334\60\44"+
    "\30\0\1\44\6\0\41\44\1\335\23\44\30\0\1\44"+
    "\6\0\15\44\1\336\47\44\30\0\1\44\6\0\52\44"+
    "\1\337\12\44\30\0\1\44\6\0\15\44\1\340\47\44"+
    "\30\0\1\44\6\0\4\44\1\341\60\44\30\0\1\44"+
    "\6\0\52\44\1\342\12\44\30\0\1\44\6\0\41\44"+
    "\1\343\23\44\30\0\1\44\6\0\3\44\1\344\61\44"+
    "\30\0\1\44\6\0\40\44\1\345\24\44\30\0\1\44"+
    "\6\0\21\44\1\346\43\44\30\0\1\44\6\0\22\44"+
    "\1\347\42\44\30\0\1\44\6\0\10\44\1\350\54\44"+
    "\30\0\1\44\6\0\55\44\1\351\7\44\30\0\1\44"+
    "\6\0\56\44\1\352\6\44\30\0\1\44\6\0\45\44"+
    "\1\353\17\44\30\0\1\44\6\0\17\44\1\354\3\44"+
    "\1\355\41\44\30\0\1\44\6\0\54\44\1\356\2\44"+
    "\1\357\5\44\30\0\1\44\6\0\13\44\1\360\51\44"+
    "\30\0\1\44\6\0\15\44\1\361\47\44\30\0\1\44"+
    "\6\0\14\44\1\362\50\44\30\0\1\44\6\0\10\44"+
    "\1\363\54\44\30\0\1\44\6\0\50\44\1\364\14\44"+
    "\30\0\1\44\6\0\52\44\1\365\12\44\30\0\1\44"+
    "\6\0\51\44\1\366\13\44\30\0\1\44\6\0\45\44"+
    "\1\367\17\44\30\0\1\44\6\0\24\44\1\370\40\44"+
    "\30\0\1\44\6\0\60\44\1\371\4\44\30\0\1\44"+
    "\6\0\21\44\1\372\43\44\30\0\1\44\6\0\21\44"+
    "\1\373\43\44\30\0\1\44\6\0\55\44\1\372\7\44"+
    "\30\0\1\44\6\0\55\44\1\374\7\44\14\0\1\375"+
    "\13\0\1\44\6\0\36\44\1\317\26\44\14\0\1\375"+
    "\13\0\1\44\6\0\50\44\1\327\14\44\14\0\1\375"+
    "\13\0\1\44\6\0\65\44\14\0\1\375\13\0\1\44"+
    "\6\0\41\44\1\343\23\44\14\0\1\375\13\0\1\44"+
    "\6\0\54\44\1\356\2\44\1\357\5\44\30\0\1\44"+
    "\6\0\50\44\1\245\14\44\30\0\1\44\6\0\4\44"+
    "\1\376\60\44\30\0\1\44\6\0\4\44\1\377\60\44"+
    "\30\0\1\44\6\0\41\44\1\u0100\23\44\30\0\1\44"+
    "\6\0\41\44\1\u0101\23\44\30\0\1\44\6\0\13\44"+
    "\1\u0102\51\44\30\0\1\44\6\0\50\44\1\u0103\14\44"+
    "\30\0\1\44\6\0\4\44\1\u0104\60\44\30\0\1\44"+
    "\6\0\1\u0105\64\44\30\0\1\44\6\0\16\44\1\u0106"+
    "\46\44\30\0\1\44\6\0\23\44\1\u0107\41\44\30\0"+
    "\1\44\6\0\41\44\1\u0108\23\44\30\0\1\44\6\0"+
    "\35\44\1\u0109\27\44\30\0\1\44\6\0\53\44\1\u0106"+
    "\11\44\30\0\1\44\6\0\57\44\1\u010a\5\44\30\0"+
    "\1\44\6\0\1\u010b\64\44\30\0\1\44\6\0\2\44"+
    "\1\u010c\62\44\30\0\1\44\6\0\13\44\1\u010d\51\44"+
    "\30\0\1\44\6\0\35\44\1\u010e\27\44\30\0\1\44"+
    "\6\0\37\44\1\u010f\25\44\30\0\1\44\6\0\50\44"+
    "\1\u0110\14\44\30\0\1\44\6\0\4\44\1\u0111\60\44"+
    "\30\0\1\44\6\0\4\44\1\u0112\60\44\30\0\1\44"+
    "\6\0\10\44\1\u0113\54\44\30\0\1\44\6\0\41\44"+
    "\1\u0114\23\44\30\0\1\44\6\0\41\44\1\u0115\23\44"+
    "\30\0\1\44\6\0\45\44\1\u0116\17\44\30\0\1\44"+
    "\6\0\22\44\1\u0117\42\44\30\0\1\44\6\0\56\44"+
    "\1\u0118\6\44\30\0\1\44\6\0\4\44\1\u0119\60\44"+
    "\30\0\1\44\6\0\41\44\1\u011a\23\44\30\0\1\44"+
    "\6\0\1\u011b\64\44\30\0\1\44\6\0\35\44\1\u011c"+
    "\27\44\30\0\1\44\6\0\17\44\1\u011d\45\44\30\0"+
    "\1\44\6\0\54\44\1\u011d\10\44\30\0\1\44\6\0"+
    "\6\44\1\u011e\56\44\30\0\1\44\6\0\43\44\1\u011f"+
    "\21\44\30\0\1\44\6\0\22\44\1\u0120\42\44\30\0"+
    "\1\44\6\0\15\44\1\u0121\47\44\30\0\1\44\6\0"+
    "\56\44\1\u0122\6\44\30\0\1\44\6\0\52\44\1\u0123"+
    "\12\44\30\0\1\44\6\0\4\44\1\u0124\60\44\30\0"+
    "\1\44\6\0\41\44\1\u0125\23\44\30\0\1\44\6\0"+
    "\1\u0126\3\44\1\u0127\60\44\30\0\1\44\6\0\23\44"+
    "\1\u0128\41\44\30\0\1\44\6\0\15\44\1\u0129\47\44"+
    "\30\0\1\44\6\0\35\44\1\u0126\3\44\1\u012a\23\44"+
    "\30\0\1\44\6\0\57\44\1\u012b\5\44\30\0\1\44"+
    "\6\0\52\44\1\u012c\12\44\30\0\1\44\6\0\21\44"+
    "\1\u012d\43\44\30\0\1\44\6\0\16\44\1\u012e\46\44"+
    "\30\0\1\44\6\0\55\44\1\u012f\7\44\30\0\1\44"+
    "\6\0\53\44\1\u0130\11\44\30\0\1\44\6\0\10\44"+
    "\1\u0131\54\44\30\0\1\44\6\0\16\44\1\u0132\46\44"+
    "\30\0\1\44\6\0\1\u0133\64\44\30\0\1\44\6\0"+
    "\23\44\1\u0134\41\44\30\0\1\44\6\0\45\44\1\u0135"+
    "\17\44\30\0\1\44\6\0\53\44\1\u0132\11\44\30\0"+
    "\1\44\6\0\35\44\1\u0136\27\44\30\0\1\44\6\0"+
    "\57\44\1\u0137\5\44\30\0\1\44\6\0\4\44\1\u0138"+
    "\60\44\30\0\1\44\6\0\41\44\1\u0138\23\44\30\0"+
    "\1\44\6\0\3\44\1\u0139\61\44\30\0\1\44\6\0"+
    "\40\44\1\u013a\24\44\30\0\1\44\6\0\6\44\1\u013b"+
    "\56\44\30\0\1\44\6\0\15\44\1\u013c\47\44\30\0"+
    "\1\44\6\0\43\44\1\u013d\21\44\30\0\1\44\6\0"+
    "\52\44\1\u013e\12\44\30\0\1\44\6\0\4\44\1\u013f"+
    "\60\44\30\0\1\44\6\0\41\44\1\u0140\23\44\30\0"+
    "\1\44\6\0\15\44\1\u0141\47\44\30\0\1\44\6\0"+
    "\2\44\1\u0142\62\44\30\0\1\44\6\0\10\44\1\u0143"+
    "\54\44\30\0\1\44\6\0\52\44\1\u0144\12\44\30\0"+
    "\1\44\6\0\37\44\1\u0145\25\44\30\0\1\44\6\0"+
    "\45\44\1\u0146\17\44\30\0\1\44\6\0\24\44\1\u0147"+
    "\40\44\30\0\1\44\6\0\4\44\1\u0148\60\44\30\0"+
    "\1\44\6\0\4\44\1\u0149\60\44\30\0\1\44\6\0"+
    "\60\44\1\u014a\4\44\30\0\1\44\6\0\41\44\1\u014b"+
    "\23\44\30\0\1\44\6\0\41\44\1\u0149\23\44\30\0"+
    "\1\44\6\0\21\44\1\u014c\43\44\30\0\1\44\6\0"+
    "\21\44\1\u014d\43\44\30\0\1\44\6\0\4\44\1\u014e"+
    "\60\44\30\0\1\44\6\0\55\44\1\u014f\7\44\30\0"+
    "\1\44\6\0\55\44\1\u0150\7\44\30\0\1\44\6\0"+
    "\41\44\1\u0151\23\44\30\0\1\44\6\0\4\44\1\u0152"+
    "\11\44\1\u0152\46\44\30\0\1\44\6\0\41\44\1\u0152"+
    "\11\44\1\u0152\11\44\30\0\1\44\6\0\21\44\1\u0153"+
    "\43\44\30\0\1\44\6\0\55\44\1\u0153\7\44\30\0"+
    "\1\44\6\0\21\44\1\u0154\43\44\30\0\1\44\6\0"+
    "\55\44\1\u0155\7\44\30\0\1\44\6\0\10\44\1\u0156"+
    "\54\44\30\0\1\44\6\0\45\44\1\u0157\17\44\30\0"+
    "\1\44\6\0\1\u0158\64\44\30\0\1\44\6\0\23\44"+
    "\1\u0159\41\44\30\0\1\44\6\0\35\44\1\u015a\27\44"+
    "\30\0\1\44\6\0\57\44\1\u015b\5\44\30\0\1\44"+
    "\6\0\15\44\1\u015c\47\44\30\0\1\44\6\0\52\44"+
    "\1\u015d\12\44\30\0\1\44\6\0\22\44\1\u015e\42\44"+
    "\30\0\1\44\6\0\1\u015f\64\44\30\0\1\44\6\0"+
    "\2\44\1\u0160\62\44\30\0\1\44\6\0\56\44\1\u015e"+
    "\6\44\30\0\1\44\6\0\35\44\1\u015f\27\44\30\0"+
    "\1\44\6\0\37\44\1\u0161\25\44\30\0\1\44\6\0"+
    "\16\44\1\u0162\46\44\30\0\1\44\6\0\21\44\1\u0163"+
    "\43\44\30\0\1\44\6\0\53\44\1\u0164\11\44\30\0"+
    "\1\44\6\0\55\44\1\u0165\7\44\30\0\1\44\6\0"+
    "\21\44\1\u0166\43\44\30\0\1\44\6\0\21\44\1\u0167"+
    "\43\44\30\0\1\44\6\0\2\44\1\u0168\62\44\30\0"+
    "\1\44\6\0\55\44\1\u0166\7\44\30\0\1\44\6\0"+
    "\55\44\1\u0169\7\44\30\0\1\44\6\0\37\44\1\u016a"+
    "\25\44\30\0\1\44\6\0\1\u016b\64\44\30\0\1\44"+
    "\6\0\35\44\1\u016c\27\44\30\0\1\44\6\0\13\44"+
    "\1\u016d\51\44\30\0\1\44\6\0\3\44\1\u016e\61\44"+
    "\30\0\1\44\6\0\50\44\1\u016f\14\44\30\0\1\44"+
    "\6\0\40\44\1\u0170\24\44\30\0\1\44\6\0\1\u0171"+
    "\64\44\30\0\1\44\6\0\35\44\1\u0172\27\44\30\0"+
    "\1\44\6\0\1\u0173\64\44\30\0\1\44\6\0\23\44"+
    "\1\u0174\41\44\30\0\1\44\6\0\15\44\1\u0175\47\44"+
    "\30\0\1\44\6\0\35\44\1\u0173\27\44\30\0\1\44"+
    "\6\0\57\44\1\u0176\5\44\30\0\1\44\6\0\52\44"+
    "\1\u0177\12\44\30\0\1\44\6\0\13\44\1\u0178\51\44"+
    "\30\0\1\44\6\0\15\44\1\u0179\47\44\30\0\1\44"+
    "\6\0\50\44\1\u017a\14\44\30\0\1\44\6\0\52\44"+
    "\1\u017b\12\44\30\0\1\44\6\0\16\44\1\u017c\46\44"+
    "\30\0\1\44\6\0\1\u017d\64\44\30\0\1\44\6\0"+
    "\15\44\1\u017e\47\44\30\0\1\44\6\0\53\44\1\u017c"+
    "\11\44\30\0\1\44\6\0\35\44\1\u017f\27\44\30\0"+
    "\1\44\6\0\52\44\1\u0180\12\44\30\0\1\44\6\0"+
    "\4\44\1\u0181\60\44\30\0\1\44\6\0\41\44\1\u0182"+
    "\23\44\30\0\1\44\6\0\23\44\1\u0183\41\44\30\0"+
    "\1\44\6\0\57\44\1\u0184\5\44\30\0\1\44\6\0"+
    "\11\44\1\u0185\53\44\30\0\1\44\6\0\21\44\1\u0186"+
    "\43\44\30\0\1\44\6\0\46\44\1\u0187\16\44\30\0"+
    "\1\44\6\0\55\44\1\u0188\7\44\30\0\1\44\6\0"+
    "\1\u0189\64\44\30\0\1\44\6\0\35\44\1\u018a\27\44"+
    "\30\0\1\44\6\0\10\44\1\u018b\54\44\30\0\1\44"+
    "\6\0\45\44\1\u018c\17\44\30\0\1\44\6\0\3\44"+
    "\1\u018d\61\44\30\0\1\44\6\0\15\44\1\u018e\47\44"+
    "\30\0\1\44\6\0\40\44\1\u018f\24\44\30\0\1\44"+
    "\6\0\52\44\1\u0190\12\44\30\0\1\44\6\0\10\44"+
    "\1\u0191\54\44\30\0\1\44\6\0\7\44\1\u0192\55\44"+
    "\30\0\1\44\6\0\45\44\1\u0193\17\44\30\0\1\44"+
    "\6\0\44\44\1\u0192\20\44\30\0\1\44\6\0\3\44"+
    "\1\u0194\61\44\30\0\1\44\6\0\40\44\1\u0195\24\44"+
    "\30\0\1\44\6\0\16\44\1\u0196\46\44\30\0\1\44"+
    "\6\0\4\44\1\u0197\60\44\30\0\1\44\6\0\53\44"+
    "\1\u0196\11\44\30\0\1\44\6\0\41\44\1\u0198\23\44"+
    "\30\0\1\44\6\0\15\44\1\u0199\47\44\30\0\1\44"+
    "\6\0\52\44\1\u0199\12\44\30\0\1\44\6\0\4\44"+
    "\1\u019a\60\44\30\0\1\44\6\0\24\44\1\u019b\40\44"+
    "\30\0\1\44\6\0\41\44\1\u019c\23\44\30\0\1\44"+
    "\6\0\60\44\1\u019d\4\44\30\0\1\44\6\0\23\44"+
    "\1\u019e\41\44\30\0\1\44\6\0\3\44\1\u019f\61\44"+
    "\30\0\1\44\6\0\57\44\1\u019e\5\44\30\0\1\44"+
    "\6\0\40\44\1\u01a0\24\44\30\0\1\44\6\0\21\44"+
    "\1\u01a1\43\44\30\0\1\44\6\0\3\44\1\u01a2\61\44"+
    "\30\0\1\44\6\0\55\44\1\u01a1\7\44\30\0\1\44"+
    "\6\0\40\44\1\u01a3\24\44\30\0\1\44\6\0\22\44"+
    "\1\u01a4\42\44\30\0\1\44\6\0\56\44\1\u01a4\6\44"+
    "\30\0\1\44\6\0\24\44\1\u01a5\40\44\30\0\1\44"+
    "\6\0\60\44\1\u01a6\4\44\30\0\1\44\6\0\4\44"+
    "\1\u01a7\60\44\30\0\1\44\6\0\1\u01a8\64\44\30\0"+
    "\1\44\6\0\41\44\1\u01a7\23\44\30\0\1\44\6\0"+
    "\35\44\1\u01a9\27\44\30\0\1\44\6\0\21\44\1\u01aa"+
    "\43\44\30\0\1\44\6\0\55\44\1\u01aa\7\44\30\0"+
    "\1\44\6\0\17\44\1\u01ab\45\44\30\0\1\44\6\0"+
    "\54\44\1\u01ac\10\44\30\0\1\44\6\0\24\44\1\u01ad"+
    "\40\44\30\0\1\44\6\0\1\u01ae\64\44\30\0\1\44"+
    "\6\0\60\44\1\u01af\4\44\30\0\1\44\6\0\35\44"+
    "\1\u01ae\27\44\30\0\1\44\6\0\30\44\1\u01b0\34\44"+
    "\30\0\1\44\6\0\64\44\1\u01b1\30\0\1\44\6\0"+
    "\4\44\1\u01b2\60\44\30\0\1\44\6\0\41\44\1\u01b3"+
    "\23\44\30\0\1\44\6\0\15\44\1\u01b4\47\44\30\0"+
    "\1\44\6\0\52\44\1\u01b5\12\44\30\0\1\44\6\0"+
    "\21\44\1\u01b6\43\44\30\0\1\44\6\0\1\u01b7\64\44"+
    "\30\0\1\44\6\0\55\44\1\u01b6\7\44\30\0\1\44"+
    "\6\0\35\44\1\u01b8\27\44\30\0\1\44\6\0\4\44"+
    "\1\u01b9\60\44\30\0\1\44\6\0\41\44\1\u01ba\23\44"+
    "\30\0\1\44\6\0\4\44\1\u01bb\60\44\30\0\1\44"+
    "\6\0\41\44\1\u01bb\23\44\30\0\1\44\6\0\3\44"+
    "\1\u01bc\61\44\30\0\1\44\6\0\40\44\1\u01bc\24\44"+
    "\30\0\1\44\6\0\22\44\1\u01bd\42\44\30\0\1\44"+
    "\6\0\56\44\1\u01bd\6\44\30\0\1\44\6\0\1\u01be"+
    "\64\44\30\0\1\44\6\0\35\44\1\u01bf\27\44\30\0"+
    "\1\44\6\0\2\44\1\u01c0\62\44\30\0\1\44\6\0"+
    "\37\44\1\u01c1\25\44\30\0\1\44\6\0\1\u01c2\64\44"+
    "\30\0\1\44\6\0\35\44\1\u01c3\27\44\30\0\1\44"+
    "\6\0\21\44\1\u01c4\43\44\30\0\1\44\6\0\55\44"+
    "\1\u01c5\7\44\30\0\1\44\6\0\23\44\1\u01c6\41\44"+
    "\30\0\1\44\6\0\57\44\1\u01c7\5\44\30\0\1\44"+
    "\6\0\21\44\1\u01c8\43\44\30\0\1\44\6\0\55\44"+
    "\1\u01c8\7\44\30\0\1\44\6\0\15\44\1\u01c9\47\44"+
    "\30\0\1\44\6\0\52\44\1\u01ca\12\44\30\0\1\44"+
    "\6\0\13\44\1\u01cb\51\44\30\0\1\44\6\0\50\44"+
    "\1\u01cb\14\44\30\0\1\44\6\0\10\44\1\u01cc\54\44"+
    "\30\0\1\44\6\0\45\44\1\u01cd\17\44\30\0\1\44"+
    "\6\0\21\44\1\u01ce\43\44\30\0\1\44\6\0\55\44"+
    "\1\u01ce\7\44\30\0\1\44\6\0\16\44\1\u0138\46\44"+
    "\30\0\1\44\6\0\53\44\1\u0138\11\44\30\0\1\44"+
    "\6\0\4\44\1\u01cf\60\44\30\0\1\44\6\0\41\44"+
    "\1\u01cf\23\44\30\0\1\44\6\0\23\44\1\u01d0\41\44"+
    "\30\0\1\44\6\0\57\44\1\u01d1\5\44\30\0\1\44"+
    "\6\0\21\44\1\u01d2\43\44\30\0\1\44\6\0\55\44"+
    "\1\u01d2\7\44\30\0\1\44\6\0\4\44\1\u01d3\60\44"+
    "\30\0\1\44\6\0\41\44\1\u01d3\23\44\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[31752];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\1\1\11\4\1\2\11\1\1\4\11\1\1"+
    "\1\11\1\1\1\11\1\1\2\11\51\1\1\11\1\1"+
    "\1\11\1\1\1\11\4\1\1\11\1\1\1\11\4\1"+
    "\1\11\5\1\1\11\1\0\1\11\1\0\5\11\1\0"+
    "\5\11\100\1\7\11\1\1\1\11\4\1\2\0\3\11"+
    "\102\1\1\11\326\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[467];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();
    int indentados = 0;
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn, yytext());
    }
    public Symbol indent(String analizar, boolean tieneTab, boolean esEOF) {
        if (!esEOF) {
            if (tieneTab) {
                int espacios = 0;
                for (int i = 0; i < analizar.length(); i++) {
                    if (analizar.charAt(i) == '\t') {
                        espacios++;
                    }
                }
                if ((indentados - espacios) > 0) {
                    indentados--;
                    yypushback(espacios);
                    System.out.println("Se encuentra dedentado no1");
                    return new Symbol(sym.DEDENT, yyline, yycolumn, yytext());
                } else if ((indentados - espacios)==0) {
                    yybegin(YYINITIAL);
                    return null;
                } else if ((indentados - espacios) < 0) {
                    indentados++;
                    yypushback(espacios);
                    System.out.println("Se encuentra indentado");
                    return new Symbol(sym.INDENT, yyline, yycolumn, yytext());
                } else {
                    System.out.println("No sé como entró acá");
                    return null;
                }
            } else {
                if (indentados > 0) {
                    indentados--;
                    yypushback(1);
                    System.out.println("Se encuentra dedentado no2");
                    return new Symbol(sym.DEDENT, yyline, yycolumn, yytext());
                } else {
                    yybegin(YYINITIAL);
                    yypushback(1);
                    return null;
                }
            }
        } else {
            if (indentados > 0) {
                indentados--;
                System.out.println("Se encuentra dedentado no3");
                return new Symbol(sym.DEDENT, yyline, yycolumn, yytext());
            } else {
                return new java_cup.runtime.Symbol(sym.EOF);
            }
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {
                    if (indentados == 0) {
                        return new java_cup.runtime.Symbol(sym.EOF);
                    } else {
                        Symbol retorno = indent(yytext(), false, true);
                        if (retorno != null) {
                            return retorno;
                        }
                    }
                }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { Symbol retorno = indent(yytext(),true,false); if (retorno!=null) {return retorno; };
            }
            // fall through
          case 100: break;
          case 2:
            { return new Symbol(sym.ERRORLEX,yycolumn,yyline,yytext());
            }
            // fall through
          case 101: break;
          case 3:
            { yybegin(SALTO);
            }
            // fall through
          case 102: break;
          case 4:
            { /*Ignore*/
            }
            // fall through
          case 103: break;
          case 5:
            { /*ignore*/
            }
            // fall through
          case 104: break;
          case 6:
            { return symbol(sym.NOT);
            }
            // fall through
          case 105: break;
          case 7:
            { yybegin(STRING);
            }
            // fall through
          case 106: break;
          case 8:
            { return symbol(sym.MOD);
            }
            // fall through
          case 107: break;
          case 9:
            { yybegin(CHAR);
            }
            // fall through
          case 108: break;
          case 10:
            { return symbol(sym.PAR_A);
            }
            // fall through
          case 109: break;
          case 11:
            { return symbol(sym.PAR_C);
            }
            // fall through
          case 110: break;
          case 12:
            { return symbol(sym.POR);
            }
            // fall through
          case 111: break;
          case 13:
            { return symbol(sym.SUMA);
            }
            // fall through
          case 112: break;
          case 14:
            { return symbol(sym.COMA);
            }
            // fall through
          case 113: break;
          case 15:
            { return symbol(sym.RESTA);
            }
            // fall through
          case 114: break;
          case 16:
            { return symbol(sym.ENTRE);
            }
            // fall through
          case 115: break;
          case 17:
            { return symbol(sym.NUMERO);
            }
            // fall through
          case 116: break;
          case 18:
            { return symbol(sym.DOS_P);
            }
            // fall through
          case 117: break;
          case 19:
            { return symbol(sym.PUNTOC);
            }
            // fall through
          case 118: break;
          case 20:
            { return symbol(sym.MENOR);
            }
            // fall through
          case 119: break;
          case 21:
            { return symbol(sym.ASIGNAR);
            }
            // fall through
          case 120: break;
          case 22:
            { return symbol(sym.MAYOR);
            }
            // fall through
          case 121: break;
          case 23:
            { return symbol(sym.ID);
            }
            // fall through
          case 122: break;
          case 24:
            { return symbol(sym.COR_A);
            }
            // fall through
          case 123: break;
          case 25:
            { return symbol(sym.COR_C);
            }
            // fall through
          case 124: break;
          case 26:
            { return symbol(sym.POT);
            }
            // fall through
          case 125: break;
          case 27:
            { return symbol(sym.LLAVE_A);
            }
            // fall through
          case 126: break;
          case 28:
            { return symbol(sym.LLAVE_C);
            }
            // fall through
          case 127: break;
          case 29:
            { string.append( yytext() );
            }
            // fall through
          case 128: break;
          case 30:
            { yybegin(YYINITIAL);
                                       return symbol(sym.STRING,
                                       string.toString());
            }
            // fall through
          case 129: break;
          case 31:
            { return symbol(sym.STRING);
            }
            // fall through
          case 130: break;
          case 32:
            { return symbol(sym.CARACTER);
            }
            // fall through
          case 131: break;
          case 33:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 132: break;
          case 34:
            { 
            }
            // fall through
          case 133: break;
          case 35:
            { Symbol retorno = indent(yytext(),false,false); if (retorno!=null) {return retorno; };
            }
            // fall through
          case 134: break;
          case 36:
            { return symbol(sym.NULO);
            }
            // fall through
          case 135: break;
          case 37:
            { return symbol(sym.DIFF);
            }
            // fall through
          case 136: break;
          case 38:
            { return symbol(sym.AND);
            }
            // fall through
          case 137: break;
          case 39:
            { return symbol(sym.XOR);
            }
            // fall through
          case 138: break;
          case 40:
            { return symbol(sym.INC);
            }
            // fall through
          case 139: break;
          case 41:
            { return symbol(sym.SUMA_S);
            }
            // fall through
          case 140: break;
          case 42:
            { return symbol(sym.DEC);
            }
            // fall through
          case 141: break;
          case 43:
            { yybegin(COMMENT_M);
            }
            // fall through
          case 142: break;
          case 44:
            { return symbol(sym.MENOR_I);
            }
            // fall through
          case 143: break;
          case 45:
            { return symbol(sym.IGUAL);
            }
            // fall through
          case 144: break;
          case 46:
            { return symbol(sym.MAYOR_I);
            }
            // fall through
          case 145: break;
          case 47:
            { yybegin(COMMENT_L);
            }
            // fall through
          case 146: break;
          case 48:
            { return symbol(sym.SI);
            }
            // fall through
          case 147: break;
          case 49:
            { return symbol(sym.NOTAS);
            }
            // fall through
          case 148: break;
          case 50:
            { return symbol(sym.OR);
            }
            // fall through
          case 149: break;
          case 51:
            { string.append('\"');
            }
            // fall through
          case 150: break;
          case 52:
            { string.append('#');
            }
            // fall through
          case 151: break;
          case 53:
            { string.append('\\');
            }
            // fall through
          case 152: break;
          case 54:
            { string.append('\n');
            }
            // fall through
          case 153: break;
          case 55:
            { string.append('\r');
            }
            // fall through
          case 154: break;
          case 56:
            { string.append('\t');
            }
            // fall through
          case 155: break;
          case 57:
            { return symbol(sym.CARACTER,"#");
            }
            // fall through
          case 156: break;
          case 58:
            { return symbol(sym.CARACTER,"'");
            }
            // fall through
          case 157: break;
          case 59:
            { return symbol(sym.CARACTER,"\\");
            }
            // fall through
          case 158: break;
          case 60:
            { return symbol(sym.CARACTER,"\n");
            }
            // fall through
          case 159: break;
          case 61:
            { return symbol(sym.CARACTER,"\r");
            }
            // fall through
          case 160: break;
          case 62:
            { return symbol(sym.CARACTER,"\t");
            }
            // fall through
          case 161: break;
          case 63:
            { yybegin(COMMENT_L2);
            }
            // fall through
          case 162: break;
          case 64:
            { return symbol(sym.NAND);
            }
            // fall through
          case 163: break;
          case 65:
            { return symbol(sym.NOR);
            }
            // fall through
          case 164: break;
          case 66:
            { return symbol(sym.NUMERO_D);
            }
            // fall through
          case 165: break;
          case 67:
            { return symbol(sym.VAR);
            }
            // fall through
          case 166: break;
          case 68:
            { return symbol(sym.CASO);
            }
            // fall through
          case 167: break;
          case 69:
            { return symbol(sym.KEEP);
            }
            // fall through
          case 168: break;
          case 70:
            { return symbol(sym.PARA);
            }
            // fall through
          case 169: break;
          case 71:
            { return symbol(sym.SINO);
            }
            // fall through
          case 170: break;
          case 72:
            { return symbol(sym.TRUE);
            }
            // fall through
          case 171: break;
          case 73:
            { return symbol(sym.DECIMAL);
            }
            // fall through
          case 172: break;
          case 74:
            { return symbol(sym.FALSE);
            }
            // fall through
          case 173: break;
          case 75:
            { return symbol(sym.HACER);
            }
            // fall through
          case 174: break;
          case 76:
            { return symbol(sym.PAR);
            }
            // fall through
          case 175: break;
          case 77:
            { return symbol(sym.PISTA);
            }
            // fall through
          case 176: break;
          case 78:
            { return symbol(sym.SALIR);
            }
            // fall through
          case 177: break;
          case 79:
            { return symbol(sym.CADENA);
            }
            // fall through
          case 178: break;
          case 80:
            { return symbol(sym.ENTERO);
            }
            // fall through
          case 179: break;
          case 81:
            { return symbol(sym.SWITCH);
            }
            // fall through
          case 180: break;
          case 82:
            { return symbol(sym.ARREGLO);
            }
            // fall through
          case 181: break;
          case 83:
            { return symbol(sym.BOOLEAN);
            }
            // fall through
          case 182: break;
          case 84:
            { return symbol(sym.DEFAULT);
            }
            // fall through
          case 183: break;
          case 85:
            { return symbol(sym.ESPERAR);
            }
            // fall through
          case 184: break;
          case 86:
            { return symbol(sym.IMPAR);
            }
            // fall through
          case 185: break;
          case 87:
            { return symbol(sym.MSG);
            }
            // fall through
          case 186: break;
          case 88:
            { return symbol(sym.ORDENAR);
            }
            // fall through
          case 187: break;
          case 89:
            { return symbol(sym.RETORNA);
            }
            // fall through
          case 188: break;
          case 90:
            { return symbol(sym.CHAR);
            }
            // fall through
          case 189: break;
          case 91:
            { return symbol(sym.EXT);
            }
            // fall through
          case 190: break;
          case 92:
            { return symbol(sym.LONG);
            }
            // fall through
          case 191: break;
          case 93:
            { return symbol(sym.MIENTRAS);
            }
            // fall through
          case 192: break;
          case 94:
            { return symbol(sym.CONT);
            }
            // fall through
          case 193: break;
          case 95:
            { return symbol(sym.PRINCIPAL);
            }
            // fall through
          case 194: break;
          case 96:
            { return symbol(sym.SUMARIZAR);
            }
            // fall through
          case 195: break;
          case 97:
            { return symbol(sym.ASC);
            }
            // fall through
          case 196: break;
          case 98:
            { return symbol(sym.REPRODUCIR);
            }
            // fall through
          case 197: break;
          case 99:
            { return symbol(sym.DESC);
            }
            // fall through
          case 198: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
