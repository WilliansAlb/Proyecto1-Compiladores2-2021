package Analizador;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import Interprete.*;
import Interprete.Metodos_Nativos.*;
import java.util.LinkedList;
import java.util.List;

parser code
{:

    public Expresion sumando;

    public List<Expresion> lista_expresiones;
    public List<Errores> errores = new LinkedList<Errores>();
    public Programa programa = new Programa();
    public List<Metodo> lista_metodos = new LinkedList<>();
    public List<Declaracion> lista_declaraciones = new LinkedList<>();

    public void syntax_error(Symbol cur_token) {
        System.out.println(" Se esperaban: ");
        String esperados = "";
        for (int i = 0; i < expected_token_ids().size(); i++){
            esperados += symbl_name_from_id(expected_token_ids().get(i))+"-";
        }
        System.out.print(esperados+", pero se encontro "+cur_token.value+" en la linea"+cur_token.right+" y en la columna"+cur_token.left);
        errores.add(new Errores(cur_token.right,cur_token.left,"SINTACTICO","Se esperaba "+esperados+" y se encontro "+symbl_name_from_id(cur_token.sym)));
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal "+message+info);
    }
    
    public void report_fatal_error(Symbol cur) {
        System.out.println("unrecovered_syntax_error");
    }

    public void imp(String texto){
        System.out.println(texto);
    }

:};

terminal PISTA, EXT, ENTERO, DECIMAL, BOOLEAN, CHAR, CADENA, TRUE, FALSE, KEEP, VAR,
    SI, SINO, SWITCH, CASO, SALIR, CONT, DEFAULT, PARA, MIENTRAS, HACER, RETORNA, REPRODUCIR,
    NOTAS, ESPERAR, ORDENAR, ASC, DESC, PAR, IMPAR, PRIMOS, SUMARIZAR, LONG, MSG, PRINCIPAL,
    IGUAL, DIFF, MAYOR, MENOR, MAYOR_I, MENOR_I, NULO, AND, NAND, OR, XOR, NOR, NOT, SUMA, RESTA,
    POR, ENTRE, MOD, POT, DEC, INC, SUMA_S, COR_A, COR_C, DOS_P, COMA, LLAVE_A, LLAVE_C, SAL, ARREGLO,
    ID, STRING, CARACTER, PAR_A, PAR_C, NUMERO, NUMERO_D, ASIGNAR, ERRORLEX, INDENT, DEDENT, UMINUS, PUNTOC;

non terminal inicio, declaraciones, asigna, lista_declaracion, metodos_retorno, forma_ordenar, arreglo_cadena, arreglo_ordenar, incremento, decremento, suma_simplificada;

non terminal List<Pista> pistas;
non terminal Pista pista;
non terminal Declaracion declaracion, declaracion_global;
non terminal Metodo metodo;
non terminal Expresion expresion, asignar, dimension;
non terminal Instruccion instruccion, instruc;
non terminal List<Expresion> dimensiones, param2, parametros2, expresiones;
non terminal List<Instruccion> default,instrucciones, inst;
non terminal Primitivo valor_puntual;
non terminal List<String> ids, extiende;
non terminal String tipo, id_llamada, notas, orden;
non terminal List<Caso> casos;
non terminal Caso caso;
non terminal Si si;
non terminal List<ParametroEnviar> parametros_enviar,param_enviar;
non terminal ParametroEnviar parametro_enviar;
non terminal Paso paso, cambio;
non terminal Parametro parametro;
non terminal List<Parametro> parametros, param;
non terminal Mensaje mensaje;
non terminal Reproducir reproducir;
non terminal Esperar esperar;
non terminal Mientras mientras;
non terminal Hacer hacer;
non terminal Para para;
non terminal Llamada llamada;
non terminal Switch switch;
non terminal Asignacion asignacion;
non terminal List<Item> items, arreglo, asignar_arreglo;
non terminal Item item;

precedence left SUMA, RESTA;
precedence left POR, ENTRE, MOD;
precedence left POT;
precedence right UMINUS;
precedence left OR, NOR, XOR;
precedence left AND, NAND;
precedence right NOT;
precedence left IGUAL, DIFF, MENOR, MENOR_I, MAYOR, MAYOR_I;
precedence right NULO;

start with inicio;

inicio::=
    pistas:e1
        {:
            programa = new Programa(e1);
        :}
;

pistas::=
    pistas:e1 pista:e2
        {:
            RESULT = e1;
            RESULT.add(e2);
        :}
|   pista:e1
        {:
            RESULT = new LinkedList<>();
            RESULT.add(e1);
        :}
;

pista::=
    PISTA ID:e2 extiende:e3 INDENT lista_declaracion DEDENT
        {:
            RESULT = new Pista(lista_metodos,lista_declaraciones,e3,e2.toString());
            lista_metodos = new LinkedList<>();
            lista_declaraciones = new LinkedList<>();
        :}
;

extiende::=
        {:
            RESULT = null;
        :}
|   EXT ids:e1
        {:
            RESULT = e1;
        :}
;

ids::=
    ids:e1 COMA ID:e2 
        {: 
            e1.add(e2.toString()); 
            RESULT = e1;
        :}
|   ID:e1 
        {: 
            RESULT = new LinkedList<>();
            RESULT.add(e1.toString()); 
        :}
;

lista_declaracion::=
    lista_declaracion declaraciones
|   declaraciones
;

declaraciones::=
    declaracion_global:e1
        {:
            lista_declaraciones.add(e1);
        :}
|   metodo:e1
        {:
            lista_metodos.add(e1);
        :}
;

metodo::=
    KEEP tipo:e2 ID:e1 PAR_A param:e3 PAR_C INDENT instrucciones:e4 DEDENT
        {:
            RESULT = new Metodo(e1.toString(),e2,e3,e4,true,true,false);
        :}
|   tipo:e2 ID:e1 PAR_A param:e3 PAR_C INDENT instrucciones:e4 DEDENT
        {:
            RESULT = new Metodo(e1.toString(),e2,e3,e4,true,false,false);
        :}
|   ID:e1 PAR_A param:e2 PAR_C INDENT instrucciones:e3 DEDENT
        {:
            RESULT = new Metodo(e1.toString(),"void",e2,e3,false,false,false);
        :}
|   KEEP ID:e1 PAR_A param:e2 PAR_C INDENT instrucciones:e3 DEDENT
        {:
            RESULT = new Metodo(e1.toString(),"void",e2,e3,false,true,false);
        :}
|   KEEP PRINCIPAL PAR_A PAR_C INDENT instrucciones:e4 DEDENT
        {:
            RESULT = new Metodo("Principal","void",null,e4,false,true,true);
        :}
|   PRINCIPAL PAR_A PAR_C INDENT instrucciones:e4 DEDENT
        {:
            RESULT = new Metodo("Principal","void",null,e4,false,false,true);
        :}
;

param::=
        {:
            RESULT = new LinkedList<>();
        :}
|   parametros:e1
        {:
            RESULT = e1;
        :}
;

parametros::=
    parametros:e1 COMA parametro:e2
        {:
            RESULT = e1;
            RESULT.add(e2);
        :}
|   parametro:e1
        {:
            RESULT = new LinkedList<>();
            RESULT.add(e1);
        :}
; 

parametro::=
    tipo:e1 ID:e2
        {:
            RESULT = new Parametro(e1.toString(),e2.toString());
        :}
;

instrucciones::=
    instrucciones:e1 instruccion:e2
        {:
            RESULT = e1;
            RESULT.add(e2);
        :}
|   instruccion:e1
        {:
            RESULT = new LinkedList<>();
            RESULT.add(e1);
        :}
;

instruccion::=
   declaracion:e1
        {:
            RESULT = e1;
        :}
|   asignacion:e1
        {:
            RESULT = e1;
        :}   
|   RETORNA:e2 expresion:e1
        {:
            RESULT = new Retorno(e1,e2right,e2left);
        :}
|   si:e1
        {:
            RESULT = e1;
        :}
|   hacer:e1
        {:
            RESULT = e1;
        :}
|   mientras:e1
        {:
            RESULT = e1;
        :}
|   llamada:e1
        {:
            RESULT = e1;
        :}
|   switch:e1
        {:
            RESULT = e1;
        :}
|   error
        {:
            RESULT = null;
        :}
;

inst::=
    inst:e1 instruc:e2
    {:
        RESULT = e1;
        RESULT.add(e2);
    :}
|   instruc:e1
    {:
        RESULT = new LinkedList<>();
        RESULT.add(e1);
    :}
;

llamada::=
    id_llamada:e1 PAR_A param_enviar PAR_C
;

param_enviar::=
    {:
        RESULT = null;
    :}
|   parametros_enviar:e1
    {:
        RESULT = e1;
    :}
;

parametros_enviar::=
    parametros_enviar:e1 COMA parametro_enviar:e2
        {:
            RESULT = e1;
            RESULT.add(e2);
        :}
|   parametro_enviar:e1
        {:
            RESULT = new LinkedList<>();
            RESULT.add(e1);
        :}
;

parametro_enviar::=
    expresion:e1
        {:
            RESULT = new ParametroEnviar(ParametroEnviar.Tipo.EXPRESION,null,null,null);
        :}
|   llamada:e1
        {:
            RESULT = new ParametroEnviar(ParametroEnviar.Tipo.LLAMADA,null,e1,null);
        :}
|   notas:e1
        {:
            RESULT = new ParametroEnviar(ParametroEnviar.Tipo.NOTA,null,null,e1);
        :}
|   orden:e1
        {:
            RESULT = new ParametroEnviar(ParametroEnviar.Tipo.ORDEN,null,null,e1);
        :}
|   LLAVE_A expresiones:e1 LLAVE_C
        {:
            RESULT = new ParametroEnviar(ParametroEnviar.Tipo.ARREGLO,e1,null,null);
        :}
;

expresiones::=
    expresiones:e1 COMA expresion:e2
        {:
            RESULT = e1;
            RESULT.add(e2);
        :}
|   expresion:e1
        {:
            RESULT = new LinkedList<>();
            RESULT.add(e1);
        :}
;

notas::=
    NOTAS:e1
        {:
            RESULT = e1.toString();
        :}
|   SI:e1
        {:
            RESULT = e1.toString();
        :}
;

orden::=
    ASC:e1
        {:
            RESULT = e1.toString();
        :}
|   DESC:e1
        {:
            RESULT = e1.toString();
        :}
|   PAR:e1
        {:
            RESULT = e1.toString();
        :}
|   IMPAR:e1
        {:
            RESULT = e1.toString();
        :}
|   PRIMOS:e1
        {:
            RESULT = e1.toString();
        :}
;

id_llamada::=
    ID:e1
        {:
            RESULT = e1.toString();
        :}
|   MSG:e1
        {:
            RESULT = e1.toString();
        :}
|   ORDENAR:e1
        {:
            RESULT = e1.toString();
        :}
|   SUMARIZAR:e1
        {:
            RESULT = e1.toString();
        :}
|   LONG:e1
        {:
            RESULT = e1.toString();
        :}
|   REPRODUCIR:e1
        {:
            RESULT = e1.toString();
        :}
|   ESPERAR:e1
        {:
            RESULT = e1.toString();
        :}
;

instruc::=
    instruccion:e1
    {:
        RESULT = e1;
    :}
|   SALIR:e1
    {:
        RESULT = new ContinuarSalir(false,"salir",e1right,e1left);
    :}
|   CONT:e1
    {:
        RESULT = new ContinuarSalir(true,"continuar",e1right,e1left);
    :}
;


declaracion::=
   VAR:e4 tipo:e1 ids:e2 asignar:e3
        {:
            RESULT = new Declaracion(e2, e1, null, e3, null, false, false, e4right, e4left);
        :}
|   VAR:e4 tipo:e1 ARREGLO ids:e2 dimensiones:e3 asignar_arreglo:e5
        {:
            RESULT = new Declaracion(e2, e1, e3, null, e5, true, false, e4right, e4left);
        :}
;

declaracion_global::=
   KEEP VAR:e4 tipo:e1 ids:e2 asignar:e3
        {:
            RESULT = new Declaracion(e2, e1, null, e3, null, false, true, e4right, e4left);
        :}
|   VAR:e4 tipo:e1 ids:e2 asignar:e3
        {:
            RESULT = new Declaracion(e2, e1, null, e3, null, false, false, e4right, e4left);
        :}
|   KEEP VAR:e4 tipo:e1 ARREGLO ids:e2 dimensiones:e3 asignar_arreglo:e5
        {:
            RESULT = new Declaracion(e2, e1, e3, null, e5, true, true, e4right, e4left);
        :}
|   VAR:e4 tipo:e1 ARREGLO ids:e2 dimensiones:e3 asignar_arreglo:e5
        {:
            RESULT = new Declaracion(e2, e1, e3, null, e5, true, false, e4right, e4left);
        :}
;

asignar_arreglo::=
        {:
            RESULT = null;
        :}
|   ASIGNAR LLAVE_A items:e1 LLAVE_C
        {:
            RESULT = e1;
        :}
;

arreglo::=
    LLAVE_A items:e1 LLAVE_C
        {:
            RESULT = e1;
        :}
;

items::=
    items:e1 COMA item:e2
        {:
            RESULT = e1;
            RESULT.add(e2);
        :}
|   item:e1
        {:
            RESULT = new LinkedList<>();
            RESULT.add(e1);
        :}
;

item::=
    arreglo:e1
        {:
            RESULT = new Item(e1,false,null);
        :}
|   expresion:e1
        {:
            RESULT = new Item(null,true,e1);
        :}
;

asignar::=
        {:
            RESULT = null;
        :}
|   ASIGNAR expresion:e1 
        {: 
            RESULT = e1; 
            sumando = e1;
        :}
;

tipo::=
    ENTERO:e1
        {:
            RESULT = "numero";
        :}
|   DECIMAL
        {:
            RESULT = "decimal";
        :}
|   CADENA
        {:
            RESULT = "string";
        :}
|   BOOLEAN
        {:
            RESULT = "boolean";
        :}
|   CHAR
        {:
            RESULT = "caracter";
        :}
;

valor_puntual::=
    NUMERO:e1 
        {:
            RESULT = new Primitivo("numero",(java_cup.runtime.Symbol) CUP$parser$stack.peek(),Integer.parseInt(e1.toString())); 
        :}
|   STRING:e1 
        {: 
            RESULT = new Primitivo("string",(java_cup.runtime.Symbol) CUP$parser$stack.peek(),e1.toString()); 
        :}
|   CARACTER:e1 
        {: 
            RESULT = new Primitivo("caracter",(java_cup.runtime.Symbol) CUP$parser$stack.peek(),e1.toString().charAt(0)); 
        :}
|   TRUE:e1 
        {: 
            RESULT = new Primitivo("boolean",(java_cup.runtime.Symbol) CUP$parser$stack.peek(),true);
        :}
|   FALSE:e1 
        {: 
            RESULT = new Primitivo("boolean",(java_cup.runtime.Symbol) CUP$parser$stack.peek(),false);
        :}
|   NUMERO_D:e1 
        {: 
            RESULT = new Primitivo("decimal",(java_cup.runtime.Symbol) CUP$parser$stack.peek(),Double.parseDouble(e1.toString())); 
        :}
;

expresion::=
   expresion:e1 SUMA expresion:e2 
        {: 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.SUMA);
        :}
|   expresion:e1 RESTA expresion:e2 {:
            imp("Encuentra menos"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.RESTA);
        :}
|   expresion:e1 POR expresion:e2 {: 
            imp("Encuentra por");
            RESULT = new Expresion(e1,e2,Expresion.Operacion.POR);
        :}
|   expresion:e1 ENTRE expresion:e2
        {: 
            imp("Encuentra division"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.ENTRE);
        :}
|   expresion:e1 POT expresion:e2
        {: 
            imp("Encuentra potencia"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.POT);
        :}
|   expresion:e1 MOD expresion:e2 
        {: 
            imp("Encuentra modulo"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.MOD);
        :}
|   RESTA expresion:e1 
        {: 
            imp("Encuentra negativo"); 
            RESULT = new Expresion(e1,Expresion.Operacion.NEGATIVO);
        :}
%prec UMINUS
|   expresion:e1 MAYOR expresion:e2
        {: 
            imp("Encuentra mayor"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.MAYOR);
        :}
|   expresion:e1 MENOR expresion:e2 
        {: 
            imp("Encuentra menor"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.MENOR);
        :}
|   expresion:e1 MENOR_I expresion:e2 
        {: 
            imp("Encuentra menor igual"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.MENOR_I);
        :}
|   expresion:e1 MAYOR_I expresion:e2 
        {: 
            imp("Encuentra mayor igual"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.MAYOR_I);
        :}
|   expresion:e1 IGUAL expresion:e2 
        {: 
            imp("Encuentra igual"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.IGUAL);
        :}
|   expresion:e1 DIFF expresion:e2 
        {: 
            imp("Encuentra diferente"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.DIFF);
        :}
|   expresion:e1 AND expresion:e2
        {: 
            imp("Encuentra and"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.AND);
        :}
|   expresion:e1 OR expresion:e2 
        {: 
            imp("Encuentra or"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.OR);
        :}
|   expresion:e1 XOR expresion:e2 
        {: 
            imp("Encuentra xor"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.XOR);
        :}
|   expresion:e1 NAND expresion:e2 
        {: 
            imp("Encuentra nand"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.NAND);
        :}
|   expresion:e1 NOR expresion:e2 
        {: 
            imp("Encuentra nor"); 
            RESULT = new Expresion(e1,e2,Expresion.Operacion.NOR);
        :}
|   valor_puntual:e1 
        {: 
            imp("Encuentra valor"); 
            RESULT = new Expresion(e1,Expresion.Operacion.PRIMITIVO);
        :}
|   PAR_A expresion:e1 PAR_C
        {: 
            imp("Encuentra parentesis"); 
            RESULT = e1;
        :}
|   ID:e1
        {: 
            imp("Encuentra arreglo"); 
            RESULT = new Expresion(new Identificador(e1.toString(),null,false,e1left,e1right),Expresion.Operacion.IDENTIFICADOR);
        :}
|   ID:e1 dimensiones:e2 
        {: 
            imp("Encuentra arreglo"); 
            RESULT = new Expresion(new Identificador(e1.toString(),e2,true,e1left,e1right),Expresion.Operacion.IDENTIFICADOR);
        :}
|   NOT expresion:e1 
        {: 
            imp("Encuentra not"); 
            RESULT = new Expresion(e1,Expresion.Operacion.NOT);
        :}
|   NULO ID:e1
        {: 
            imp("Encuentra arreglo"); 
            RESULT = new Expresion(new Identificador(e1.toString(),null,false,e1left,e1right),Expresion.Operacion.NULO);
        :}
;

si::=
    SI:e5 PAR_A expresion:e1 PAR_C INDENT inst:e2 DEDENT
        {:
            RESULT = new Si(e1, e2, null, null, e5right, e5left);
        :}
|   SI:e5 PAR_A expresion:e1 PAR_C INDENT inst:e2 DEDENT SINO INDENT inst:e3 DEDENT
        {:
            RESULT = new Si(e1, e2, e3, null, e5right, e5left);
        :}
|   SI:e5 PAR_A expresion:e1 PAR_C INDENT inst:e2 DEDENT SINO si:e3
        {:
            RESULT = new Si(e1, e2, null, e3, e5right, e5left);
        :}
;

asignacion::=
    ID:e1 ASIGNAR expresion:e2
        {: 
            List<Expresion> exp = new LinkedList<>();
            exp.add(e2);
            RESULT = new Asignacion(e1.toString(),exp,null,e1right,e1left);
        :}
|    ID:e1 dimensiones:e3 ASIGNAR expresion:e2 
        {: 
            List<Expresion> exp = new LinkedList<>();
            exp.add(e2);
            RESULT = new Asignacion(e1.toString(),exp,e3,e1right,e1left);
        :}
;

hacer::=
    HACER:e1 INDENT inst:e3 DEDENT MIENTRAS PAR_A expresion:e2 PAR_C
        {:
            RESULT = new Hacer(e2, e3, e1right, e1left);
        :}
;

mientras::=
    MIENTRAS:e1 PAR_A expresion:e2 PAR_C INDENT inst:e3 DEDENT
        {:
            RESULT = new Mientras(e2, e3, e1right, e1left);
        :}
;



switch::=
    SWITCH:e1 PAR_A ID:e2 PAR_C INDENT casos:e3 DEDENT
        {:
            RESULT = new Switch(e2.toString(), e3, null, e1right, e1left);
        :}
|   SWITCH:e1 PAR_A ID:e2 PAR_C INDENT casos:e4 default:e3 DEDENT
        {:
            RESULT = new Switch(e2.toString(), e4, e3, e1right, e1left);
        :}
|   SWITCH:e1 PAR_A ID:e2 PAR_C INDENT default:e3 DEDENT
        {:
            RESULT = new Switch(e2.toString(), null, e3, e1right, e1left);
        :}
;

casos::=
    casos:e1 caso:e2
        {:
            RESULT = e1;
            RESULT.add(e2);
        :}
|   caso:e1
        {:
            RESULT = new LinkedList<>();
            RESULT.add(e1);
        :}
;

caso::=
    CASO:e1 valor_puntual:e3 INDENT inst:e2 DEDENT
        {:
            RESULT = new Caso(e3, e2, e1right, e1left);
        :}
;

default::=
    DEFAULT INDENT inst:e1 DEDENT
        {:
            RESULT = e1;
        :}
;
