package Analizador;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

parser code
{:

    public void syntax_error(Symbol cur_token) {
        System.out.println(" Se esperaban: ");
        String esperados = "";
        for (int i = 0; i < expected_token_ids().size(); i++){
            esperados += symbl_name_from_id(expected_token_ids().get(i))+"-";
        }
        System.out.print(esperados+", pero se encontro "+cur_token.value+" en la linea"+cur_token.right+" y en la columna"+cur_token.left);
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal "+message+info);
    }
    
    public void report_fatal_error(Symbol cur) {
        System.out.println("unrecovered_syntax_error");
    }

    public void imp(String texto){
        System.out.println(texto);
    }

:};

terminal PISTA, EXT, ENTERO, DECIMAL, BOOLEAN, CHAR, CADENA, TRUE, FALSE, KEEP, VAR,
    SI, SINO, SWITCH, CASO, SALIR, CONT, DEFAULT, PARA, MIENTRAS, HACER, RETORNA, REPRODUCIR,
    NOTAS, ESPERAR, ORDENAR, ASC, DESC, PAR, IMPAR, PRIMOS, SUMARIZAR, LONG, MSG, PRINCIPAL,
    IGUAL, DIFF, MAYOR, MENOR, MAYOR_I, MENOR_I, NULO, AND, NAND, OR, XOR, NOR, NOT, SUMA, RESTA,
    POR, ENTRE, MOD, POT, DEC, INC, SUMA_S, COR_A, COR_C, DOS_P, COMA, LLAVE_A, LLAVE_C, SAL,
    ID, STRING, CARACTER, PAR_A, PAR_C, NUMERO, NUMERO_D, ASIGNAR, ERRORLEX, INDENT, DEDENT, UMINUS, PUNTOC;

non terminal inicio, si, sino, bloque, op, op2, instrucciones, instruccion, declaracion, instruccion_condicional, sinosi, condicion,
    switch, pista, pistas, extiende, ids, valor_puntual, expresion, booleano, comparador, binario, default, casos, caso, tipo,
    asignacion, asignar, asigna, para, paso;

precedence left SUMA, RESTA;
precedence left POR, ENTRE, MOD;
precedence left POT;
precedence right UMINUS;
precedence left OR;
precedence left AND;
precedence right NOT;
precedence left IGUAL, DIFF, MENOR, MENOR_I, MAYOR, MAYOR_I;

start with inicio;

inicio::=
    pistas {: imp("todo bien carnalin"); :}
;

pistas::=
    pistas pista
|   pista
;

pista::=
    PISTA ID extiende INDENT instrucciones DEDENT
;

extiende::=
|   EXT ids
;

ids::=
    ids COMA ID
|   ID
;

instrucciones::=
|   instrucciones instruccion
;

instruccion::=
   declaracion
|   asignacion
|   para
|   SI PAR_A condicion PAR_C INDENT instrucciones DEDENT
|   SI PAR_A condicion PAR_C INDENT instrucciones DEDENT SINO INDENT instrucciones DEDENT
|   SI PAR_A condicion PAR_C INDENT instrucciones DEDENT SINO instruccion 
|   switch
|   error
;

declaracion::=
   KEEP VAR tipo ids asignar
|   VAR tipo ids asignar
;

para::=
    PARA PAR_A asigna PUNTOC condicion PUNTOC NUMERO paso PAR_C INDENT instrucciones DEDENT
;

paso::=
    INC
|   DEC
;

asigna::=
    ID ASIGNAR NUMERO
|   ID
;


asignar::=
|   ASIGNAR ID
;

asignacion::=
    ID ASIGNAR NUMERO
;

tipo::=
    ENTERO
|   DECIMAL
|   CADENA
|   BOOLEAN 
|   CHAR
;

switch::=
    SWITCH PAR_A ID PAR_C INDENT casos DEDENT
|   SWITCH PAR_A ID PAR_C INDENT casos default DEDENT
|   SWITCH PAR_A ID PAR_C INDENT default DEDENT
;

casos::=
    casos caso
|   caso
;

caso::=
    CASO valor_puntual INDENT instrucciones DEDENT
;

default::=
    DEFAULT INDENT instrucciones DEDENT
;

valor_puntual::=
    NUMERO
|   STRING
|   CARACTER
;

condicion::=
    booleano
|   PAR_A condicion PAR_C
|   expresion comparador expresion
|   NOT condicion
|   condicion binario condicion
;

booleano::=
    TRUE
|   FALSE
;

expresion::=
    NUMERO
;







