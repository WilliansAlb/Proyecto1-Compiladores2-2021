//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------
package Analizador;

import Interprete.Errores;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import com.mycompany.practica1.Lista;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/**
 * CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class parserLista extends java_cup.runtime.lr_parser {

    public final Class getSymbolContainer() {
        return symLista.class;
    }

    /**
     * Default constructor.
     */
    @Deprecated
    public parserLista() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    @Deprecated
    public parserLista(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public parserLista(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][]
            = unpackFromStrings(new String[]{
        "\000\017\000\002\002\004\000\002\002\003\000\002\003"
        + "\011\000\002\003\003\000\002\004\005\000\002\004\003"
        + "\000\002\005\005\000\002\005\005\000\002\005\005\000"
        + "\002\005\007\000\002\005\003\000\002\007\005\000\002"
        + "\007\003\000\002\006\003\000\002\006\003"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table
            = unpackFromStrings(new String[]{
        "\000\043\000\006\003\005\020\007\001\002\000\004\002"
        + "\000\001\002\000\004\002\ufffe\001\002\000\004\002\045"
        + "\001\002\000\004\004\010\001\002\000\004\017\011\001"
        + "\002\000\004\020\012\001\002\000\014\003\015\005\020"
        + "\006\017\007\014\010\021\001\002\000\006\016\041\021"
        + "\042\001\002\000\004\017\037\001\002\000\006\016\ufff7"
        + "\021\ufff7\001\002\000\006\016\ufffc\021\ufffc\001\002\000"
        + "\004\017\033\001\002\000\004\017\031\001\002\000\004"
        + "\017\022\001\002\000\004\014\023\001\002\000\004\022"
        + "\024\001\002\000\006\015\ufff5\016\ufff5\001\002\000\006"
        + "\015\027\016\026\001\002\000\004\022\030\001\002\000"
        + "\006\016\ufff8\021\ufff8\001\002\000\006\015\ufff6\016\ufff6"
        + "\001\002\000\004\023\032\001\002\000\006\016\ufffb\021"
        + "\ufffb\001\002\000\006\012\035\013\036\001\002\000\006"
        + "\016\ufffa\021\ufffa\001\002\000\006\016\ufff4\021\ufff4\001"
        + "\002\000\006\016\ufff3\021\ufff3\001\002\000\006\012\035"
        + "\013\036\001\002\000\006\016\ufff9\021\ufff9\001\002\000"
        + "\014\003\015\005\020\006\017\007\014\010\021\001\002"
        + "\000\004\021\043\001\002\000\004\002\uffff\001\002\000"
        + "\006\016\ufffd\021\ufffd\001\002\000\004\002\001\001\002"
        + ""});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table
            = unpackFromStrings(new String[]{
        "\000\043\000\006\002\005\003\003\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\006\004\012\005"
        + "\015\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\004\007\024"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\004\006\033\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\004\006\037"
        + "\001\001\000\002\001\001\000\004\005\043\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$parserLista$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$parserLista$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$parserLista$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /** <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }

    public Lista la_lista = new Lista();
    public ArrayList<Errores> lista_errores = new ArrayList<>();

    public void syntax_error(Symbol cur_token) {
        String esperados = "";
        for (int i = 0; i < expected_token_ids().size(); i++) {
            System.out.println(expected_token_ids().get(i) + "no se");
            esperados += symbl_name_from_id(expected_token_ids().get(i)) + "-";
        }
        System.out.print(esperados + ", pero se encontro " + cur_token.value + " en la linea" + cur_token.right + " y en la columna" + cur_token.left);
        if (expected_token_ids().isEmpty()) {
            lista_errores.add(new Errores("Sintactico", "No se esperaba " + cur_token.value, cur_token.left + 1, cur_token.right + 1));
        } else {
            lista_errores.add(new Errores("Sintactico", "Se esperaba " + esperados + ", pero se encontro " + cur_token.value, cur_token.left + 1, cur_token.right + 1));
        }
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal " + message + info);
    }

    public void report_fatal_error(Symbol cur) {
        System.out.println("unrecovered_syntax_error");
    }

    public void imp(String texto) {
        System.out.println(texto);
    }

    /**
     * Cup generated class to encapsulate user supplied action code.
     */
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$parserLista$actions {

        private final parserLista parser;

        /**
         * Constructor
         */
        CUP$parserLista$actions(parserLista parser) {
            this.parser = parser;
        }

        /**
         * Method 0 with the actual generated action code for actions 0 to 300.
         */
        public final java_cup.runtime.Symbol CUP$parserLista$do_action_part00000000(
                int CUP$parserLista$act_num,
                java_cup.runtime.lr_parser CUP$parserLista$parser,
                java.util.Stack CUP$parserLista$stack,
                int CUP$parserLista$top)
                throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$parserLista$result;

            /* select the action based on the action number */
            switch (CUP$parserLista$act_num) {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // $START ::= inicio EOF 
                {
                    Object RESULT = null;
                    int start_valleft = ((java_cup.runtime.Symbol) CUP$parserLista$stack.elementAt(CUP$parserLista$top - 1)).left;
                    int start_valright = ((java_cup.runtime.Symbol) CUP$parserLista$stack.elementAt(CUP$parserLista$top - 1)).right;
                    Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$parserLista$stack.elementAt(CUP$parserLista$top - 1)).value;
                    RESULT = start_val;
                    CUP$parserLista$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$parserLista$stack.elementAt(CUP$parserLista$top - 1)), ((java_cup.runtime.Symbol) CUP$parserLista$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$parserLista$parser.done_parsing();
                return CUP$parserLista$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // inicio ::= listas 
                {
                    Object RESULT = null;

                    if (la_lista.getId() == null) {
                        lista_errores.add(new Errores("Sintactico", "La lista no tiene nombre", 0, 0));
                    }

                    CUP$parserLista$result = parser.getSymbolFactory().newSymbol("inicio", 0, ((java_cup.runtime.Symbol) CUP$parserLista$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserLista$stack.peek()), RESULT);
                }
                return CUP$parserLista$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // listas ::= LLAVE_A LISTA DOS_P LLAVE_A atributos LLAVE_C LLAVE_C 
                {
                    Object RESULT = null;

                    CUP$parserLista$result = parser.getSymbolFactory().newSymbol("listas", 1, ((java_cup.runtime.Symbol) CUP$parserLista$stack.elementAt(CUP$parserLista$top - 6)), ((java_cup.runtime.Symbol) CUP$parserLista$stack.peek()), RESULT);
                }
                return CUP$parserLista$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // listas ::= error 
                {
                    Object RESULT = null;

                    CUP$parserLista$result = parser.getSymbolFactory().newSymbol("listas", 1, ((java_cup.runtime.Symbol) CUP$parserLista$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserLista$stack.peek()), RESULT);
                }
                return CUP$parserLista$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // atributos ::= atributos COMA atributo 
                {
                    Object RESULT = null;

                    CUP$parserLista$result = parser.getSymbolFactory().newSymbol("atributos", 2, ((java_cup.runtime.Symbol) CUP$parserLista$stack.elementAt(CUP$parserLista$top - 2)), ((java_cup.runtime.Symbol) CUP$parserLista$stack.peek()), RESULT);
                }
                return CUP$parserLista$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // atributos ::= atributo 
                {
                    Object RESULT = null;

                    CUP$parserLista$result = parser.getSymbolFactory().newSymbol("atributos", 2, ((java_cup.runtime.Symbol) CUP$parserLista$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserLista$stack.peek()), RESULT);
                }
                return CUP$parserLista$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // atributo ::= NOMBRE DOS_P STRING 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parserLista$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parserLista$stack.peek()).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserLista$stack.peek()).value;

                    if (!la_lista.agregar_id(e1.toString())) {
                        lista_errores.add(new Errores("Sintactico", "El atributo nombre solo puede venir una vez", e1left + 1, e1right + 1));
                    }

                    CUP$parserLista$result = parser.getSymbolFactory().newSymbol("atributo", 3, ((java_cup.runtime.Symbol) CUP$parserLista$stack.elementAt(CUP$parserLista$top - 2)), ((java_cup.runtime.Symbol) CUP$parserLista$stack.peek()), RESULT);
                }
                return CUP$parserLista$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // atributo ::= RANDOM DOS_P booleano 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parserLista$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parserLista$stack.peek()).right;
                    Boolean e1 = (Boolean) ((java_cup.runtime.Symbol) CUP$parserLista$stack.peek()).value;

                    la_lista.setRandom(e1);

                    CUP$parserLista$result = parser.getSymbolFactory().newSymbol("atributo", 3, ((java_cup.runtime.Symbol) CUP$parserLista$stack.elementAt(CUP$parserLista$top - 2)), ((java_cup.runtime.Symbol) CUP$parserLista$stack.peek()), RESULT);
                }
                return CUP$parserLista$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // atributo ::= CIRCULAR DOS_P booleano 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parserLista$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parserLista$stack.peek()).right;
                    Boolean e1 = (Boolean) ((java_cup.runtime.Symbol) CUP$parserLista$stack.peek()).value;

                    la_lista.setCircular(e1);

                    CUP$parserLista$result = parser.getSymbolFactory().newSymbol("atributo", 3, ((java_cup.runtime.Symbol) CUP$parserLista$stack.elementAt(CUP$parserLista$top - 2)), ((java_cup.runtime.Symbol) CUP$parserLista$stack.peek()), RESULT);
                }
                return CUP$parserLista$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 9: // atributo ::= PISTAS DOS_P COR_A pistas COR_C 
                {
                    Object RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parserLista$stack.elementAt(CUP$parserLista$top - 1)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parserLista$stack.elementAt(CUP$parserLista$top - 1)).right;
                    ArrayList<String> e1 = (ArrayList<String>) ((java_cup.runtime.Symbol) CUP$parserLista$stack.elementAt(CUP$parserLista$top - 1)).value;

                    String respuesta = la_lista.agregar_canciones(e1);
                    switch (respuesta) {
                        case "tiene":
                            lista_errores.add(new Errores("Sintactico", "El atributo pistas puede venir cero o una vez, no varias", e1left + 1, e1right + 1));
                            break;
                        case "repetida":
                            lista_errores.add(new Errores("Semantico", "El atributo pistas trae pistas repetidas", e1left + 1, e1right + 1));
                            break;
                        case "exito":
                            break;
                        default:
                            break;
                    }

                    CUP$parserLista$result = parser.getSymbolFactory().newSymbol("atributo", 3, ((java_cup.runtime.Symbol) CUP$parserLista$stack.elementAt(CUP$parserLista$top - 4)), ((java_cup.runtime.Symbol) CUP$parserLista$stack.peek()), RESULT);
                }
                return CUP$parserLista$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 10: // atributo ::= error 
                {
                    Object RESULT = null;

                    CUP$parserLista$result = parser.getSymbolFactory().newSymbol("atributo", 3, ((java_cup.runtime.Symbol) CUP$parserLista$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserLista$stack.peek()), RESULT);
                }
                return CUP$parserLista$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 11: // pistas ::= pistas COMA ID 
                {
                    ArrayList<String> RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parserLista$stack.elementAt(CUP$parserLista$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parserLista$stack.elementAt(CUP$parserLista$top - 2)).right;
                    ArrayList<String> e1 = (ArrayList<String>) ((java_cup.runtime.Symbol) CUP$parserLista$stack.elementAt(CUP$parserLista$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$parserLista$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$parserLista$stack.peek()).right;
                    Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$parserLista$stack.peek()).value;

                    RESULT = e1;
                    RESULT.add(e2.toString());

                    CUP$parserLista$result = parser.getSymbolFactory().newSymbol("pistas", 5, ((java_cup.runtime.Symbol) CUP$parserLista$stack.elementAt(CUP$parserLista$top - 2)), ((java_cup.runtime.Symbol) CUP$parserLista$stack.peek()), RESULT);
                }
                return CUP$parserLista$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 12: // pistas ::= ID 
                {
                    ArrayList<String> RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$parserLista$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$parserLista$stack.peek()).right;
                    Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parserLista$stack.peek()).value;

                    RESULT = new ArrayList<>();
                    RESULT.add(e1.toString());

                    CUP$parserLista$result = parser.getSymbolFactory().newSymbol("pistas", 5, ((java_cup.runtime.Symbol) CUP$parserLista$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserLista$stack.peek()), RESULT);
                }
                return CUP$parserLista$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 13: // booleano ::= TRUE 
                {
                    Boolean RESULT = null;

                    RESULT = true;

                    CUP$parserLista$result = parser.getSymbolFactory().newSymbol("booleano", 4, ((java_cup.runtime.Symbol) CUP$parserLista$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserLista$stack.peek()), RESULT);
                }
                return CUP$parserLista$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 14: // booleano ::= FALSE 
                {
                    Boolean RESULT = null;

                    RESULT = false;

                    CUP$parserLista$result = parser.getSymbolFactory().newSymbol("booleano", 4, ((java_cup.runtime.Symbol) CUP$parserLista$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserLista$stack.peek()), RESULT);
                }
                return CUP$parserLista$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number " + CUP$parserLista$act_num + "found in internal parse table");

            }
        }

        /* end of method */

        /**
         * Method splitting the generated action code into several parts.
         */
        public final java_cup.runtime.Symbol CUP$parserLista$do_action(
                int CUP$parserLista$act_num,
                java_cup.runtime.lr_parser CUP$parserLista$parser,
                java.util.Stack CUP$parserLista$stack,
                int CUP$parserLista$top)
                throws java.lang.Exception {
            return CUP$parserLista$do_action_part00000000(
                    CUP$parserLista$act_num,
                    CUP$parserLista$parser,
                    CUP$parserLista$stack,
                    CUP$parserLista$top);
        }
    }

}
