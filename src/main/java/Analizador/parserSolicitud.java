
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import Interprete.Errores;
import Interprete.Solicitud;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import com.mycompany.practica1.Lista;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parserSolicitud extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symSolicitud.class;
}

  /** Default constructor. */
  @Deprecated
  public parserSolicitud() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parserSolicitud(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserSolicitud(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\032\000\002\002\004\000\002\002\003\000\002\006" +
    "\004\000\002\006\003\000\002\007\011\000\002\010\005" +
    "\000\002\010\003\000\002\016\002\000\002\016\003\000" +
    "\002\011\011\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\012\011\000\002\013\004\000\002\013" +
    "\003\000\002\014\011\000\002\015\004\000\002\015\003" +
    "\000\002\005\006\000\002\022\011\000\002\024\011\000" +
    "\002\023\011\000\002\020\011\000\002\017\003\000\002" +
    "\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\004\020\004\001\002\000\004\004\012\001" +
    "\002\000\006\002\000\020\004\001\002\000\006\002\ufffe" +
    "\020\ufffe\001\002\000\004\002\010\001\002\000\004\002" +
    "\001\001\002\000\006\002\uffff\020\uffff\001\002\000\004" +
    "\021\013\001\002\000\004\020\016\001\002\000\004\022" +
    "\117\001\002\000\006\020\030\022\ufffb\001\002\000\004" +
    "\005\017\001\002\000\004\021\020\001\002\000\010\006" +
    "\023\007\024\010\021\001\002\000\004\022\ufff7\001\002" +
    "\000\004\022\025\001\002\000\004\022\ufff5\001\002\000" +
    "\004\022\ufff6\001\002\000\004\005\026\001\002\000\004" +
    "\021\027\001\002\000\006\020\ufff8\022\ufff8\001\002\000" +
    "\004\026\111\001\002\000\006\020\033\022\ufffa\001\002" +
    "\000\006\020\ufff2\022\ufff2\001\002\000\004\011\037\001" +
    "\002\000\006\020\033\022\ufff9\001\002\000\004\022\ufffc" +
    "\001\002\000\006\020\ufff3\022\ufff3\001\002\000\004\021" +
    "\040\001\002\000\004\020\043\001\002\000\006\020\uffef" +
    "\022\uffef\001\002\000\004\020\057\001\002\000\004\012" +
    "\051\001\002\000\006\020\043\022\046\001\002\000\006" +
    "\020\ufff0\022\ufff0\001\002\000\004\011\047\001\002\000" +
    "\004\021\050\001\002\000\006\020\ufff1\022\ufff1\001\002" +
    "\000\004\021\052\001\002\000\004\017\053\001\002\000" +
    "\004\022\054\001\002\000\004\012\055\001\002\000\004" +
    "\021\056\001\002\000\004\020\uffed\001\002\000\004\013" +
    "\101\001\002\000\004\020\061\001\002\000\004\015\073" +
    "\001\002\000\004\020\064\001\002\000\006\020\uffee\022" +
    "\uffee\001\002\000\004\014\065\001\002\000\004\021\066" +
    "\001\002\000\004\017\067\001\002\000\004\022\070\001" +
    "\002\000\004\014\071\001\002\000\004\021\072\001\002" +
    "\000\006\020\uffeb\022\uffeb\001\002\000\004\021\074\001" +
    "\002\000\004\017\075\001\002\000\004\022\076\001\002" +
    "\000\004\015\077\001\002\000\004\021\100\001\002\000" +
    "\004\020\uffec\001\002\000\004\021\102\001\002\000\006" +
    "\016\104\027\105\001\002\000\004\022\106\001\002\000" +
    "\004\022\uffe9\001\002\000\004\022\uffe8\001\002\000\004" +
    "\013\107\001\002\000\004\021\110\001\002\000\004\020" +
    "\uffea\001\002\000\004\021\112\001\002\000\004\023\113" +
    "\001\002\000\004\022\114\001\002\000\004\026\115\001" +
    "\002\000\004\021\116\001\002\000\006\020\ufff4\022\ufff4" +
    "\001\002\000\004\004\120\001\002\000\004\021\121\001" +
    "\002\000\006\002\ufffd\020\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\010\002\006\006\004\007\005\001\001\000" +
    "\002\001\001\000\004\007\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\013\011\014\001\001\000\002" +
    "\001\001\000\004\012\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\033\014\031\016\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\040\015\043\022\041\001\001\000\002\001\001" +
    "\000\004\020\057\001\001\000\002\001\001\000\006\005" +
    "\044\022\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\061\001\001\000\002\001\001\000\004\023\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserSolicitud$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserSolicitud$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserSolicitud$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ArrayList<Errores> lista_errores = new ArrayList<>();
    public Solicitud soli = new Solicitud();
    
    public void syntax_error(Symbol cur_token) {
        String esperados = "";
        for (int i = 0; i < expected_token_ids().size(); i++) {
            System.out.println(expected_token_ids().get(i) + "no se");
            esperados += symbl_name_from_id(expected_token_ids().get(i)) + "-";
        }
        System.out.print(esperados + ", pero se encontro " + cur_token.value + " en la linea" + cur_token.right + " y en la columna" + cur_token.left);
        if (expected_token_ids().isEmpty()) {
            lista_errores.add(new Errores("Sintactico", "No se esperaba " + cur_token.value, cur_token.left + 1, cur_token.right + 1));
        } else {
            lista_errores.add(new Errores("Sintactico", "Se esperaba " + esperados + ", pero se encontro " + cur_token.value, cur_token.left + 1, cur_token.right + 1));
        }
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal "+message+info);
    }
    
    public void report_fatal_error(Symbol cur) {
        System.out.println("unrecovered_syntax_error");
    }

    public void imp(String texto){
        System.out.println(texto);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parserSolicitud$actions {
  private final parserSolicitud parser;

  /** Constructor */
  CUP$parserSolicitud$actions(parserSolicitud parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parserSolicitud$do_action_part00000000(
    int                        CUP$parserSolicitud$act_num,
    java_cup.runtime.lr_parser CUP$parserSolicitud$parser,
    java.util.Stack            CUP$parserSolicitud$stack,
    int                        CUP$parserSolicitud$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserSolicitud$result;

      /* select the action based on the action number */
      switch (CUP$parserSolicitud$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-1)).value;
		RESULT = start_val;
              CUP$parserSolicitud$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-1)), ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserSolicitud$parser.done_parsing();
          return CUP$parserSolicitud$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= solicitudes 
            {
              Object RESULT =null;

              CUP$parserSolicitud$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()), RESULT);
            }
          return CUP$parserSolicitud$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // solicitudes ::= solicitudes solicitud 
            {
              Object RESULT =null;

              CUP$parserSolicitud$result = parser.getSymbolFactory().newSymbol("solicitudes",4, ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-1)), ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()), RESULT);
            }
          return CUP$parserSolicitud$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // solicitudes ::= solicitud 
            {
              Object RESULT =null;

              CUP$parserSolicitud$result = parser.getSymbolFactory().newSymbol("solicitudes",4, ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()), RESULT);
            }
          return CUP$parserSolicitud$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // solicitud ::= MENOR_Q SOLICITUD MAYOR_Q parametros FIN SOLICITUD MAYOR_Q 
            {
              Object RESULT =null;

              CUP$parserSolicitud$result = parser.getSymbolFactory().newSymbol("solicitud",5, ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-6)), ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()), RESULT);
            }
          return CUP$parserSolicitud$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // parametros ::= tipo nombre data 
            {
              Object RESULT =null;

              CUP$parserSolicitud$result = parser.getSymbolFactory().newSymbol("parametros",6, ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-2)), ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()), RESULT);
            }
          return CUP$parserSolicitud$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // parametros ::= tipo 
            {
              Object RESULT =null;

              CUP$parserSolicitud$result = parser.getSymbolFactory().newSymbol("parametros",6, ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()), RESULT);
            }
          return CUP$parserSolicitud$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // data ::= 
            {
              Object RESULT =null;

              CUP$parserSolicitud$result = parser.getSymbolFactory().newSymbol("data",12, ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()), RESULT);
            }
          return CUP$parserSolicitud$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // data ::= datos 
            {
              Object RESULT =null;

              CUP$parserSolicitud$result = parser.getSymbolFactory().newSymbol("data",12, ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()), RESULT);
            }
          return CUP$parserSolicitud$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo ::= MENOR_Q TIPO MAYOR_Q tipos FIN TIPO MAYOR_Q 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-3)).value;
		
            if (!soli.agregarTipo(e1)){
                lista_errores.add(new Errores("Sintactico", "El atributo tipo ya se encuentra definido", e1left + 1, e1right + 1));
            }
        
              CUP$parserSolicitud$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-6)), ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()), RESULT);
            }
          return CUP$parserSolicitud$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipos ::= PISTANUEVA 
            {
              String RESULT =null;
		
            RESULT = "pistanueva";
        
              CUP$parserSolicitud$result = parser.getSymbolFactory().newSymbol("tipos",15, ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()), RESULT);
            }
          return CUP$parserSolicitud$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipos ::= PISTA 
            {
              String RESULT =null;
		
            RESULT = "pista";
        
              CUP$parserSolicitud$result = parser.getSymbolFactory().newSymbol("tipos",15, ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()), RESULT);
            }
          return CUP$parserSolicitud$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipos ::= LISTA 
            {
              String RESULT =null;
		
            RESULT = "lista";
        
              CUP$parserSolicitud$result = parser.getSymbolFactory().newSymbol("tipos",15, ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()), RESULT);
            }
          return CUP$parserSolicitud$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // nombre ::= MENOR_Q NOMBRE MAYOR_Q STRING FIN NOMBRE MAYOR_Q 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-3)).value;
		
            if (!soli.agregarNombre(e1.toString())){
                lista_errores.add(new Errores("Sintactico", "El atributo nombre ya se encuentra definido", e1left + 1, e1right + 1));
            }
        
              CUP$parserSolicitud$result = parser.getSymbolFactory().newSymbol("nombre",8, ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-6)), ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()), RESULT);
            }
          return CUP$parserSolicitud$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // datos ::= datos dato 
            {
              Object RESULT =null;

              CUP$parserSolicitud$result = parser.getSymbolFactory().newSymbol("datos",9, ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-1)), ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()), RESULT);
            }
          return CUP$parserSolicitud$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // datos ::= dato 
            {
              Object RESULT =null;

              CUP$parserSolicitud$result = parser.getSymbolFactory().newSymbol("datos",9, ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()), RESULT);
            }
          return CUP$parserSolicitud$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // dato ::= MENOR_Q DATOS MAYOR_Q listado_datos FIN DATOS MAYOR_Q 
            {
              Object RESULT =null;

              CUP$parserSolicitud$result = parser.getSymbolFactory().newSymbol("dato",10, ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-6)), ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()), RESULT);
            }
          return CUP$parserSolicitud$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // listado_datos ::= listado_datos atributo 
            {
              Object RESULT =null;

              CUP$parserSolicitud$result = parser.getSymbolFactory().newSymbol("listado_datos",11, ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-1)), ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()), RESULT);
            }
          return CUP$parserSolicitud$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // listado_datos ::= atributo 
            {
              Object RESULT =null;

              CUP$parserSolicitud$result = parser.getSymbolFactory().newSymbol("listado_datos",11, ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()), RESULT);
            }
          return CUP$parserSolicitud$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // atributo ::= canal nota octava duracion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-3)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-1)).right;
		Integer e3 = (Integer)((java_cup.runtime.Symbol) CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()).right;
		Integer e4 = (Integer)((java_cup.runtime.Symbol) CUP$parserSolicitud$stack.peek()).value;
		
            soli.agregarNota(e2,e1,e3,e4);
        
              CUP$parserSolicitud$result = parser.getSymbolFactory().newSymbol("atributo",3, ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-3)), ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()), RESULT);
            }
          return CUP$parserSolicitud$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // canal ::= MENOR_Q CANAL MAYOR_Q NUMERO FIN CANAL MAYOR_Q 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-3)).value;
		
            RESULT = Integer.parseInt(e1.toString());
        
              CUP$parserSolicitud$result = parser.getSymbolFactory().newSymbol("canal",16, ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-6)), ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()), RESULT);
            }
          return CUP$parserSolicitud$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // octava ::= MENOR_Q OCTAVA MAYOR_Q NUMERO FIN OCTAVA MAYOR_Q 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-3)).value;
		
            RESULT = Integer.parseInt(e1.toString());
        
              CUP$parserSolicitud$result = parser.getSymbolFactory().newSymbol("octava",18, ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-6)), ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()), RESULT);
            }
          return CUP$parserSolicitud$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // duracion ::= MENOR_Q DURACION MAYOR_Q NUMERO FIN DURACION MAYOR_Q 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-3)).value;
		
            RESULT = Integer.parseInt(e1.toString());
        
              CUP$parserSolicitud$result = parser.getSymbolFactory().newSymbol("duracion",17, ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-6)), ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()), RESULT);
            }
          return CUP$parserSolicitud$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // nota ::= MENOR_Q NOTA MAYOR_Q notas FIN NOTA MAYOR_Q 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-3)).value;
		
            RESULT = e1;
        
              CUP$parserSolicitud$result = parser.getSymbolFactory().newSymbol("nota",14, ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.elementAt(CUP$parserSolicitud$top-6)), ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()), RESULT);
            }
          return CUP$parserSolicitud$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // notas ::= NOTAS 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserSolicitud$stack.peek()).value;
		
            RESULT = e1.toString();
        
              CUP$parserSolicitud$result = parser.getSymbolFactory().newSymbol("notas",13, ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()), RESULT);
            }
          return CUP$parserSolicitud$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // notas ::= SIN 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserSolicitud$stack.peek()).value;
		
            RESULT = e1.toString();
        
              CUP$parserSolicitud$result = parser.getSymbolFactory().newSymbol("notas",13, ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserSolicitud$stack.peek()), RESULT);
            }
          return CUP$parserSolicitud$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parserSolicitud$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parserSolicitud$do_action(
    int                        CUP$parserSolicitud$act_num,
    java_cup.runtime.lr_parser CUP$parserSolicitud$parser,
    java.util.Stack            CUP$parserSolicitud$stack,
    int                        CUP$parserSolicitud$top)
    throws java.lang.Exception
    {
              return CUP$parserSolicitud$do_action_part00000000(
                               CUP$parserSolicitud$act_num,
                               CUP$parserSolicitud$parser,
                               CUP$parserSolicitud$stack,
                               CUP$parserSolicitud$top);
    }
}

}
